// megafunction wizard: %ALTFP_EXP%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: ALTFP_EXP 

// ============================================================
// File Name: ALTFP_EXa.v
// Megafunction Name(s):
// 			ALTFP_EXP
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 16.0.0 Build 211 04/27/2016 SJ Standard Edition
// ************************************************************


//Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, the Altera Quartus Prime License Agreement,
//the Altera MegaCore Function License Agreement, or other 
//applicable license agreement, including, without limitation, 
//that your use is for the sole purpose of programming logic 
//devices manufactured by Altera and sold by Altera or its 
//authorized distributors.  Please refer to the applicable 
//agreement for further details.


//altfp_exp DEVICE_FAMILY="Cyclone V" PIPELINE=25 ROUNDING="TO_NEAREST" WIDTH_EXP=11 WIDTH_MAN=52 aclr clock data result
//VERSION_BEGIN 16.0 cbx_altfp_exp 2016:04:27:18:05:34:SJ cbx_altmult_opt 2016:04:27:18:05:34:SJ cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_clshift 2016:04:27:18:05:34:SJ cbx_lpm_compare 2016:04:27:18:05:34:SJ cbx_lpm_mult 2016:04:27:18:05:34:SJ cbx_lpm_mux 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_padd 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ cbx_util_mgl 2016:04:27:18:05:34:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//altmult_opt DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=4 LPM_WIDTHA=60 LPM_WIDTHB=60 LPM_WIDTHP=120 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_altmult_opt 2016:04:27:18:05:34:SJ cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_compare 2016:04:27:18:05:34:SJ cbx_lpm_mult 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_padd 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ cbx_util_mgl 2016:04:27:18:05:34:SJ  VERSION_END


//altmult_opt_csa CARRY_SELECT="NO" LPM_DIRECTION="ADD" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=90 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_altmult_opt 2016:04:27:18:05:34:SJ cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_compare 2016:04:27:18:05:34:SJ cbx_lpm_mult 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_padd 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ cbx_util_mgl 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=90 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END

//synthesis_resources = lut 90 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  ALTFP_EXa_altmult_opt_csa
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [89:0]  dataa;
	input   [89:0]  datab;
	output   [89:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [89:0]  dataa;
	tri0   [89:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[89:0]	wire_add_sub1_pipeline_dffe_Q;
	wire	[89:0]	wire_add_sub1_pipeline_dffe_D;
	wire	[89:0]	wire_add_sub1_result_int;
	wire	wire_add_sub1_aclr;
	wire	wire_add_sub1_clken;
	wire	wire_add_sub1_clock;
	wire	[89:0]	wire_add_sub1_dataa;
	wire	[89:0]	wire_add_sub1_datab;
	wire	[89:0]	wire_add_sub1_result;
	wire  [89:0]  result_w;

	assign
		wire_add_sub1_result_int = wire_add_sub1_dataa + wire_add_sub1_datab;
	//synopsys translate_off
	initial
		wire_add_sub1_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_add_sub1_clock or posedge wire_add_sub1_aclr)
		if (wire_add_sub1_aclr == 1'b1) wire_add_sub1_pipeline_dffe_Q <= 90'b0;
		else if (wire_add_sub1_clken == 1'b1) wire_add_sub1_pipeline_dffe_Q <= wire_add_sub1_pipeline_dffe_D;
	assign
		wire_add_sub1_result = wire_add_sub1_pipeline_dffe_Q[89:0],
		wire_add_sub1_pipeline_dffe_D[89:0] = wire_add_sub1_result_int;
	assign
		wire_add_sub1_aclr = aclr,
		wire_add_sub1_clken = clken,
		wire_add_sub1_clock = clock,
		wire_add_sub1_dataa = dataa,
		wire_add_sub1_datab = datab;
	assign
		result = result_w,
		result_w = wire_add_sub1_result;
endmodule //ALTFP_EXa_altmult_opt_csa


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=30 cout dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=30 cout dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=30 LPM_WIDTHB=30 LPM_WIDTHP=60 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_mult 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_padd 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ cbx_util_mgl 2016:04:27:18:05:34:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  ALTFP_EXa_mult
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [29:0]  dataa;
	input   [29:0]  datab;
	output   [59:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg  [59:0]  result_output_reg;
	wire [29:0]    dataa_wire;
	wire [29:0]    datab_wire;
	wire [59:0]    result_wire;


	// synopsys translate_off
	initial
		result_output_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			result_output_reg <= 60'b0;
		else
			if (clken == 1'b1)
				result_output_reg <= result_wire[59:0];

	assign dataa_wire = dataa;
	assign datab_wire = datab;
	assign result_wire = dataa_wire * datab_wire;
	assign result = ({result_output_reg});

endmodule //ALTFP_EXa_mult


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=31 LPM_WIDTHB=31 LPM_WIDTHP=62 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_mult 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_padd 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ cbx_util_mgl 2016:04:27:18:05:34:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  ALTFP_EXa_mult1
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [30:0]  dataa;
	input   [30:0]  datab;
	output   [61:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg  [61:0]  result_output_reg;
	wire [30:0]    dataa_wire;
	wire [30:0]    datab_wire;
	wire [61:0]    result_wire;


	// synopsys translate_off
	initial
		result_output_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			result_output_reg <= 62'b0;
		else
			if (clken == 1'b1)
				result_output_reg <= result_wire[61:0];

	assign dataa_wire = dataa;
	assign datab_wire = datab;
	assign result_wire = dataa_wire * datab_wire;
	assign result = ({result_output_reg});

endmodule //ALTFP_EXa_mult1

//synthesis_resources = lut 150 reg 422 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  ALTFP_EXa_altmult_opt
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [59:0]  dataa;
	input   [59:0]  datab;
	output   [119:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [89:0]   wire_sum_result;
	reg	[89:0]	car_two_adj_reg0;
	reg	[29:0]	lowest_bits_wi_reg0;
	reg	[29:0]	lowest_bits_wi_reg1;
	reg	[59:0]	lsb_prod_wi_reg0;
	reg	[61:0]	mid_prod_wi_reg0;
	reg	[59:0]	msb_prod_wi_reg0;
	reg	[89:0]	sum_two_reg0;
	wire	[30:0]	wire_compress_a_result_int;
	wire	wire_compress_a_cout;
	wire	[29:0]	wire_compress_a_dataa;
	wire	[29:0]	wire_compress_a_datab;
	wire	[29:0]	wire_compress_a_result;
	wire	[30:0]	wire_compress_b_result_int;
	wire	wire_compress_b_cout;
	wire	[29:0]	wire_compress_b_dataa;
	wire	[29:0]	wire_compress_b_datab;
	wire	[29:0]	wire_compress_b_result;
	wire  [29:0]   wire_lsb_prod_dataa;
	wire  [29:0]   wire_lsb_prod_datab;
	wire  [59:0]   wire_lsb_prod_result;
	wire  [30:0]   wire_mid_prod_dataa;
	wire  [30:0]   wire_mid_prod_datab;
	wire  [61:0]   wire_mid_prod_result;
	wire  [59:0]   wire_msb_prod_result;
	wire  [89:0]  car_one;
	wire  [89:0]  car_one_adj;
	wire  [89:0]  car_two;
	wire  [89:0]  car_two_adj;
	wire  [89:0]  car_two_wo;
	wire  [29:0]  lowest_bits_wi;
	wire  [29:0]  lowest_bits_wo;
	wire  [59:0]  lsb_prod_wi;
	wire  [59:0]  lsb_prod_wo;
	wire  [61:0]  mid_prod_wi;
	wire  [61:0]  mid_prod_wo;
	wire  [59:0]  msb_prod_out;
	wire  [59:0]  msb_prod_wi;
	wire  [59:0]  msb_prod_wo;
	wire  [89:0]  neg_lsb;
	wire  [89:0]  neg_msb;
	wire  [89:0]  sum_one;
	wire  [89:0]  sum_two;
	wire  [89:0]  sum_two_wo;
	wire  [89:0]  vector1;
	wire  [89:0]  vector2;
	wire  [59:0]  wire_a;
	wire  [59:0]  wire_b;

	ALTFP_EXa_altmult_opt_csa   sum
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.dataa(car_two_wo),
	.datab(sum_two_wo),
	.result(wire_sum_result));
	// synopsys translate_off
	initial
		car_two_adj_reg0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) car_two_adj_reg0 <= 90'b0;
		else if  (clken == 1'b1)   car_two_adj_reg0 <= car_two_adj;
	// synopsys translate_off
	initial
		lowest_bits_wi_reg0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) lowest_bits_wi_reg0 <= 30'b0;
		else if  (clken == 1'b1)   lowest_bits_wi_reg0 <= lowest_bits_wi;
	// synopsys translate_off
	initial
		lowest_bits_wi_reg1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) lowest_bits_wi_reg1 <= 30'b0;
		else if  (clken == 1'b1)   lowest_bits_wi_reg1 <= lowest_bits_wi_reg0;
	// synopsys translate_off
	initial
		lsb_prod_wi_reg0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) lsb_prod_wi_reg0 <= 60'b0;
		else if  (clken == 1'b1)   lsb_prod_wi_reg0 <= lsb_prod_wi;
	// synopsys translate_off
	initial
		mid_prod_wi_reg0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) mid_prod_wi_reg0 <= 62'b0;
		else if  (clken == 1'b1)   mid_prod_wi_reg0 <= mid_prod_wi;
	// synopsys translate_off
	initial
		msb_prod_wi_reg0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) msb_prod_wi_reg0 <= 60'b0;
		else if  (clken == 1'b1)   msb_prod_wi_reg0 <= msb_prod_wi;
	// synopsys translate_off
	initial
		sum_two_reg0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sum_two_reg0 <= 90'b0;
		else if  (clken == 1'b1)   sum_two_reg0 <= sum_two;
	assign
		wire_compress_a_result_int = wire_compress_a_dataa + wire_compress_a_datab;
	assign
		wire_compress_a_result = wire_compress_a_result_int[29:0],
		wire_compress_a_cout = wire_compress_a_result_int[30:30];
	assign
		wire_compress_a_dataa = wire_a[59:30],
		wire_compress_a_datab = wire_a[29:0];
	assign
		wire_compress_b_result_int = wire_compress_b_dataa + wire_compress_b_datab;
	assign
		wire_compress_b_result = wire_compress_b_result_int[29:0],
		wire_compress_b_cout = wire_compress_b_result_int[30:30];
	assign
		wire_compress_b_dataa = wire_b[59:30],
		wire_compress_b_datab = wire_b[29:0];
	ALTFP_EXa_mult   lsb_prod
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.dataa(wire_a[29:0]),
	.datab(wire_b[29:0]),
	.result(wire_lsb_prod_result));
	ALTFP_EXa_mult1   mid_prod
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.dataa({wire_compress_a_cout, wire_compress_a_result}),
	.datab({wire_compress_b_cout, wire_compress_b_result}),
	.result(wire_mid_prod_result));
	ALTFP_EXa_mult   msb_prod
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.dataa(wire_a[59:30]),
	.datab(wire_b[59:30]),
	.result(wire_msb_prod_result));
	assign
		car_one = {(((vector2[89] & neg_msb[89]) | (vector2[89] & neg_lsb[89])) | (neg_msb[89] & neg_lsb[89])), (((vector2[88] & neg_msb[88]) | (vector2[88] & neg_lsb[88])) | (neg_msb[88] & neg_lsb[88])), (((vector2[87] & neg_msb[87]) | (vector2[87] & neg_lsb[87])) | (neg_msb[87] & neg_lsb[87])), (((vector2[86] & neg_msb[86]) | (vector2[86] & neg_lsb[86])) | (neg_msb[86] & neg_lsb[86])), (((vector2[85] & neg_msb[85]) | (vector2[85] & neg_lsb[85])) | (neg_msb[85] & neg_lsb[85])), (((vector2[84] & neg_msb[84]) | (vector2[84] & neg_lsb[84])) | (neg_msb[84] & neg_lsb[84])), (((vector2[83] & neg_msb[83]) | (vector2[83] & neg_lsb[83])) | (neg_msb[83] & neg_lsb[83])), (((vector2[82] & neg_msb[82]) | (vector2[82] & neg_lsb[82])) | (neg_msb[82] & neg_lsb[82])), (((vector2[81] & neg_msb[81]) | (vector2[81] & neg_lsb[81])) | (neg_msb[81] & neg_lsb[81])), (((vector2[80] & neg_msb[80]) | (vector2[80] & neg_lsb[80])) | (neg_msb[80] & neg_lsb[80])), (((vector2[79] & neg_msb[79]) | (vector2[79] & neg_lsb[79])) | (neg_msb[79] & neg_lsb[79])), (((vector2[78] & neg_msb[78]) | (vector2[78] & neg_lsb[78])) | (neg_msb[78] & neg_lsb[78])), (((vector2[77] & neg_msb[77]) | (vector2[77] & neg_lsb[77])) | (neg_msb[77] & neg_lsb[77])), (((vector2[76] & neg_msb[76]) | (vector2[76] & neg_lsb[76])) | (neg_msb[76] & neg_lsb[76])), (((vector2[75] & neg_msb[75]) | (vector2[75] & neg_lsb[75])) | (neg_msb[75] & neg_lsb[75])), (((vector2[74] & neg_msb[74]) | (vector2[74] & neg_lsb[74])) | (neg_msb[74] & neg_lsb[74])), (((vector2[73] & neg_msb[73]) | (vector2[73] & neg_lsb[73])) | (neg_msb[73] & neg_lsb[73])), (((vector2[72] & neg_msb[72]) | (vector2[72] & neg_lsb[72])) | (neg_msb[72] & neg_lsb[72])), (((vector2[71] & neg_msb[71]) | (vector2[71] & neg_lsb[71])) | (neg_msb[71] & neg_lsb[71])), (((vector2[70] & neg_msb[70]) | (vector2[70] & neg_lsb[70])) | (neg_msb[70] & neg_lsb[70])), (((vector2[69] & neg_msb[69]) | (vector2[69] & neg_lsb[69])) | (neg_msb[69] & neg_lsb[69])), (((vector2[68] & neg_msb[68]) | (vector2[68] & neg_lsb[68])) | (neg_msb[68] & neg_lsb[68]
)), (((vector2[67] & neg_msb[67]) | (vector2[67] & neg_lsb[67])) | (neg_msb[67] & neg_lsb[67])), (((vector2[66] & neg_msb[66]) | (vector2[66] & neg_lsb[66])) | (neg_msb[66] & neg_lsb[66])), (((vector2[65] & neg_msb[65]) | (vector2[65] & neg_lsb[65])) | (neg_msb[65] & neg_lsb[65])), (((vector2[64] & neg_msb[64]) | (vector2[64] & neg_lsb[64])) | (neg_msb[64] & neg_lsb[64])), (((vector2[63] & neg_msb[63]) | (vector2[63] & neg_lsb[63])) | (neg_msb[63] & neg_lsb[63])), (((vector2[62] & neg_msb[62]) | (vector2[62] & neg_lsb[62])) | (neg_msb[62] & neg_lsb[62])), (((vector2[61] & neg_msb[61]) | (vector2[61] & neg_lsb[61])) | (neg_msb[61] & neg_lsb[61])), (((vector2[60] & neg_msb[60]) | (vector2[60] & neg_lsb[60])) | (neg_msb[60] & neg_lsb[60])), (((vector2[59] & neg_msb[59]) | (vector2[59] & neg_lsb[59])) | (neg_msb[59] & neg_lsb[59])), (((vector2[58] & neg_msb[58]) | (vector2[58] & neg_lsb[58])) | (neg_msb[58] & neg_lsb[58])), (((vector2[57] & neg_msb[57]) | (vector2[57] & neg_lsb[57])) | (neg_msb[57] & neg_lsb[57])), (((vector2[56] & neg_msb[56]) | (vector2[56] & neg_lsb[56])) | (neg_msb[56] & neg_lsb[56])), (((vector2[55] & neg_msb[55]) | (vector2[55] & neg_lsb[55])) | (neg_msb[55] & neg_lsb[55])), (((vector2[54] & neg_msb[54]) | (vector2[54] & neg_lsb[54])) | (neg_msb[54] & neg_lsb[54])), (((vector2[53] & neg_msb[53]) | (vector2[53] & neg_lsb[53])) | (neg_msb[53] & neg_lsb[53])), (((vector2[52] & neg_msb[52]) | (vector2[52] & neg_lsb[52])) | (neg_msb[52] & neg_lsb[52])), (((vector2[51] & neg_msb[51]) | (vector2[51] & neg_lsb[51])) | (neg_msb[51] & neg_lsb[51])), (((vector2[50] & neg_msb[50]) | (vector2[50] & neg_lsb[50])) | (neg_msb[50] & neg_lsb[50])), (((vector2[49] & neg_msb[49]) | (vector2[49] & neg_lsb[49])) | (neg_msb[49] & neg_lsb[49])), (((vector2[48] & neg_msb[48]) | (vector2[48] & neg_lsb[48])) | (neg_msb[48] & neg_lsb[48])), (((vector2[47] & neg_msb[47]) | (vector2[47] & neg_lsb[47])) | (neg_msb[47] & neg_lsb[47])), (((vector2[46] & neg_msb[46]) | (vector2[46] & neg_lsb[46])) | (neg_msb[46] & neg_lsb[46]))
, (((vector2[45] & neg_msb[45]) | (vector2[45] & neg_lsb[45])) | (neg_msb[45] & neg_lsb[45])), (((vector2[44] & neg_msb[44]) | (vector2[44] & neg_lsb[44])) | (neg_msb[44] & neg_lsb[44])), (((vector2[43] & neg_msb[43]) | (vector2[43] & neg_lsb[43])) | (neg_msb[43] & neg_lsb[43])), (((vector2[42] & neg_msb[42]) | (vector2[42] & neg_lsb[42])) | (neg_msb[42] & neg_lsb[42])), (((vector2[41] & neg_msb[41]) | (vector2[41] & neg_lsb[41])) | (neg_msb[41] & neg_lsb[41])), (((vector2[40] & neg_msb[40]) | (vector2[40] & neg_lsb[40])) | (neg_msb[40] & neg_lsb[40])), (((vector2[39] & neg_msb[39]) | (vector2[39] & neg_lsb[39])) | (neg_msb[39] & neg_lsb[39])), (((vector2[38] & neg_msb[38]) | (vector2[38] & neg_lsb[38])) | (neg_msb[38] & neg_lsb[38])), (((vector2[37] & neg_msb[37]) | (vector2[37] & neg_lsb[37])) | (neg_msb[37] & neg_lsb[37])), (((vector2[36] & neg_msb[36]) | (vector2[36] & neg_lsb[36])) | (neg_msb[36] & neg_lsb[36])), (((vector2[35] & neg_msb[35]) | (vector2[35] & neg_lsb[35])) | (neg_msb[35] & neg_lsb[35])), (((vector2[34] & neg_msb[34]) | (vector2[34] & neg_lsb[34])) | (neg_msb[34] & neg_lsb[34])), (((vector2[33] & neg_msb[33]) | (vector2[33] & neg_lsb[33])) | (neg_msb[33] & neg_lsb[33])), (((vector2[32] & neg_msb[32]) | (vector2[32] & neg_lsb[32])) | (neg_msb[32] & neg_lsb[32])), (((vector2[31] & neg_msb[31]) | (vector2[31] & neg_lsb[31])) | (neg_msb[31] & neg_lsb[31])), (((vector2[30] & neg_msb[30]) | (vector2[30] & neg_lsb[30])) | (neg_msb[30] & neg_lsb[30])), (((vector2[29] & neg_msb[29]) | (vector2[29] & neg_lsb[29])) | (neg_msb[29] & neg_lsb[29])), (((vector2[28] & neg_msb[28]) | (vector2[28] & neg_lsb[28])) | (neg_msb[28] & neg_lsb[28])), (((vector2[27] & neg_msb[27]) | (vector2[27] & neg_lsb[27])) | (neg_msb[27] & neg_lsb[27])), (((vector2[26] & neg_msb[26]) | (vector2[26] & neg_lsb[26])) | (neg_msb[26] & neg_lsb[26])), (((vector2[25] & neg_msb[25]) | (vector2[25] & neg_lsb[25])) | (neg_msb[25] & neg_lsb[25])), (((vector2[24] & neg_msb[24]) | (vector2[24] & neg_lsb[24])) | (neg_msb[24] & neg_lsb[24])), 
(((vector2[23] & neg_msb[23]) | (vector2[23] & neg_lsb[23])) | (neg_msb[23] & neg_lsb[23])), (((vector2[22] & neg_msb[22]) | (vector2[22] & neg_lsb[22])) | (neg_msb[22] & neg_lsb[22])), (((vector2[21] & neg_msb[21]) | (vector2[21] & neg_lsb[21])) | (neg_msb[21] & neg_lsb[21])), (((vector2[20] & neg_msb[20]) | (vector2[20] & neg_lsb[20])) | (neg_msb[20] & neg_lsb[20])), (((vector2[19] & neg_msb[19]) | (vector2[19] & neg_lsb[19])) | (neg_msb[19] & neg_lsb[19])), (((vector2[18] & neg_msb[18]) | (vector2[18] & neg_lsb[18])) | (neg_msb[18] & neg_lsb[18])), (((vector2[17] & neg_msb[17]) | (vector2[17] & neg_lsb[17])) | (neg_msb[17] & neg_lsb[17])), (((vector2[16] & neg_msb[16]) | (vector2[16] & neg_lsb[16])) | (neg_msb[16] & neg_lsb[16])), (((vector2[15] & neg_msb[15]) | (vector2[15] & neg_lsb[15])) | (neg_msb[15] & neg_lsb[15])), (((vector2[14] & neg_msb[14]) | (vector2[14] & neg_lsb[14])) | (neg_msb[14] & neg_lsb[14])), (((vector2[13] & neg_msb[13]) | (vector2[13] & neg_lsb[13])) | (neg_msb[13] & neg_lsb[13])), (((vector2[12] & neg_msb[12]) | (vector2[12] & neg_lsb[12])) | (neg_msb[12] & neg_lsb[12])), (((vector2[11] & neg_msb[11]) | (vector2[11] & neg_lsb[11])) | (neg_msb[11] & neg_lsb[11])), (((vector2[10] & neg_msb[10]) | (vector2[10] & neg_lsb[10])) | (neg_msb[10] & neg_lsb[10])), (((vector2[9] & neg_msb[9]) | (vector2[9] & neg_lsb[9])) | (neg_msb[9] & neg_lsb[9])), (((vector2[8] & neg_msb[8]) | (vector2[8] & neg_lsb[8])) | (neg_msb[8] & neg_lsb[8])), (((vector2[7] & neg_msb[7]) | (vector2[7] & neg_lsb[7])) | (neg_msb[7] & neg_lsb[7])), (((vector2[6] & neg_msb[6]) | (vector2[6] & neg_lsb[6])) | (neg_msb[6] & neg_lsb[6])), (((vector2[5] & neg_msb[5]) | (vector2[5] & neg_lsb[5])) | (neg_msb[5] & neg_lsb[5])), (((vector2[4] & neg_msb[4]) | (vector2[4] & neg_lsb[4])) | (neg_msb[4] & neg_lsb[4])), (((vector2[3] & neg_msb[3]) | (vector2[3] & neg_lsb[3])) | (neg_msb[3] & neg_lsb[3])), (((vector2[2] & neg_msb[2]) | (vector2[2] & neg_lsb[2])) | (neg_msb[2] & neg_lsb[2])), (((vector2[1] & neg_msb[1]) | (vector2[1] & neg_lsb[1]
)) | (neg_msb[1] & neg_lsb[1])), (((vector2[0] & neg_msb[0]) | (vector2[0] & neg_lsb[0])) | (neg_msb[0] & neg_lsb[0]))},
		car_one_adj = {car_one[88:0], 1'b1},
		car_two = {(((vector1[89] & sum_one[89]) | (vector1[89] & car_one_adj[89])) | (sum_one[89] & car_one_adj[89])), (((vector1[88] & sum_one[88]) | (vector1[88] & car_one_adj[88])) | (sum_one[88] & car_one_adj[88])), (((vector1[87] & sum_one[87]) | (vector1[87] & car_one_adj[87])) | (sum_one[87] & car_one_adj[87])), (((vector1[86] & sum_one[86]) | (vector1[86] & car_one_adj[86])) | (sum_one[86] & car_one_adj[86])), (((vector1[85] & sum_one[85]) | (vector1[85] & car_one_adj[85])) | (sum_one[85] & car_one_adj[85])), (((vector1[84] & sum_one[84]) | (vector1[84] & car_one_adj[84])) | (sum_one[84] & car_one_adj[84])), (((vector1[83] & sum_one[83]) | (vector1[83] & car_one_adj[83])) | (sum_one[83] & car_one_adj[83])), (((vector1[82] & sum_one[82]) | (vector1[82] & car_one_adj[82])) | (sum_one[82] & car_one_adj[82])), (((vector1[81] & sum_one[81]) | (vector1[81] & car_one_adj[81])) | (sum_one[81] & car_one_adj[81])), (((vector1[80] & sum_one[80]) | (vector1[80] & car_one_adj[80])) | (sum_one[80] & car_one_adj[80])), (((vector1[79] & sum_one[79]) | (vector1[79] & car_one_adj[79])) | (sum_one[79] & car_one_adj[79])), (((vector1[78] & sum_one[78]) | (vector1[78] & car_one_adj[78])) | (sum_one[78] & car_one_adj[78])), (((vector1[77] & sum_one[77]) | (vector1[77] & car_one_adj[77])) | (sum_one[77] & car_one_adj[77])), (((vector1[76] & sum_one[76]) | (vector1[76] & car_one_adj[76])) | (sum_one[76] & car_one_adj[76])), (((vector1[75] & sum_one[75]) | (vector1[75] & car_one_adj[75])) | (sum_one[75] & car_one_adj[75])), (((vector1[74] & sum_one[74]) | (vector1[74] & car_one_adj[74])) | (sum_one[74] & car_one_adj[74])), (((vector1[73] & sum_one[73]) | (vector1[73] & car_one_adj[73])) | (sum_one[73] & car_one_adj[73])), (((vector1[72] & sum_one[72]) | (vector1[72] & car_one_adj[72])) | (sum_one[72] & car_one_adj[72])), (((vector1[71] & sum_one[71]) | (vector1[71] & car_one_adj[71])) | (sum_one[71] & car_one_adj[71])), (((vector1[70] & sum_one[70]) | (vector1[70] & car_one_adj[70])) | (sum_one[70] & car_one_adj[70])), (((vector1[69] 
& sum_one[69]) | (vector1[69] & car_one_adj[69])) | (sum_one[69] & car_one_adj[69])), (((vector1[68] & sum_one[68]) | (vector1[68] & car_one_adj[68])) | (sum_one[68] & car_one_adj[68])), (((vector1[67] & sum_one[67]) | (vector1[67] & car_one_adj[67])) | (sum_one[67] & car_one_adj[67])), (((vector1[66] & sum_one[66]) | (vector1[66] & car_one_adj[66])) | (sum_one[66] & car_one_adj[66])), (((vector1[65] & sum_one[65]) | (vector1[65] & car_one_adj[65])) | (sum_one[65] & car_one_adj[65])), (((vector1[64] & sum_one[64]) | (vector1[64] & car_one_adj[64])) | (sum_one[64] & car_one_adj[64])), (((vector1[63] & sum_one[63]) | (vector1[63] & car_one_adj[63])) | (sum_one[63] & car_one_adj[63])), (((vector1[62] & sum_one[62]) | (vector1[62] & car_one_adj[62])) | (sum_one[62] & car_one_adj[62])), (((vector1[61] & sum_one[61]) | (vector1[61] & car_one_adj[61])) | (sum_one[61] & car_one_adj[61])), (((vector1[60] & sum_one[60]) | (vector1[60] & car_one_adj[60])) | (sum_one[60] & car_one_adj[60])), (((vector1[59] & sum_one[59]) | (vector1[59] & car_one_adj[59])) | (sum_one[59] & car_one_adj[59])), (((vector1[58] & sum_one[58]) | (vector1[58] & car_one_adj[58])) | (sum_one[58] & car_one_adj[58])), (((vector1[57] & sum_one[57]) | (vector1[57] & car_one_adj[57])) | (sum_one[57] & car_one_adj[57])), (((vector1[56] & sum_one[56]) | (vector1[56] & car_one_adj[56])) | (sum_one[56] & car_one_adj[56])), (((vector1[55] & sum_one[55]) | (vector1[55] & car_one_adj[55])) | (sum_one[55] & car_one_adj[55])), (((vector1[54] & sum_one[54]) | (vector1[54] & car_one_adj[54])) | (sum_one[54] & car_one_adj[54])), (((vector1[53] & sum_one[53]) | (vector1[53] & car_one_adj[53])) | (sum_one[53] & car_one_adj[53])), (((vector1[52] & sum_one[52]) | (vector1[52] & car_one_adj[52])) | (sum_one[52] & car_one_adj[52])), (((vector1[51] & sum_one[51]) | (vector1[51] & car_one_adj[51])) | (sum_one[51] & car_one_adj[51])), (((vector1[50] & sum_one[50]) | (vector1[50] & car_one_adj[50])) | (sum_one[50] & car_one_adj[50])), (((vector1[49] & sum_one[49]) | (vector1[49]
 & car_one_adj[49])) | (sum_one[49] & car_one_adj[49])), (((vector1[48] & sum_one[48]) | (vector1[48] & car_one_adj[48])) | (sum_one[48] & car_one_adj[48])), (((vector1[47] & sum_one[47]) | (vector1[47] & car_one_adj[47])) | (sum_one[47] & car_one_adj[47])), (((vector1[46] & sum_one[46]) | (vector1[46] & car_one_adj[46])) | (sum_one[46] & car_one_adj[46])), (((vector1[45] & sum_one[45]) | (vector1[45] & car_one_adj[45])) | (sum_one[45] & car_one_adj[45])), (((vector1[44] & sum_one[44]) | (vector1[44] & car_one_adj[44])) | (sum_one[44] & car_one_adj[44])), (((vector1[43] & sum_one[43]) | (vector1[43] & car_one_adj[43])) | (sum_one[43] & car_one_adj[43])), (((vector1[42] & sum_one[42]) | (vector1[42] & car_one_adj[42])) | (sum_one[42] & car_one_adj[42])), (((vector1[41] & sum_one[41]) | (vector1[41] & car_one_adj[41])) | (sum_one[41] & car_one_adj[41])), (((vector1[40] & sum_one[40]) | (vector1[40] & car_one_adj[40])) | (sum_one[40] & car_one_adj[40])), (((vector1[39] & sum_one[39]) | (vector1[39] & car_one_adj[39])) | (sum_one[39] & car_one_adj[39])), (((vector1[38] & sum_one[38]) | (vector1[38] & car_one_adj[38])) | (sum_one[38] & car_one_adj[38])), (((vector1[37] & sum_one[37]) | (vector1[37] & car_one_adj[37])) | (sum_one[37] & car_one_adj[37])), (((vector1[36] & sum_one[36]) | (vector1[36] & car_one_adj[36])) | (sum_one[36] & car_one_adj[36])), (((vector1[35] & sum_one[35]) | (vector1[35] & car_one_adj[35])) | (sum_one[35] & car_one_adj[35])), (((vector1[34] & sum_one[34]) | (vector1[34] & car_one_adj[34])) | (sum_one[34] & car_one_adj[34])), (((vector1[33] & sum_one[33]) | (vector1[33] & car_one_adj[33])) | (sum_one[33] & car_one_adj[33])), (((vector1[32] & sum_one[32]) | (vector1[32] & car_one_adj[32])) | (sum_one[32] & car_one_adj[32])), (((vector1[31] & sum_one[31]) | (vector1[31] & car_one_adj[31])) | (sum_one[31] & car_one_adj[31])), (((vector1[30] & sum_one[30]) | (vector1[30] & car_one_adj[30])) | (sum_one[30] & car_one_adj[30])), (((vector1[29] & sum_one[29]) | (vector1[29] & car_one_adj[29])) | (sum_one[29]
 & car_one_adj[29])), (((vector1[28] & sum_one[28]) | (vector1[28] & car_one_adj[28])) | (sum_one[28] & car_one_adj[28])), (((vector1[27] & sum_one[27]) | (vector1[27] & car_one_adj[27])) | (sum_one[27] & car_one_adj[27])), (((vector1[26] & sum_one[26]) | (vector1[26] & car_one_adj[26])) | (sum_one[26] & car_one_adj[26])), (((vector1[25] & sum_one[25]) | (vector1[25] & car_one_adj[25])) | (sum_one[25] & car_one_adj[25])), (((vector1[24] & sum_one[24]) | (vector1[24] & car_one_adj[24])) | (sum_one[24] & car_one_adj[24])), (((vector1[23] & sum_one[23]) | (vector1[23] & car_one_adj[23])) | (sum_one[23] & car_one_adj[23])), (((vector1[22] & sum_one[22]) | (vector1[22] & car_one_adj[22])) | (sum_one[22] & car_one_adj[22])), (((vector1[21] & sum_one[21]) | (vector1[21] & car_one_adj[21])) | (sum_one[21] & car_one_adj[21])), (((vector1[20] & sum_one[20]) | (vector1[20] & car_one_adj[20])) | (sum_one[20] & car_one_adj[20])), (((vector1[19] & sum_one[19]) | (vector1[19] & car_one_adj[19])) | (sum_one[19] & car_one_adj[19])), (((vector1[18] & sum_one[18]) | (vector1[18] & car_one_adj[18])) | (sum_one[18] & car_one_adj[18])), (((vector1[17] & sum_one[17]) | (vector1[17] & car_one_adj[17])) | (sum_one[17] & car_one_adj[17])), (((vector1[16] & sum_one[16]) | (vector1[16] & car_one_adj[16])) | (sum_one[16] & car_one_adj[16])), (((vector1[15] & sum_one[15]) | (vector1[15] & car_one_adj[15])) | (sum_one[15] & car_one_adj[15])), (((vector1[14] & sum_one[14]) | (vector1[14] & car_one_adj[14])) | (sum_one[14] & car_one_adj[14])), (((vector1[13] & sum_one[13]) | (vector1[13] & car_one_adj[13])) | (sum_one[13] & car_one_adj[13])), (((vector1[12] & sum_one[12]) | (vector1[12] & car_one_adj[12])) | (sum_one[12] & car_one_adj[12])), (((vector1[11] & sum_one[11]) | (vector1[11] & car_one_adj[11])) | (sum_one[11] & car_one_adj[11])), (((vector1[10] & sum_one[10]) | (vector1[10] & car_one_adj[10])) | (sum_one[10] & car_one_adj[10])), (((vector1[9] & sum_one[9]) | (vector1[9] & car_one_adj[9])) | (sum_one[9] & car_one_adj[9])), (((vector1[8]
 & sum_one[8]) | (vector1[8] & car_one_adj[8])) | (sum_one[8] & car_one_adj[8])), (((vector1[7] & sum_one[7]) | (vector1[7] & car_one_adj[7])) | (sum_one[7] & car_one_adj[7])), (((vector1[6] & sum_one[6]) | (vector1[6] & car_one_adj[6])) | (sum_one[6] & car_one_adj[6])), (((vector1[5] & sum_one[5]) | (vector1[5] & car_one_adj[5])) | (sum_one[5] & car_one_adj[5])), (((vector1[4] & sum_one[4]) | (vector1[4] & car_one_adj[4])) | (sum_one[4] & car_one_adj[4])), (((vector1[3] & sum_one[3]) | (vector1[3] & car_one_adj[3])) | (sum_one[3] & car_one_adj[3])), (((vector1[2] & sum_one[2]) | (vector1[2] & car_one_adj[2])) | (sum_one[2] & car_one_adj[2])), (((vector1[1] & sum_one[1]) | (vector1[1] & car_one_adj[1])) | (sum_one[1] & car_one_adj[1])), (((vector1[0] & sum_one[0]) | (vector1[0] & car_one_adj[0])) | (sum_one[0] & car_one_adj[0]))},
		car_two_adj = {car_two[88:0], 1'b1},
		car_two_wo = car_two_adj_reg0,
		lowest_bits_wi = lsb_prod_wo[29:0],
		lowest_bits_wo = lowest_bits_wi_reg1,
		lsb_prod_wi = wire_lsb_prod_result,
		lsb_prod_wo = lsb_prod_wi_reg0,
		mid_prod_wi = wire_mid_prod_result,
		mid_prod_wo = mid_prod_wi_reg0,
		msb_prod_out = wire_msb_prod_result,
		msb_prod_wi = msb_prod_out,
		msb_prod_wo = msb_prod_wi_reg0,
		neg_lsb = {{30{1'b1}}, (~ lsb_prod_wo[59]), (~ lsb_prod_wo[58]), (~ lsb_prod_wo[57]), (~ lsb_prod_wo[56]), (~ lsb_prod_wo[55]), (~ lsb_prod_wo[54]), (~ lsb_prod_wo[53]), (~ lsb_prod_wo[52]), (~ lsb_prod_wo[51]), (~ lsb_prod_wo[50]), (~ lsb_prod_wo[49]), (~ lsb_prod_wo[48]), (~ lsb_prod_wo[47]), (~ lsb_prod_wo[46]), (~ lsb_prod_wo[45]), (~ lsb_prod_wo[44]), (~ lsb_prod_wo[43]), (~ lsb_prod_wo[42]), (~ lsb_prod_wo[41]), (~ lsb_prod_wo[40]), (~ lsb_prod_wo[39]), (~ lsb_prod_wo[38]), (~ lsb_prod_wo[37]), (~ lsb_prod_wo[36]), (~ lsb_prod_wo[35]), (~ lsb_prod_wo[34]), (~ lsb_prod_wo[33]), (~ lsb_prod_wo[32]), (~ lsb_prod_wo[31]), (~ lsb_prod_wo[30]), (~ lsb_prod_wo[29]), (~ lsb_prod_wo[28]), (~ lsb_prod_wo[27]), (~ lsb_prod_wo[26]), (~ lsb_prod_wo[25]), (~ lsb_prod_wo[24]), (~ lsb_prod_wo[23]), (~ lsb_prod_wo[22]), (~ lsb_prod_wo[21]), (~ lsb_prod_wo[20]), (~ lsb_prod_wo[19]), (~ lsb_prod_wo[18]), (~ lsb_prod_wo[17]), (~ lsb_prod_wo[16]), (~ lsb_prod_wo[15]), (~ lsb_prod_wo[14]), (~ lsb_prod_wo[13]), (~ lsb_prod_wo[12]), (~ lsb_prod_wo[11]), (~ lsb_prod_wo[10]), (~ lsb_prod_wo[9]), (~ lsb_prod_wo[8]), (~ lsb_prod_wo[7]), (~ lsb_prod_wo[6]), (~ lsb_prod_wo[5]), (~ lsb_prod_wo[4]), (~ lsb_prod_wo[3]), (~ lsb_prod_wo[2]), (~ lsb_prod_wo[1]), (~ lsb_prod_wo[0])},
		neg_msb = {{30{1'b1}}, (~ msb_prod_wo[59]), (~ msb_prod_wo[58]), (~ msb_prod_wo[57]), (~ msb_prod_wo[56]), (~ msb_prod_wo[55]), (~ msb_prod_wo[54]), (~ msb_prod_wo[53]), (~ msb_prod_wo[52]), (~ msb_prod_wo[51]), (~ msb_prod_wo[50]), (~ msb_prod_wo[49]), (~ msb_prod_wo[48]), (~ msb_prod_wo[47]), (~ msb_prod_wo[46]), (~ msb_prod_wo[45]), (~ msb_prod_wo[44]), (~ msb_prod_wo[43]), (~ msb_prod_wo[42]), (~ msb_prod_wo[41]), (~ msb_prod_wo[40]), (~ msb_prod_wo[39]), (~ msb_prod_wo[38]), (~ msb_prod_wo[37]), (~ msb_prod_wo[36]), (~ msb_prod_wo[35]), (~ msb_prod_wo[34]), (~ msb_prod_wo[33]), (~ msb_prod_wo[32]), (~ msb_prod_wo[31]), (~ msb_prod_wo[30]), (~ msb_prod_wo[29]), (~ msb_prod_wo[28]), (~ msb_prod_wo[27]), (~ msb_prod_wo[26]), (~ msb_prod_wo[25]), (~ msb_prod_wo[24]), (~ msb_prod_wo[23]), (~ msb_prod_wo[22]), (~ msb_prod_wo[21]), (~ msb_prod_wo[20]), (~ msb_prod_wo[19]), (~ msb_prod_wo[18]), (~ msb_prod_wo[17]), (~ msb_prod_wo[16]), (~ msb_prod_wo[15]), (~ msb_prod_wo[14]), (~ msb_prod_wo[13]), (~ msb_prod_wo[12]), (~ msb_prod_wo[11]), (~ msb_prod_wo[10]), (~ msb_prod_wo[9]), (~ msb_prod_wo[8]), (~ msb_prod_wo[7]), (~ msb_prod_wo[6]), (~ msb_prod_wo[5]), (~ msb_prod_wo[4]), (~ msb_prod_wo[3]), (~ msb_prod_wo[2]), (~ msb_prod_wo[1]), (~ msb_prod_wo[0])},
		result = {wire_sum_result[89:0], lowest_bits_wo},
		sum_one = {((vector2[89] ^ neg_msb[89]) ^ neg_lsb[89]), ((vector2[88] ^ neg_msb[88]) ^ neg_lsb[88]), ((vector2[87] ^ neg_msb[87]) ^ neg_lsb[87]), ((vector2[86] ^ neg_msb[86]) ^ neg_lsb[86]), ((vector2[85] ^ neg_msb[85]) ^ neg_lsb[85]), ((vector2[84] ^ neg_msb[84]) ^ neg_lsb[84]), ((vector2[83] ^ neg_msb[83]) ^ neg_lsb[83]), ((vector2[82] ^ neg_msb[82]) ^ neg_lsb[82]), ((vector2[81] ^ neg_msb[81]) ^ neg_lsb[81]), ((vector2[80] ^ neg_msb[80]) ^ neg_lsb[80]), ((vector2[79] ^ neg_msb[79]) ^ neg_lsb[79]), ((vector2[78] ^ neg_msb[78]) ^ neg_lsb[78]), ((vector2[77] ^ neg_msb[77]) ^ neg_lsb[77]), ((vector2[76] ^ neg_msb[76]) ^ neg_lsb[76]), ((vector2[75] ^ neg_msb[75]) ^ neg_lsb[75]), ((vector2[74] ^ neg_msb[74]) ^ neg_lsb[74]), ((vector2[73] ^ neg_msb[73]) ^ neg_lsb[73]), ((vector2[72] ^ neg_msb[72]) ^ neg_lsb[72]), ((vector2[71] ^ neg_msb[71]) ^ neg_lsb[71]), ((vector2[70] ^ neg_msb[70]) ^ neg_lsb[70]), ((vector2[69] ^ neg_msb[69]) ^ neg_lsb[69]), ((vector2[68] ^ neg_msb[68]) ^ neg_lsb[68]), ((vector2[67] ^ neg_msb[67]) ^ neg_lsb[67]), ((vector2[66] ^ neg_msb[66]) ^ neg_lsb[66]), ((vector2[65] ^ neg_msb[65]) ^ neg_lsb[65]), ((vector2[64] ^ neg_msb[64]) ^ neg_lsb[64]), ((vector2[63] ^ neg_msb[63]) ^ neg_lsb[63]), ((vector2[62] ^ neg_msb[62]) ^ neg_lsb[62]), ((vector2[61] ^ neg_msb[61]) ^ neg_lsb[61]), ((vector2[60] ^ neg_msb[60]) ^ neg_lsb[60]), ((vector2[59] ^ neg_msb[59]) ^ neg_lsb[59]), ((vector2[58] ^ neg_msb[58]) ^ neg_lsb[58]), ((vector2[57] ^ neg_msb[57]) ^ neg_lsb[57]), ((vector2[56] ^ neg_msb[56]) ^ neg_lsb[56]), ((vector2[55] ^ neg_msb[55]) ^ neg_lsb[55]), ((vector2[54] ^ neg_msb[54]) ^ neg_lsb[54]), ((vector2[53] ^ neg_msb[53]) ^ neg_lsb[53]), ((vector2[52] ^ neg_msb[52]) ^ neg_lsb[52]), ((vector2[51] ^ neg_msb[51]) ^ neg_lsb[51]), ((vector2[50] ^ neg_msb[50]) ^ neg_lsb[50]), ((vector2[49] ^ neg_msb[49]) ^ neg_lsb[49]), ((vector2[48] ^ neg_msb[48]) ^ neg_lsb[48]), ((vector2[47] ^ neg_msb[47]) ^ neg_lsb[47]), ((vector2[46] ^ neg_msb[46]) ^ neg_lsb[46]), ((vector2[45] ^ neg_msb[45]) ^ neg_lsb[45]), ((vector2[44]
 ^ neg_msb[44]) ^ neg_lsb[44]), ((vector2[43] ^ neg_msb[43]) ^ neg_lsb[43]), ((vector2[42] ^ neg_msb[42]) ^ neg_lsb[42]), ((vector2[41] ^ neg_msb[41]) ^ neg_lsb[41]), ((vector2[40] ^ neg_msb[40]) ^ neg_lsb[40]), ((vector2[39] ^ neg_msb[39]) ^ neg_lsb[39]), ((vector2[38] ^ neg_msb[38]) ^ neg_lsb[38]), ((vector2[37] ^ neg_msb[37]) ^ neg_lsb[37]), ((vector2[36] ^ neg_msb[36]) ^ neg_lsb[36]), ((vector2[35] ^ neg_msb[35]) ^ neg_lsb[35]), ((vector2[34] ^ neg_msb[34]) ^ neg_lsb[34]), ((vector2[33] ^ neg_msb[33]) ^ neg_lsb[33]), ((vector2[32] ^ neg_msb[32]) ^ neg_lsb[32]), ((vector2[31] ^ neg_msb[31]) ^ neg_lsb[31]), ((vector2[30] ^ neg_msb[30]) ^ neg_lsb[30]), ((vector2[29] ^ neg_msb[29]) ^ neg_lsb[29]), ((vector2[28] ^ neg_msb[28]) ^ neg_lsb[28]), ((vector2[27] ^ neg_msb[27]) ^ neg_lsb[27]), ((vector2[26] ^ neg_msb[26]) ^ neg_lsb[26]), ((vector2[25] ^ neg_msb[25]) ^ neg_lsb[25]), ((vector2[24] ^ neg_msb[24]) ^ neg_lsb[24]), ((vector2[23] ^ neg_msb[23]) ^ neg_lsb[23]), ((vector2[22] ^ neg_msb[22]) ^ neg_lsb[22]), ((vector2[21] ^ neg_msb[21]) ^ neg_lsb[21]), ((vector2[20] ^ neg_msb[20]) ^ neg_lsb[20]), ((vector2[19] ^ neg_msb[19]) ^ neg_lsb[19]), ((vector2[18] ^ neg_msb[18]) ^ neg_lsb[18]), ((vector2[17] ^ neg_msb[17]) ^ neg_lsb[17]), ((vector2[16] ^ neg_msb[16]) ^ neg_lsb[16]), ((vector2[15] ^ neg_msb[15]) ^ neg_lsb[15]), ((vector2[14] ^ neg_msb[14]) ^ neg_lsb[14]), ((vector2[13] ^ neg_msb[13]) ^ neg_lsb[13]), ((vector2[12] ^ neg_msb[12]) ^ neg_lsb[12]), ((vector2[11] ^ neg_msb[11]) ^ neg_lsb[11]), ((vector2[10] ^ neg_msb[10]) ^ neg_lsb[10]), ((vector2[9] ^ neg_msb[9]) ^ neg_lsb[9]), ((vector2[8] ^ neg_msb[8]) ^ neg_lsb[8]), ((vector2[7] ^ neg_msb[7]) ^ neg_lsb[7]), ((vector2[6] ^ neg_msb[6]) ^ neg_lsb[6]), ((vector2[5] ^ neg_msb[5]) ^ neg_lsb[5]), ((vector2[4] ^ neg_msb[4]) ^ neg_lsb[4]), ((vector2[3] ^ neg_msb[3]) ^ neg_lsb[3]), ((vector2[2] ^ neg_msb[2]) ^ neg_lsb[2]), ((vector2[1] ^ neg_msb[1]) ^ neg_lsb[1]), ((vector2[0] ^ neg_msb[0]) ^ neg_lsb[0])},
		sum_two = {((vector1[89] ^ sum_one[89]) ^ car_one_adj[89]), ((vector1[88] ^ sum_one[88]) ^ car_one_adj[88]), ((vector1[87] ^ sum_one[87]) ^ car_one_adj[87]), ((vector1[86] ^ sum_one[86]) ^ car_one_adj[86]), ((vector1[85] ^ sum_one[85]) ^ car_one_adj[85]), ((vector1[84] ^ sum_one[84]) ^ car_one_adj[84]), ((vector1[83] ^ sum_one[83]) ^ car_one_adj[83]), ((vector1[82] ^ sum_one[82]) ^ car_one_adj[82]), ((vector1[81] ^ sum_one[81]) ^ car_one_adj[81]), ((vector1[80] ^ sum_one[80]) ^ car_one_adj[80]), ((vector1[79] ^ sum_one[79]) ^ car_one_adj[79]), ((vector1[78] ^ sum_one[78]) ^ car_one_adj[78]), ((vector1[77] ^ sum_one[77]) ^ car_one_adj[77]), ((vector1[76] ^ sum_one[76]) ^ car_one_adj[76]), ((vector1[75] ^ sum_one[75]) ^ car_one_adj[75]), ((vector1[74] ^ sum_one[74]) ^ car_one_adj[74]), ((vector1[73] ^ sum_one[73]) ^ car_one_adj[73]), ((vector1[72] ^ sum_one[72]) ^ car_one_adj[72]), ((vector1[71] ^ sum_one[71]) ^ car_one_adj[71]), ((vector1[70] ^ sum_one[70]) ^ car_one_adj[70]), ((vector1[69] ^ sum_one[69]) ^ car_one_adj[69]), ((vector1[68] ^ sum_one[68]) ^ car_one_adj[68]), ((vector1[67] ^ sum_one[67]) ^ car_one_adj[67]), ((vector1[66] ^ sum_one[66]) ^ car_one_adj[66]), ((vector1[65] ^ sum_one[65]) ^ car_one_adj[65]), ((vector1[64] ^ sum_one[64]) ^ car_one_adj[64]), ((vector1[63] ^ sum_one[63]) ^ car_one_adj[63]), ((vector1[62] ^ sum_one[62]) ^ car_one_adj[62]), ((vector1[61] ^ sum_one[61]) ^ car_one_adj[61]), ((vector1[60] ^ sum_one[60]) ^ car_one_adj[60]), ((vector1[59] ^ sum_one[59]) ^ car_one_adj[59]), ((vector1[58] ^ sum_one[58]) ^ car_one_adj[58]), ((vector1[57] ^ sum_one[57]) ^ car_one_adj[57]), ((vector1[56] ^ sum_one[56]) ^ car_one_adj[56]), ((vector1[55] ^ sum_one[55]) ^ car_one_adj[55]), ((vector1[54] ^ sum_one[54]) ^ car_one_adj[54]), ((vector1[53] ^ sum_one[53]) ^ car_one_adj[53]), ((vector1[52] ^ sum_one[52]) ^ car_one_adj[52]), ((vector1[51] ^ sum_one[51]) ^ car_one_adj[51]), ((vector1[50] ^ sum_one[50]) ^ car_one_adj[50]), ((vector1[49] ^ sum_one[49]) ^ car_one_adj[49]), ((vector1[48] ^ sum_one[48]
) ^ car_one_adj[48]), ((vector1[47] ^ sum_one[47]) ^ car_one_adj[47]), ((vector1[46] ^ sum_one[46]) ^ car_one_adj[46]), ((vector1[45] ^ sum_one[45]) ^ car_one_adj[45]), ((vector1[44] ^ sum_one[44]) ^ car_one_adj[44]), ((vector1[43] ^ sum_one[43]) ^ car_one_adj[43]), ((vector1[42] ^ sum_one[42]) ^ car_one_adj[42]), ((vector1[41] ^ sum_one[41]) ^ car_one_adj[41]), ((vector1[40] ^ sum_one[40]) ^ car_one_adj[40]), ((vector1[39] ^ sum_one[39]) ^ car_one_adj[39]), ((vector1[38] ^ sum_one[38]) ^ car_one_adj[38]), ((vector1[37] ^ sum_one[37]) ^ car_one_adj[37]), ((vector1[36] ^ sum_one[36]) ^ car_one_adj[36]), ((vector1[35] ^ sum_one[35]) ^ car_one_adj[35]), ((vector1[34] ^ sum_one[34]) ^ car_one_adj[34]), ((vector1[33] ^ sum_one[33]) ^ car_one_adj[33]), ((vector1[32] ^ sum_one[32]) ^ car_one_adj[32]), ((vector1[31] ^ sum_one[31]) ^ car_one_adj[31]), ((vector1[30] ^ sum_one[30]) ^ car_one_adj[30]), ((vector1[29] ^ sum_one[29]) ^ car_one_adj[29]), ((vector1[28] ^ sum_one[28]) ^ car_one_adj[28]), ((vector1[27] ^ sum_one[27]) ^ car_one_adj[27]), ((vector1[26] ^ sum_one[26]) ^ car_one_adj[26]), ((vector1[25] ^ sum_one[25]) ^ car_one_adj[25]), ((vector1[24] ^ sum_one[24]) ^ car_one_adj[24]), ((vector1[23] ^ sum_one[23]) ^ car_one_adj[23]), ((vector1[22] ^ sum_one[22]) ^ car_one_adj[22]), ((vector1[21] ^ sum_one[21]) ^ car_one_adj[21]), ((vector1[20] ^ sum_one[20]) ^ car_one_adj[20]), ((vector1[19] ^ sum_one[19]) ^ car_one_adj[19]), ((vector1[18] ^ sum_one[18]) ^ car_one_adj[18]), ((vector1[17] ^ sum_one[17]) ^ car_one_adj[17]), ((vector1[16] ^ sum_one[16]) ^ car_one_adj[16]), ((vector1[15] ^ sum_one[15]) ^ car_one_adj[15]), ((vector1[14] ^ sum_one[14]) ^ car_one_adj[14]), ((vector1[13] ^ sum_one[13]) ^ car_one_adj[13]), ((vector1[12] ^ sum_one[12]) ^ car_one_adj[12]), ((vector1[11] ^ sum_one[11]) ^ car_one_adj[11]), ((vector1[10] ^ sum_one[10]) ^ car_one_adj[10]), ((vector1[9] ^ sum_one[9]) ^ car_one_adj[9]), ((vector1[8] ^ sum_one[8]) ^ car_one_adj[8]), ((vector1[7] ^ sum_one[7]) ^ car_one_adj[7]), ((vector1[6] ^ sum_one[6])
 ^ car_one_adj[6]), ((vector1[5] ^ sum_one[5]) ^ car_one_adj[5]), ((vector1[4] ^ sum_one[4]) ^ car_one_adj[4]), ((vector1[3] ^ sum_one[3]) ^ car_one_adj[3]), ((vector1[2] ^ sum_one[2]) ^ car_one_adj[2]), ((vector1[1] ^ sum_one[1]) ^ car_one_adj[1]), ((vector1[0] ^ sum_one[0]) ^ car_one_adj[0])},
		sum_two_wo = sum_two_reg0,
		vector1 = {msb_prod_wo, lsb_prod_wo[59:30]},
		vector2 = {{28{1'b0}}, mid_prod_wo},
		wire_a = dataa,
		wire_b = datab;
endmodule //ALTFP_EXa_altmult_opt


//altmult_opt DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=5 LPM_WIDTHA=61 LPM_WIDTHB=61 LPM_WIDTHP=122 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_altmult_opt 2016:04:27:18:05:34:SJ cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_compare 2016:04:27:18:05:34:SJ cbx_lpm_mult 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_padd 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ cbx_util_mgl 2016:04:27:18:05:34:SJ  VERSION_END


//altmult_opt_csa CARRY_SELECT="NO" LPM_DIRECTION="ADD" LPM_PIPELINE=2 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=92 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_altmult_opt 2016:04:27:18:05:34:SJ cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_compare 2016:04:27:18:05:34:SJ cbx_lpm_mult 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_padd 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ cbx_util_mgl 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_PIPELINE=2 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=92 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END

//synthesis_resources = lut 194 reg 185 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  ALTFP_EXa_add_sub
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [91:0]  dataa;
	input   [91:0]  datab;
	output   [91:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [91:0]  dataa;
	tri0   [91:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[91:0]	add_sub_cell_ffa;
	reg	[0:0]	inter_regrs_cin_ffa0;
	reg	[91:0]	pad_cell_ffa;
	wire  [0:0]   wire_add_sub_cella_0cout;
	wire  [0:0]   wire_add_sub_cella_1cout;
	wire  [0:0]   wire_add_sub_cella_2cout;
	wire  [0:0]   wire_add_sub_cella_3cout;
	wire  [0:0]   wire_add_sub_cella_4cout;
	wire  [0:0]   wire_add_sub_cella_5cout;
	wire  [0:0]   wire_add_sub_cella_6cout;
	wire  [0:0]   wire_add_sub_cella_7cout;
	wire  [0:0]   wire_add_sub_cella_8cout;
	wire  [0:0]   wire_add_sub_cella_9cout;
	wire  [0:0]   wire_add_sub_cella_10cout;
	wire  [0:0]   wire_add_sub_cella_11cout;
	wire  [0:0]   wire_add_sub_cella_12cout;
	wire  [0:0]   wire_add_sub_cella_13cout;
	wire  [0:0]   wire_add_sub_cella_14cout;
	wire  [0:0]   wire_add_sub_cella_15cout;
	wire  [0:0]   wire_add_sub_cella_16cout;
	wire  [0:0]   wire_add_sub_cella_17cout;
	wire  [0:0]   wire_add_sub_cella_18cout;
	wire  [0:0]   wire_add_sub_cella_19cout;
	wire  [0:0]   wire_add_sub_cella_20cout;
	wire  [0:0]   wire_add_sub_cella_21cout;
	wire  [0:0]   wire_add_sub_cella_22cout;
	wire  [0:0]   wire_add_sub_cella_23cout;
	wire  [0:0]   wire_add_sub_cella_24cout;
	wire  [0:0]   wire_add_sub_cella_25cout;
	wire  [0:0]   wire_add_sub_cella_26cout;
	wire  [0:0]   wire_add_sub_cella_27cout;
	wire  [0:0]   wire_add_sub_cella_28cout;
	wire  [0:0]   wire_add_sub_cella_29cout;
	wire  [0:0]   wire_add_sub_cella_30cout;
	wire  [0:0]   wire_add_sub_cella_31cout;
	wire  [0:0]   wire_add_sub_cella_32cout;
	wire  [0:0]   wire_add_sub_cella_33cout;
	wire  [0:0]   wire_add_sub_cella_34cout;
	wire  [0:0]   wire_add_sub_cella_35cout;
	wire  [0:0]   wire_add_sub_cella_36cout;
	wire  [0:0]   wire_add_sub_cella_37cout;
	wire  [0:0]   wire_add_sub_cella_38cout;
	wire  [0:0]   wire_add_sub_cella_39cout;
	wire  [0:0]   wire_add_sub_cella_40cout;
	wire  [0:0]   wire_add_sub_cella_41cout;
	wire  [0:0]   wire_add_sub_cella_42cout;
	wire  [0:0]   wire_add_sub_cella_43cout;
	wire  [0:0]   wire_add_sub_cella_44cout;
	wire  [0:0]   wire_add_sub_cella_45cout;
	wire  [0:0]   wire_add_sub_cella_46cout;
	wire  [0:0]   wire_add_sub_cella_47cout;
	wire  [0:0]   wire_add_sub_cella_48cout;
	wire  [0:0]   wire_add_sub_cella_49cout;
	wire  [0:0]   wire_add_sub_cella_50cout;
	wire  [0:0]   wire_add_sub_cella_51cout;
	wire  [0:0]   wire_add_sub_cella_52cout;
	wire  [0:0]   wire_add_sub_cella_53cout;
	wire  [0:0]   wire_add_sub_cella_54cout;
	wire  [0:0]   wire_add_sub_cella_55cout;
	wire  [0:0]   wire_add_sub_cella_56cout;
	wire  [0:0]   wire_add_sub_cella_57cout;
	wire  [0:0]   wire_add_sub_cella_58cout;
	wire  [0:0]   wire_add_sub_cella_59cout;
	wire  [0:0]   wire_add_sub_cella_60cout;
	wire  [0:0]   wire_add_sub_cella_61cout;
	wire  [0:0]   wire_add_sub_cella_62cout;
	wire  [0:0]   wire_add_sub_cella_63cout;
	wire  [0:0]   wire_add_sub_cella_64cout;
	wire  [0:0]   wire_add_sub_cella_65cout;
	wire  [0:0]   wire_add_sub_cella_66cout;
	wire  [0:0]   wire_add_sub_cella_67cout;
	wire  [0:0]   wire_add_sub_cella_68cout;
	wire  [0:0]   wire_add_sub_cella_69cout;
	wire  [0:0]   wire_add_sub_cella_70cout;
	wire  [0:0]   wire_add_sub_cella_71cout;
	wire  [0:0]   wire_add_sub_cella_72cout;
	wire  [0:0]   wire_add_sub_cella_73cout;
	wire  [0:0]   wire_add_sub_cella_74cout;
	wire  [0:0]   wire_add_sub_cella_75cout;
	wire  [0:0]   wire_add_sub_cella_76cout;
	wire  [0:0]   wire_add_sub_cella_77cout;
	wire  [0:0]   wire_add_sub_cella_78cout;
	wire  [0:0]   wire_add_sub_cella_79cout;
	wire  [0:0]   wire_add_sub_cella_80cout;
	wire  [0:0]   wire_add_sub_cella_81cout;
	wire  [0:0]   wire_add_sub_cella_82cout;
	wire  [0:0]   wire_add_sub_cella_83cout;
	wire  [0:0]   wire_add_sub_cella_84cout;
	wire  [0:0]   wire_add_sub_cella_85cout;
	wire  [0:0]   wire_add_sub_cella_86cout;
	wire  [0:0]   wire_add_sub_cella_87cout;
	wire  [0:0]   wire_add_sub_cella_88cout;
	wire  [0:0]   wire_add_sub_cella_89cout;
	wire  [0:0]   wire_add_sub_cella_90cout;
	wire  [91:0]   wire_add_sub_cella_datad;
	wire  [91:0]   wire_add_sub_cella_dataf;
	wire  [91:0]   wire_add_sub_cella_sumout;
	wire  [0:0]   wire_inter_regrs_cina_sumout;
	wire  [0:0]   wire_inter_regrs_couta_0cout;
	wire  wire_le_comb10_sumout;
	wire  wire_le_comb11_cout;
	wire  wire_le_comb12_sumout;
	wire  wire_le_comb13_cout;
	wire  wire_le_comb6_sumout;
	wire  wire_le_comb7_cout;
	wire  wire_le_comb8_sumout;
	wire  wire_le_comb9_cout;
	wire  [0:0]   wire_pad_cella_0cout;
	wire  [0:0]   wire_pad_cella_1cout;
	wire  [0:0]   wire_pad_cella_2cout;
	wire  [0:0]   wire_pad_cella_3cout;
	wire  [0:0]   wire_pad_cella_4cout;
	wire  [0:0]   wire_pad_cella_5cout;
	wire  [0:0]   wire_pad_cella_6cout;
	wire  [0:0]   wire_pad_cella_7cout;
	wire  [0:0]   wire_pad_cella_8cout;
	wire  [0:0]   wire_pad_cella_9cout;
	wire  [0:0]   wire_pad_cella_10cout;
	wire  [0:0]   wire_pad_cella_11cout;
	wire  [0:0]   wire_pad_cella_12cout;
	wire  [0:0]   wire_pad_cella_13cout;
	wire  [0:0]   wire_pad_cella_14cout;
	wire  [0:0]   wire_pad_cella_15cout;
	wire  [0:0]   wire_pad_cella_16cout;
	wire  [0:0]   wire_pad_cella_17cout;
	wire  [0:0]   wire_pad_cella_18cout;
	wire  [0:0]   wire_pad_cella_19cout;
	wire  [0:0]   wire_pad_cella_20cout;
	wire  [0:0]   wire_pad_cella_21cout;
	wire  [0:0]   wire_pad_cella_22cout;
	wire  [0:0]   wire_pad_cella_23cout;
	wire  [0:0]   wire_pad_cella_24cout;
	wire  [0:0]   wire_pad_cella_25cout;
	wire  [0:0]   wire_pad_cella_26cout;
	wire  [0:0]   wire_pad_cella_27cout;
	wire  [0:0]   wire_pad_cella_28cout;
	wire  [0:0]   wire_pad_cella_29cout;
	wire  [0:0]   wire_pad_cella_30cout;
	wire  [0:0]   wire_pad_cella_31cout;
	wire  [0:0]   wire_pad_cella_32cout;
	wire  [0:0]   wire_pad_cella_33cout;
	wire  [0:0]   wire_pad_cella_34cout;
	wire  [0:0]   wire_pad_cella_35cout;
	wire  [0:0]   wire_pad_cella_36cout;
	wire  [0:0]   wire_pad_cella_37cout;
	wire  [0:0]   wire_pad_cella_38cout;
	wire  [0:0]   wire_pad_cella_39cout;
	wire  [0:0]   wire_pad_cella_40cout;
	wire  [0:0]   wire_pad_cella_41cout;
	wire  [0:0]   wire_pad_cella_42cout;
	wire  [0:0]   wire_pad_cella_43cout;
	wire  [0:0]   wire_pad_cella_44cout;
	wire  [0:0]   wire_pad_cella_46cout;
	wire  [0:0]   wire_pad_cella_47cout;
	wire  [0:0]   wire_pad_cella_48cout;
	wire  [0:0]   wire_pad_cella_49cout;
	wire  [0:0]   wire_pad_cella_50cout;
	wire  [0:0]   wire_pad_cella_51cout;
	wire  [0:0]   wire_pad_cella_52cout;
	wire  [0:0]   wire_pad_cella_53cout;
	wire  [0:0]   wire_pad_cella_54cout;
	wire  [0:0]   wire_pad_cella_55cout;
	wire  [0:0]   wire_pad_cella_56cout;
	wire  [0:0]   wire_pad_cella_57cout;
	wire  [0:0]   wire_pad_cella_58cout;
	wire  [0:0]   wire_pad_cella_59cout;
	wire  [0:0]   wire_pad_cella_60cout;
	wire  [0:0]   wire_pad_cella_61cout;
	wire  [0:0]   wire_pad_cella_62cout;
	wire  [0:0]   wire_pad_cella_63cout;
	wire  [0:0]   wire_pad_cella_64cout;
	wire  [0:0]   wire_pad_cella_65cout;
	wire  [0:0]   wire_pad_cella_66cout;
	wire  [0:0]   wire_pad_cella_67cout;
	wire  [0:0]   wire_pad_cella_68cout;
	wire  [0:0]   wire_pad_cella_69cout;
	wire  [0:0]   wire_pad_cella_70cout;
	wire  [0:0]   wire_pad_cella_71cout;
	wire  [0:0]   wire_pad_cella_72cout;
	wire  [0:0]   wire_pad_cella_73cout;
	wire  [0:0]   wire_pad_cella_74cout;
	wire  [0:0]   wire_pad_cella_75cout;
	wire  [0:0]   wire_pad_cella_76cout;
	wire  [0:0]   wire_pad_cella_77cout;
	wire  [0:0]   wire_pad_cella_78cout;
	wire  [0:0]   wire_pad_cella_79cout;
	wire  [0:0]   wire_pad_cella_80cout;
	wire  [0:0]   wire_pad_cella_81cout;
	wire  [0:0]   wire_pad_cella_82cout;
	wire  [0:0]   wire_pad_cella_83cout;
	wire  [0:0]   wire_pad_cella_84cout;
	wire  [0:0]   wire_pad_cella_85cout;
	wire  [0:0]   wire_pad_cella_86cout;
	wire  [0:0]   wire_pad_cella_87cout;
	wire  [0:0]   wire_pad_cella_88cout;
	wire  [0:0]   wire_pad_cella_89cout;
	wire  [0:0]   wire_pad_cella_90cout;
	wire  [91:0]   wire_pad_cella_datad;
	wire  [91:0]   wire_pad_cella_sumout;

	// synopsys translate_off
	initial
		add_sub_cell_ffa = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) add_sub_cell_ffa <= 92'b0;
		else if  (clken == 1'b1)   add_sub_cell_ffa <= wire_add_sub_cella_sumout;
	// synopsys translate_off
	initial
		inter_regrs_cin_ffa0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) inter_regrs_cin_ffa0 <= 1'b0;
		else if  (clken == 1'b1)   inter_regrs_cin_ffa0 <= wire_inter_regrs_cina_sumout[0:0];
	// synopsys translate_off
	initial
		pad_cell_ffa = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) pad_cell_ffa <= 92'b0;
		else if  (clken == 1'b1)   pad_cell_ffa <= wire_pad_cella_sumout;
	cyclonev_lcell_comb   add_sub_cella_0
	( 
	.cin(1'b0),
	.combout(),
	.cout(wire_add_sub_cella_0cout[0:0]),
	.datad(wire_add_sub_cella_datad[0:0]),
	.dataf(wire_add_sub_cella_dataf[0:0]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_0.extended_lut = "off",
		add_sub_cella_0.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_0.shared_arith = "off",
		add_sub_cella_0.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_1
	( 
	.cin(wire_add_sub_cella_0cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_1cout[0:0]),
	.datad(wire_add_sub_cella_datad[1:1]),
	.dataf(wire_add_sub_cella_dataf[1:1]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[1:1]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_1.extended_lut = "off",
		add_sub_cella_1.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_1.shared_arith = "off",
		add_sub_cella_1.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_2
	( 
	.cin(wire_add_sub_cella_1cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_2cout[0:0]),
	.datad(wire_add_sub_cella_datad[2:2]),
	.dataf(wire_add_sub_cella_dataf[2:2]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[2:2]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_2.extended_lut = "off",
		add_sub_cella_2.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_2.shared_arith = "off",
		add_sub_cella_2.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_3
	( 
	.cin(wire_add_sub_cella_2cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_3cout[0:0]),
	.datad(wire_add_sub_cella_datad[3:3]),
	.dataf(wire_add_sub_cella_dataf[3:3]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[3:3]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_3.extended_lut = "off",
		add_sub_cella_3.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_3.shared_arith = "off",
		add_sub_cella_3.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_4
	( 
	.cin(wire_add_sub_cella_3cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_4cout[0:0]),
	.datad(wire_add_sub_cella_datad[4:4]),
	.dataf(wire_add_sub_cella_dataf[4:4]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[4:4]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_4.extended_lut = "off",
		add_sub_cella_4.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_4.shared_arith = "off",
		add_sub_cella_4.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_5
	( 
	.cin(wire_add_sub_cella_4cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_5cout[0:0]),
	.datad(wire_add_sub_cella_datad[5:5]),
	.dataf(wire_add_sub_cella_dataf[5:5]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[5:5]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_5.extended_lut = "off",
		add_sub_cella_5.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_5.shared_arith = "off",
		add_sub_cella_5.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_6
	( 
	.cin(wire_add_sub_cella_5cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_6cout[0:0]),
	.datad(wire_add_sub_cella_datad[6:6]),
	.dataf(wire_add_sub_cella_dataf[6:6]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[6:6]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_6.extended_lut = "off",
		add_sub_cella_6.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_6.shared_arith = "off",
		add_sub_cella_6.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_7
	( 
	.cin(wire_add_sub_cella_6cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_7cout[0:0]),
	.datad(wire_add_sub_cella_datad[7:7]),
	.dataf(wire_add_sub_cella_dataf[7:7]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[7:7]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_7.extended_lut = "off",
		add_sub_cella_7.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_7.shared_arith = "off",
		add_sub_cella_7.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_8
	( 
	.cin(wire_add_sub_cella_7cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_8cout[0:0]),
	.datad(wire_add_sub_cella_datad[8:8]),
	.dataf(wire_add_sub_cella_dataf[8:8]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[8:8]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_8.extended_lut = "off",
		add_sub_cella_8.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_8.shared_arith = "off",
		add_sub_cella_8.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_9
	( 
	.cin(wire_add_sub_cella_8cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_9cout[0:0]),
	.datad(wire_add_sub_cella_datad[9:9]),
	.dataf(wire_add_sub_cella_dataf[9:9]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[9:9]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_9.extended_lut = "off",
		add_sub_cella_9.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_9.shared_arith = "off",
		add_sub_cella_9.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_10
	( 
	.cin(wire_add_sub_cella_9cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_10cout[0:0]),
	.datad(wire_add_sub_cella_datad[10:10]),
	.dataf(wire_add_sub_cella_dataf[10:10]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[10:10]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_10.extended_lut = "off",
		add_sub_cella_10.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_10.shared_arith = "off",
		add_sub_cella_10.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_11
	( 
	.cin(wire_add_sub_cella_10cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_11cout[0:0]),
	.datad(wire_add_sub_cella_datad[11:11]),
	.dataf(wire_add_sub_cella_dataf[11:11]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[11:11]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_11.extended_lut = "off",
		add_sub_cella_11.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_11.shared_arith = "off",
		add_sub_cella_11.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_12
	( 
	.cin(wire_add_sub_cella_11cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_12cout[0:0]),
	.datad(wire_add_sub_cella_datad[12:12]),
	.dataf(wire_add_sub_cella_dataf[12:12]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[12:12]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_12.extended_lut = "off",
		add_sub_cella_12.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_12.shared_arith = "off",
		add_sub_cella_12.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_13
	( 
	.cin(wire_add_sub_cella_12cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_13cout[0:0]),
	.datad(wire_add_sub_cella_datad[13:13]),
	.dataf(wire_add_sub_cella_dataf[13:13]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[13:13]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_13.extended_lut = "off",
		add_sub_cella_13.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_13.shared_arith = "off",
		add_sub_cella_13.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_14
	( 
	.cin(wire_add_sub_cella_13cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_14cout[0:0]),
	.datad(wire_add_sub_cella_datad[14:14]),
	.dataf(wire_add_sub_cella_dataf[14:14]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[14:14]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_14.extended_lut = "off",
		add_sub_cella_14.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_14.shared_arith = "off",
		add_sub_cella_14.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_15
	( 
	.cin(wire_add_sub_cella_14cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_15cout[0:0]),
	.datad(wire_add_sub_cella_datad[15:15]),
	.dataf(wire_add_sub_cella_dataf[15:15]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[15:15]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_15.extended_lut = "off",
		add_sub_cella_15.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_15.shared_arith = "off",
		add_sub_cella_15.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_16
	( 
	.cin(wire_add_sub_cella_15cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_16cout[0:0]),
	.datad(wire_add_sub_cella_datad[16:16]),
	.dataf(wire_add_sub_cella_dataf[16:16]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[16:16]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_16.extended_lut = "off",
		add_sub_cella_16.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_16.shared_arith = "off",
		add_sub_cella_16.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_17
	( 
	.cin(wire_add_sub_cella_16cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_17cout[0:0]),
	.datad(wire_add_sub_cella_datad[17:17]),
	.dataf(wire_add_sub_cella_dataf[17:17]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[17:17]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_17.extended_lut = "off",
		add_sub_cella_17.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_17.shared_arith = "off",
		add_sub_cella_17.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_18
	( 
	.cin(wire_add_sub_cella_17cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_18cout[0:0]),
	.datad(wire_add_sub_cella_datad[18:18]),
	.dataf(wire_add_sub_cella_dataf[18:18]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[18:18]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_18.extended_lut = "off",
		add_sub_cella_18.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_18.shared_arith = "off",
		add_sub_cella_18.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_19
	( 
	.cin(wire_add_sub_cella_18cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_19cout[0:0]),
	.datad(wire_add_sub_cella_datad[19:19]),
	.dataf(wire_add_sub_cella_dataf[19:19]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[19:19]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_19.extended_lut = "off",
		add_sub_cella_19.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_19.shared_arith = "off",
		add_sub_cella_19.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_20
	( 
	.cin(wire_add_sub_cella_19cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_20cout[0:0]),
	.datad(wire_add_sub_cella_datad[20:20]),
	.dataf(wire_add_sub_cella_dataf[20:20]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[20:20]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_20.extended_lut = "off",
		add_sub_cella_20.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_20.shared_arith = "off",
		add_sub_cella_20.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_21
	( 
	.cin(wire_add_sub_cella_20cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_21cout[0:0]),
	.datad(wire_add_sub_cella_datad[21:21]),
	.dataf(wire_add_sub_cella_dataf[21:21]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[21:21]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_21.extended_lut = "off",
		add_sub_cella_21.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_21.shared_arith = "off",
		add_sub_cella_21.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_22
	( 
	.cin(wire_add_sub_cella_21cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_22cout[0:0]),
	.datad(wire_add_sub_cella_datad[22:22]),
	.dataf(wire_add_sub_cella_dataf[22:22]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[22:22]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_22.extended_lut = "off",
		add_sub_cella_22.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_22.shared_arith = "off",
		add_sub_cella_22.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_23
	( 
	.cin(wire_add_sub_cella_22cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_23cout[0:0]),
	.datad(wire_add_sub_cella_datad[23:23]),
	.dataf(wire_add_sub_cella_dataf[23:23]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[23:23]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_23.extended_lut = "off",
		add_sub_cella_23.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_23.shared_arith = "off",
		add_sub_cella_23.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_24
	( 
	.cin(wire_add_sub_cella_23cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_24cout[0:0]),
	.datad(wire_add_sub_cella_datad[24:24]),
	.dataf(wire_add_sub_cella_dataf[24:24]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[24:24]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_24.extended_lut = "off",
		add_sub_cella_24.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_24.shared_arith = "off",
		add_sub_cella_24.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_25
	( 
	.cin(wire_add_sub_cella_24cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_25cout[0:0]),
	.datad(wire_add_sub_cella_datad[25:25]),
	.dataf(wire_add_sub_cella_dataf[25:25]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[25:25]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_25.extended_lut = "off",
		add_sub_cella_25.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_25.shared_arith = "off",
		add_sub_cella_25.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_26
	( 
	.cin(wire_add_sub_cella_25cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_26cout[0:0]),
	.datad(wire_add_sub_cella_datad[26:26]),
	.dataf(wire_add_sub_cella_dataf[26:26]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[26:26]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_26.extended_lut = "off",
		add_sub_cella_26.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_26.shared_arith = "off",
		add_sub_cella_26.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_27
	( 
	.cin(wire_add_sub_cella_26cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_27cout[0:0]),
	.datad(wire_add_sub_cella_datad[27:27]),
	.dataf(wire_add_sub_cella_dataf[27:27]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[27:27]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_27.extended_lut = "off",
		add_sub_cella_27.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_27.shared_arith = "off",
		add_sub_cella_27.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_28
	( 
	.cin(wire_add_sub_cella_27cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_28cout[0:0]),
	.datad(wire_add_sub_cella_datad[28:28]),
	.dataf(wire_add_sub_cella_dataf[28:28]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[28:28]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_28.extended_lut = "off",
		add_sub_cella_28.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_28.shared_arith = "off",
		add_sub_cella_28.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_29
	( 
	.cin(wire_add_sub_cella_28cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_29cout[0:0]),
	.datad(wire_add_sub_cella_datad[29:29]),
	.dataf(wire_add_sub_cella_dataf[29:29]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[29:29]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_29.extended_lut = "off",
		add_sub_cella_29.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_29.shared_arith = "off",
		add_sub_cella_29.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_30
	( 
	.cin(wire_add_sub_cella_29cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_30cout[0:0]),
	.datad(wire_add_sub_cella_datad[30:30]),
	.dataf(wire_add_sub_cella_dataf[30:30]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[30:30]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_30.extended_lut = "off",
		add_sub_cella_30.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_30.shared_arith = "off",
		add_sub_cella_30.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_31
	( 
	.cin(wire_add_sub_cella_30cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_31cout[0:0]),
	.datad(wire_add_sub_cella_datad[31:31]),
	.dataf(wire_add_sub_cella_dataf[31:31]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[31:31]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_31.extended_lut = "off",
		add_sub_cella_31.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_31.shared_arith = "off",
		add_sub_cella_31.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_32
	( 
	.cin(wire_le_comb7_cout),
	.combout(),
	.cout(wire_add_sub_cella_32cout[0:0]),
	.datad(wire_add_sub_cella_datad[32:32]),
	.dataf(wire_add_sub_cella_dataf[32:32]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[32:32]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_32.extended_lut = "off",
		add_sub_cella_32.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_32.shared_arith = "off",
		add_sub_cella_32.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_33
	( 
	.cin(wire_add_sub_cella_32cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_33cout[0:0]),
	.datad(wire_add_sub_cella_datad[33:33]),
	.dataf(wire_add_sub_cella_dataf[33:33]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[33:33]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_33.extended_lut = "off",
		add_sub_cella_33.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_33.shared_arith = "off",
		add_sub_cella_33.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_34
	( 
	.cin(wire_add_sub_cella_33cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_34cout[0:0]),
	.datad(wire_add_sub_cella_datad[34:34]),
	.dataf(wire_add_sub_cella_dataf[34:34]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[34:34]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_34.extended_lut = "off",
		add_sub_cella_34.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_34.shared_arith = "off",
		add_sub_cella_34.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_35
	( 
	.cin(wire_add_sub_cella_34cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_35cout[0:0]),
	.datad(wire_add_sub_cella_datad[35:35]),
	.dataf(wire_add_sub_cella_dataf[35:35]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[35:35]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_35.extended_lut = "off",
		add_sub_cella_35.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_35.shared_arith = "off",
		add_sub_cella_35.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_36
	( 
	.cin(wire_add_sub_cella_35cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_36cout[0:0]),
	.datad(wire_add_sub_cella_datad[36:36]),
	.dataf(wire_add_sub_cella_dataf[36:36]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[36:36]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_36.extended_lut = "off",
		add_sub_cella_36.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_36.shared_arith = "off",
		add_sub_cella_36.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_37
	( 
	.cin(wire_add_sub_cella_36cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_37cout[0:0]),
	.datad(wire_add_sub_cella_datad[37:37]),
	.dataf(wire_add_sub_cella_dataf[37:37]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[37:37]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_37.extended_lut = "off",
		add_sub_cella_37.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_37.shared_arith = "off",
		add_sub_cella_37.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_38
	( 
	.cin(wire_add_sub_cella_37cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_38cout[0:0]),
	.datad(wire_add_sub_cella_datad[38:38]),
	.dataf(wire_add_sub_cella_dataf[38:38]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[38:38]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_38.extended_lut = "off",
		add_sub_cella_38.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_38.shared_arith = "off",
		add_sub_cella_38.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_39
	( 
	.cin(wire_add_sub_cella_38cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_39cout[0:0]),
	.datad(wire_add_sub_cella_datad[39:39]),
	.dataf(wire_add_sub_cella_dataf[39:39]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[39:39]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_39.extended_lut = "off",
		add_sub_cella_39.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_39.shared_arith = "off",
		add_sub_cella_39.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_40
	( 
	.cin(wire_add_sub_cella_39cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_40cout[0:0]),
	.datad(wire_add_sub_cella_datad[40:40]),
	.dataf(wire_add_sub_cella_dataf[40:40]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[40:40]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_40.extended_lut = "off",
		add_sub_cella_40.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_40.shared_arith = "off",
		add_sub_cella_40.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_41
	( 
	.cin(wire_add_sub_cella_40cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_41cout[0:0]),
	.datad(wire_add_sub_cella_datad[41:41]),
	.dataf(wire_add_sub_cella_dataf[41:41]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[41:41]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_41.extended_lut = "off",
		add_sub_cella_41.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_41.shared_arith = "off",
		add_sub_cella_41.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_42
	( 
	.cin(wire_add_sub_cella_41cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_42cout[0:0]),
	.datad(wire_add_sub_cella_datad[42:42]),
	.dataf(wire_add_sub_cella_dataf[42:42]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[42:42]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_42.extended_lut = "off",
		add_sub_cella_42.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_42.shared_arith = "off",
		add_sub_cella_42.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_43
	( 
	.cin(wire_add_sub_cella_42cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_43cout[0:0]),
	.datad(wire_add_sub_cella_datad[43:43]),
	.dataf(wire_add_sub_cella_dataf[43:43]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[43:43]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_43.extended_lut = "off",
		add_sub_cella_43.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_43.shared_arith = "off",
		add_sub_cella_43.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_44
	( 
	.cin(wire_add_sub_cella_43cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_44cout[0:0]),
	.datad(wire_add_sub_cella_datad[44:44]),
	.dataf(wire_add_sub_cella_dataf[44:44]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[44:44]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_44.extended_lut = "off",
		add_sub_cella_44.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_44.shared_arith = "off",
		add_sub_cella_44.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_45
	( 
	.cin(wire_add_sub_cella_44cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_45cout[0:0]),
	.datad(wire_add_sub_cella_datad[45:45]),
	.dataf(wire_add_sub_cella_dataf[45:45]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[45:45]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_45.extended_lut = "off",
		add_sub_cella_45.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_45.shared_arith = "off",
		add_sub_cella_45.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_46
	( 
	.cin(1'b0),
	.combout(),
	.cout(wire_add_sub_cella_46cout[0:0]),
	.datad(wire_add_sub_cella_datad[46:46]),
	.dataf(wire_add_sub_cella_dataf[46:46]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[46:46]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_46.extended_lut = "off",
		add_sub_cella_46.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_46.shared_arith = "off",
		add_sub_cella_46.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_47
	( 
	.cin(wire_add_sub_cella_46cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_47cout[0:0]),
	.datad(wire_add_sub_cella_datad[47:47]),
	.dataf(wire_add_sub_cella_dataf[47:47]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[47:47]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_47.extended_lut = "off",
		add_sub_cella_47.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_47.shared_arith = "off",
		add_sub_cella_47.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_48
	( 
	.cin(wire_add_sub_cella_47cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_48cout[0:0]),
	.datad(wire_add_sub_cella_datad[48:48]),
	.dataf(wire_add_sub_cella_dataf[48:48]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[48:48]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_48.extended_lut = "off",
		add_sub_cella_48.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_48.shared_arith = "off",
		add_sub_cella_48.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_49
	( 
	.cin(wire_add_sub_cella_48cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_49cout[0:0]),
	.datad(wire_add_sub_cella_datad[49:49]),
	.dataf(wire_add_sub_cella_dataf[49:49]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[49:49]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_49.extended_lut = "off",
		add_sub_cella_49.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_49.shared_arith = "off",
		add_sub_cella_49.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_50
	( 
	.cin(wire_add_sub_cella_49cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_50cout[0:0]),
	.datad(wire_add_sub_cella_datad[50:50]),
	.dataf(wire_add_sub_cella_dataf[50:50]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[50:50]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_50.extended_lut = "off",
		add_sub_cella_50.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_50.shared_arith = "off",
		add_sub_cella_50.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_51
	( 
	.cin(wire_add_sub_cella_50cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_51cout[0:0]),
	.datad(wire_add_sub_cella_datad[51:51]),
	.dataf(wire_add_sub_cella_dataf[51:51]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[51:51]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_51.extended_lut = "off",
		add_sub_cella_51.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_51.shared_arith = "off",
		add_sub_cella_51.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_52
	( 
	.cin(wire_add_sub_cella_51cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_52cout[0:0]),
	.datad(wire_add_sub_cella_datad[52:52]),
	.dataf(wire_add_sub_cella_dataf[52:52]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[52:52]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_52.extended_lut = "off",
		add_sub_cella_52.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_52.shared_arith = "off",
		add_sub_cella_52.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_53
	( 
	.cin(wire_add_sub_cella_52cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_53cout[0:0]),
	.datad(wire_add_sub_cella_datad[53:53]),
	.dataf(wire_add_sub_cella_dataf[53:53]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[53:53]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_53.extended_lut = "off",
		add_sub_cella_53.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_53.shared_arith = "off",
		add_sub_cella_53.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_54
	( 
	.cin(wire_add_sub_cella_53cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_54cout[0:0]),
	.datad(wire_add_sub_cella_datad[54:54]),
	.dataf(wire_add_sub_cella_dataf[54:54]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[54:54]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_54.extended_lut = "off",
		add_sub_cella_54.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_54.shared_arith = "off",
		add_sub_cella_54.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_55
	( 
	.cin(wire_add_sub_cella_54cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_55cout[0:0]),
	.datad(wire_add_sub_cella_datad[55:55]),
	.dataf(wire_add_sub_cella_dataf[55:55]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[55:55]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_55.extended_lut = "off",
		add_sub_cella_55.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_55.shared_arith = "off",
		add_sub_cella_55.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_56
	( 
	.cin(wire_add_sub_cella_55cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_56cout[0:0]),
	.datad(wire_add_sub_cella_datad[56:56]),
	.dataf(wire_add_sub_cella_dataf[56:56]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[56:56]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_56.extended_lut = "off",
		add_sub_cella_56.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_56.shared_arith = "off",
		add_sub_cella_56.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_57
	( 
	.cin(wire_add_sub_cella_56cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_57cout[0:0]),
	.datad(wire_add_sub_cella_datad[57:57]),
	.dataf(wire_add_sub_cella_dataf[57:57]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[57:57]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_57.extended_lut = "off",
		add_sub_cella_57.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_57.shared_arith = "off",
		add_sub_cella_57.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_58
	( 
	.cin(wire_add_sub_cella_57cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_58cout[0:0]),
	.datad(wire_add_sub_cella_datad[58:58]),
	.dataf(wire_add_sub_cella_dataf[58:58]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[58:58]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_58.extended_lut = "off",
		add_sub_cella_58.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_58.shared_arith = "off",
		add_sub_cella_58.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_59
	( 
	.cin(wire_add_sub_cella_58cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_59cout[0:0]),
	.datad(wire_add_sub_cella_datad[59:59]),
	.dataf(wire_add_sub_cella_dataf[59:59]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[59:59]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_59.extended_lut = "off",
		add_sub_cella_59.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_59.shared_arith = "off",
		add_sub_cella_59.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_60
	( 
	.cin(wire_add_sub_cella_59cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_60cout[0:0]),
	.datad(wire_add_sub_cella_datad[60:60]),
	.dataf(wire_add_sub_cella_dataf[60:60]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[60:60]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_60.extended_lut = "off",
		add_sub_cella_60.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_60.shared_arith = "off",
		add_sub_cella_60.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_61
	( 
	.cin(wire_add_sub_cella_60cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_61cout[0:0]),
	.datad(wire_add_sub_cella_datad[61:61]),
	.dataf(wire_add_sub_cella_dataf[61:61]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[61:61]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_61.extended_lut = "off",
		add_sub_cella_61.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_61.shared_arith = "off",
		add_sub_cella_61.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_62
	( 
	.cin(wire_add_sub_cella_61cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_62cout[0:0]),
	.datad(wire_add_sub_cella_datad[62:62]),
	.dataf(wire_add_sub_cella_dataf[62:62]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[62:62]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_62.extended_lut = "off",
		add_sub_cella_62.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_62.shared_arith = "off",
		add_sub_cella_62.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_63
	( 
	.cin(wire_add_sub_cella_62cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_63cout[0:0]),
	.datad(wire_add_sub_cella_datad[63:63]),
	.dataf(wire_add_sub_cella_dataf[63:63]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[63:63]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_63.extended_lut = "off",
		add_sub_cella_63.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_63.shared_arith = "off",
		add_sub_cella_63.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_64
	( 
	.cin(wire_add_sub_cella_63cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_64cout[0:0]),
	.datad(wire_add_sub_cella_datad[64:64]),
	.dataf(wire_add_sub_cella_dataf[64:64]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[64:64]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_64.extended_lut = "off",
		add_sub_cella_64.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_64.shared_arith = "off",
		add_sub_cella_64.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_65
	( 
	.cin(wire_add_sub_cella_64cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_65cout[0:0]),
	.datad(wire_add_sub_cella_datad[65:65]),
	.dataf(wire_add_sub_cella_dataf[65:65]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[65:65]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_65.extended_lut = "off",
		add_sub_cella_65.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_65.shared_arith = "off",
		add_sub_cella_65.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_66
	( 
	.cin(wire_add_sub_cella_65cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_66cout[0:0]),
	.datad(wire_add_sub_cella_datad[66:66]),
	.dataf(wire_add_sub_cella_dataf[66:66]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[66:66]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_66.extended_lut = "off",
		add_sub_cella_66.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_66.shared_arith = "off",
		add_sub_cella_66.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_67
	( 
	.cin(wire_add_sub_cella_66cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_67cout[0:0]),
	.datad(wire_add_sub_cella_datad[67:67]),
	.dataf(wire_add_sub_cella_dataf[67:67]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[67:67]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_67.extended_lut = "off",
		add_sub_cella_67.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_67.shared_arith = "off",
		add_sub_cella_67.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_68
	( 
	.cin(wire_add_sub_cella_67cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_68cout[0:0]),
	.datad(wire_add_sub_cella_datad[68:68]),
	.dataf(wire_add_sub_cella_dataf[68:68]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[68:68]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_68.extended_lut = "off",
		add_sub_cella_68.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_68.shared_arith = "off",
		add_sub_cella_68.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_69
	( 
	.cin(wire_add_sub_cella_68cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_69cout[0:0]),
	.datad(wire_add_sub_cella_datad[69:69]),
	.dataf(wire_add_sub_cella_dataf[69:69]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[69:69]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_69.extended_lut = "off",
		add_sub_cella_69.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_69.shared_arith = "off",
		add_sub_cella_69.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_70
	( 
	.cin(wire_add_sub_cella_69cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_70cout[0:0]),
	.datad(wire_add_sub_cella_datad[70:70]),
	.dataf(wire_add_sub_cella_dataf[70:70]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[70:70]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_70.extended_lut = "off",
		add_sub_cella_70.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_70.shared_arith = "off",
		add_sub_cella_70.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_71
	( 
	.cin(wire_add_sub_cella_70cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_71cout[0:0]),
	.datad(wire_add_sub_cella_datad[71:71]),
	.dataf(wire_add_sub_cella_dataf[71:71]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[71:71]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_71.extended_lut = "off",
		add_sub_cella_71.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_71.shared_arith = "off",
		add_sub_cella_71.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_72
	( 
	.cin(wire_add_sub_cella_71cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_72cout[0:0]),
	.datad(wire_add_sub_cella_datad[72:72]),
	.dataf(wire_add_sub_cella_dataf[72:72]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[72:72]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_72.extended_lut = "off",
		add_sub_cella_72.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_72.shared_arith = "off",
		add_sub_cella_72.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_73
	( 
	.cin(wire_add_sub_cella_72cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_73cout[0:0]),
	.datad(wire_add_sub_cella_datad[73:73]),
	.dataf(wire_add_sub_cella_dataf[73:73]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[73:73]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_73.extended_lut = "off",
		add_sub_cella_73.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_73.shared_arith = "off",
		add_sub_cella_73.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_74
	( 
	.cin(wire_add_sub_cella_73cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_74cout[0:0]),
	.datad(wire_add_sub_cella_datad[74:74]),
	.dataf(wire_add_sub_cella_dataf[74:74]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[74:74]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_74.extended_lut = "off",
		add_sub_cella_74.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_74.shared_arith = "off",
		add_sub_cella_74.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_75
	( 
	.cin(wire_add_sub_cella_74cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_75cout[0:0]),
	.datad(wire_add_sub_cella_datad[75:75]),
	.dataf(wire_add_sub_cella_dataf[75:75]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[75:75]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_75.extended_lut = "off",
		add_sub_cella_75.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_75.shared_arith = "off",
		add_sub_cella_75.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_76
	( 
	.cin(wire_add_sub_cella_75cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_76cout[0:0]),
	.datad(wire_add_sub_cella_datad[76:76]),
	.dataf(wire_add_sub_cella_dataf[76:76]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[76:76]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_76.extended_lut = "off",
		add_sub_cella_76.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_76.shared_arith = "off",
		add_sub_cella_76.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_77
	( 
	.cin(wire_add_sub_cella_76cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_77cout[0:0]),
	.datad(wire_add_sub_cella_datad[77:77]),
	.dataf(wire_add_sub_cella_dataf[77:77]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[77:77]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_77.extended_lut = "off",
		add_sub_cella_77.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_77.shared_arith = "off",
		add_sub_cella_77.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_78
	( 
	.cin(wire_le_comb9_cout),
	.combout(),
	.cout(wire_add_sub_cella_78cout[0:0]),
	.datad(wire_add_sub_cella_datad[78:78]),
	.dataf(wire_add_sub_cella_dataf[78:78]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[78:78]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_78.extended_lut = "off",
		add_sub_cella_78.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_78.shared_arith = "off",
		add_sub_cella_78.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_79
	( 
	.cin(wire_add_sub_cella_78cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_79cout[0:0]),
	.datad(wire_add_sub_cella_datad[79:79]),
	.dataf(wire_add_sub_cella_dataf[79:79]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[79:79]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_79.extended_lut = "off",
		add_sub_cella_79.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_79.shared_arith = "off",
		add_sub_cella_79.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_80
	( 
	.cin(wire_add_sub_cella_79cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_80cout[0:0]),
	.datad(wire_add_sub_cella_datad[80:80]),
	.dataf(wire_add_sub_cella_dataf[80:80]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[80:80]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_80.extended_lut = "off",
		add_sub_cella_80.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_80.shared_arith = "off",
		add_sub_cella_80.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_81
	( 
	.cin(wire_add_sub_cella_80cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_81cout[0:0]),
	.datad(wire_add_sub_cella_datad[81:81]),
	.dataf(wire_add_sub_cella_dataf[81:81]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[81:81]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_81.extended_lut = "off",
		add_sub_cella_81.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_81.shared_arith = "off",
		add_sub_cella_81.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_82
	( 
	.cin(wire_add_sub_cella_81cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_82cout[0:0]),
	.datad(wire_add_sub_cella_datad[82:82]),
	.dataf(wire_add_sub_cella_dataf[82:82]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[82:82]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_82.extended_lut = "off",
		add_sub_cella_82.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_82.shared_arith = "off",
		add_sub_cella_82.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_83
	( 
	.cin(wire_add_sub_cella_82cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_83cout[0:0]),
	.datad(wire_add_sub_cella_datad[83:83]),
	.dataf(wire_add_sub_cella_dataf[83:83]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[83:83]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_83.extended_lut = "off",
		add_sub_cella_83.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_83.shared_arith = "off",
		add_sub_cella_83.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_84
	( 
	.cin(wire_add_sub_cella_83cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_84cout[0:0]),
	.datad(wire_add_sub_cella_datad[84:84]),
	.dataf(wire_add_sub_cella_dataf[84:84]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[84:84]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_84.extended_lut = "off",
		add_sub_cella_84.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_84.shared_arith = "off",
		add_sub_cella_84.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_85
	( 
	.cin(wire_add_sub_cella_84cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_85cout[0:0]),
	.datad(wire_add_sub_cella_datad[85:85]),
	.dataf(wire_add_sub_cella_dataf[85:85]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[85:85]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_85.extended_lut = "off",
		add_sub_cella_85.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_85.shared_arith = "off",
		add_sub_cella_85.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_86
	( 
	.cin(wire_add_sub_cella_85cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_86cout[0:0]),
	.datad(wire_add_sub_cella_datad[86:86]),
	.dataf(wire_add_sub_cella_dataf[86:86]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[86:86]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_86.extended_lut = "off",
		add_sub_cella_86.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_86.shared_arith = "off",
		add_sub_cella_86.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_87
	( 
	.cin(wire_add_sub_cella_86cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_87cout[0:0]),
	.datad(wire_add_sub_cella_datad[87:87]),
	.dataf(wire_add_sub_cella_dataf[87:87]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[87:87]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_87.extended_lut = "off",
		add_sub_cella_87.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_87.shared_arith = "off",
		add_sub_cella_87.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_88
	( 
	.cin(wire_add_sub_cella_87cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_88cout[0:0]),
	.datad(wire_add_sub_cella_datad[88:88]),
	.dataf(wire_add_sub_cella_dataf[88:88]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[88:88]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_88.extended_lut = "off",
		add_sub_cella_88.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_88.shared_arith = "off",
		add_sub_cella_88.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_89
	( 
	.cin(wire_add_sub_cella_88cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_89cout[0:0]),
	.datad(wire_add_sub_cella_datad[89:89]),
	.dataf(wire_add_sub_cella_dataf[89:89]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[89:89]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_89.extended_lut = "off",
		add_sub_cella_89.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_89.shared_arith = "off",
		add_sub_cella_89.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_90
	( 
	.cin(wire_add_sub_cella_89cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_90cout[0:0]),
	.datad(wire_add_sub_cella_datad[90:90]),
	.dataf(wire_add_sub_cella_dataf[90:90]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[90:90]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_90.extended_lut = "off",
		add_sub_cella_90.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_90.shared_arith = "off",
		add_sub_cella_90.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_91
	( 
	.cin(wire_add_sub_cella_90cout[0:0]),
	.combout(),
	.cout(),
	.datad(wire_add_sub_cella_datad[91:91]),
	.dataf(wire_add_sub_cella_dataf[91:91]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[91:91]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_91.extended_lut = "off",
		add_sub_cella_91.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_91.shared_arith = "off",
		add_sub_cella_91.lpm_type = "cyclonev_lcell_comb";
	assign
		wire_add_sub_cella_datad = dataa,
		wire_add_sub_cella_dataf = datab;
	cyclonev_lcell_comb   inter_regrs_cina_0
	( 
	.cin(wire_add_sub_cella_45cout[0:0]),
	.combout(),
	.cout(),
	.dataa(1'b1),
	.shareout(),
	.sumout(wire_inter_regrs_cina_sumout[0:0]),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		inter_regrs_cina_0.extended_lut = "off",
		inter_regrs_cina_0.lut_mask = 64'h0000AAAA00005555,
		inter_regrs_cina_0.shared_arith = "off",
		inter_regrs_cina_0.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   inter_regrs_couta_0
	( 
	.cin(1'b0),
	.combout(),
	.cout(wire_inter_regrs_couta_0cout[0:0]),
	.dataa(inter_regrs_cin_ffa0),
	.shareout(),
	.sumout(),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		inter_regrs_couta_0.extended_lut = "off",
		inter_regrs_couta_0.lut_mask = 64'h000055550000AAAA,
		inter_regrs_couta_0.shared_arith = "off",
		inter_regrs_couta_0.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   le_comb10
	( 
	.cin(wire_pad_cella_31cout[0:0]),
	.combout(),
	.cout(),
	.dataa(1'b1),
	.shareout(),
	.sumout(wire_le_comb10_sumout),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		le_comb10.extended_lut = "off",
		le_comb10.lut_mask = 64'h0000AAAA00005555,
		le_comb10.shared_arith = "off",
		le_comb10.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   le_comb11
	( 
	.cin(1'b0),
	.combout(),
	.cout(wire_le_comb11_cout),
	.dataa(wire_le_comb10_sumout),
	.shareout(),
	.sumout(),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		le_comb11.extended_lut = "off",
		le_comb11.lut_mask = 64'h000055550000AAAA,
		le_comb11.shared_arith = "off",
		le_comb11.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   le_comb12
	( 
	.cin(wire_pad_cella_77cout[0:0]),
	.combout(),
	.cout(),
	.dataa(1'b1),
	.shareout(),
	.sumout(wire_le_comb12_sumout),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		le_comb12.extended_lut = "off",
		le_comb12.lut_mask = 64'h0000AAAA00005555,
		le_comb12.shared_arith = "off",
		le_comb12.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   le_comb13
	( 
	.cin(1'b0),
	.combout(),
	.cout(wire_le_comb13_cout),
	.dataa(wire_le_comb12_sumout),
	.shareout(),
	.sumout(),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		le_comb13.extended_lut = "off",
		le_comb13.lut_mask = 64'h000055550000AAAA,
		le_comb13.shared_arith = "off",
		le_comb13.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   le_comb6
	( 
	.cin(wire_add_sub_cella_31cout[0:0]),
	.combout(),
	.cout(),
	.dataa(1'b1),
	.shareout(),
	.sumout(wire_le_comb6_sumout),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		le_comb6.extended_lut = "off",
		le_comb6.lut_mask = 64'h0000AAAA00005555,
		le_comb6.shared_arith = "off",
		le_comb6.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   le_comb7
	( 
	.cin(1'b0),
	.combout(),
	.cout(wire_le_comb7_cout),
	.dataa(wire_le_comb6_sumout),
	.shareout(),
	.sumout(),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		le_comb7.extended_lut = "off",
		le_comb7.lut_mask = 64'h000055550000AAAA,
		le_comb7.shared_arith = "off",
		le_comb7.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   le_comb8
	( 
	.cin(wire_add_sub_cella_77cout[0:0]),
	.combout(),
	.cout(),
	.dataa(1'b1),
	.shareout(),
	.sumout(wire_le_comb8_sumout),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		le_comb8.extended_lut = "off",
		le_comb8.lut_mask = 64'h0000AAAA00005555,
		le_comb8.shared_arith = "off",
		le_comb8.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   le_comb9
	( 
	.cin(1'b0),
	.combout(),
	.cout(wire_le_comb9_cout),
	.dataa(wire_le_comb8_sumout),
	.shareout(),
	.sumout(),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		le_comb9.extended_lut = "off",
		le_comb9.lut_mask = 64'h000055550000AAAA,
		le_comb9.shared_arith = "off",
		le_comb9.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_0
	( 
	.cin(1'b0),
	.combout(),
	.cout(wire_pad_cella_0cout[0:0]),
	.datad(wire_pad_cella_datad[0:0]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_0.extended_lut = "off",
		pad_cella_0.lut_mask = 64'h000000FF0000FF00,
		pad_cella_0.shared_arith = "off",
		pad_cella_0.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_1
	( 
	.cin(wire_pad_cella_0cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_1cout[0:0]),
	.datad(wire_pad_cella_datad[1:1]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[1:1]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_1.extended_lut = "off",
		pad_cella_1.lut_mask = 64'h000000FF0000FF00,
		pad_cella_1.shared_arith = "off",
		pad_cella_1.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_2
	( 
	.cin(wire_pad_cella_1cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_2cout[0:0]),
	.datad(wire_pad_cella_datad[2:2]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[2:2]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_2.extended_lut = "off",
		pad_cella_2.lut_mask = 64'h000000FF0000FF00,
		pad_cella_2.shared_arith = "off",
		pad_cella_2.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_3
	( 
	.cin(wire_pad_cella_2cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_3cout[0:0]),
	.datad(wire_pad_cella_datad[3:3]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[3:3]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_3.extended_lut = "off",
		pad_cella_3.lut_mask = 64'h000000FF0000FF00,
		pad_cella_3.shared_arith = "off",
		pad_cella_3.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_4
	( 
	.cin(wire_pad_cella_3cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_4cout[0:0]),
	.datad(wire_pad_cella_datad[4:4]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[4:4]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_4.extended_lut = "off",
		pad_cella_4.lut_mask = 64'h000000FF0000FF00,
		pad_cella_4.shared_arith = "off",
		pad_cella_4.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_5
	( 
	.cin(wire_pad_cella_4cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_5cout[0:0]),
	.datad(wire_pad_cella_datad[5:5]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[5:5]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_5.extended_lut = "off",
		pad_cella_5.lut_mask = 64'h000000FF0000FF00,
		pad_cella_5.shared_arith = "off",
		pad_cella_5.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_6
	( 
	.cin(wire_pad_cella_5cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_6cout[0:0]),
	.datad(wire_pad_cella_datad[6:6]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[6:6]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_6.extended_lut = "off",
		pad_cella_6.lut_mask = 64'h000000FF0000FF00,
		pad_cella_6.shared_arith = "off",
		pad_cella_6.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_7
	( 
	.cin(wire_pad_cella_6cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_7cout[0:0]),
	.datad(wire_pad_cella_datad[7:7]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[7:7]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_7.extended_lut = "off",
		pad_cella_7.lut_mask = 64'h000000FF0000FF00,
		pad_cella_7.shared_arith = "off",
		pad_cella_7.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_8
	( 
	.cin(wire_pad_cella_7cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_8cout[0:0]),
	.datad(wire_pad_cella_datad[8:8]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[8:8]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_8.extended_lut = "off",
		pad_cella_8.lut_mask = 64'h000000FF0000FF00,
		pad_cella_8.shared_arith = "off",
		pad_cella_8.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_9
	( 
	.cin(wire_pad_cella_8cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_9cout[0:0]),
	.datad(wire_pad_cella_datad[9:9]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[9:9]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_9.extended_lut = "off",
		pad_cella_9.lut_mask = 64'h000000FF0000FF00,
		pad_cella_9.shared_arith = "off",
		pad_cella_9.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_10
	( 
	.cin(wire_pad_cella_9cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_10cout[0:0]),
	.datad(wire_pad_cella_datad[10:10]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[10:10]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_10.extended_lut = "off",
		pad_cella_10.lut_mask = 64'h000000FF0000FF00,
		pad_cella_10.shared_arith = "off",
		pad_cella_10.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_11
	( 
	.cin(wire_pad_cella_10cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_11cout[0:0]),
	.datad(wire_pad_cella_datad[11:11]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[11:11]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_11.extended_lut = "off",
		pad_cella_11.lut_mask = 64'h000000FF0000FF00,
		pad_cella_11.shared_arith = "off",
		pad_cella_11.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_12
	( 
	.cin(wire_pad_cella_11cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_12cout[0:0]),
	.datad(wire_pad_cella_datad[12:12]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[12:12]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_12.extended_lut = "off",
		pad_cella_12.lut_mask = 64'h000000FF0000FF00,
		pad_cella_12.shared_arith = "off",
		pad_cella_12.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_13
	( 
	.cin(wire_pad_cella_12cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_13cout[0:0]),
	.datad(wire_pad_cella_datad[13:13]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[13:13]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_13.extended_lut = "off",
		pad_cella_13.lut_mask = 64'h000000FF0000FF00,
		pad_cella_13.shared_arith = "off",
		pad_cella_13.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_14
	( 
	.cin(wire_pad_cella_13cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_14cout[0:0]),
	.datad(wire_pad_cella_datad[14:14]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[14:14]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_14.extended_lut = "off",
		pad_cella_14.lut_mask = 64'h000000FF0000FF00,
		pad_cella_14.shared_arith = "off",
		pad_cella_14.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_15
	( 
	.cin(wire_pad_cella_14cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_15cout[0:0]),
	.datad(wire_pad_cella_datad[15:15]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[15:15]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_15.extended_lut = "off",
		pad_cella_15.lut_mask = 64'h000000FF0000FF00,
		pad_cella_15.shared_arith = "off",
		pad_cella_15.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_16
	( 
	.cin(wire_pad_cella_15cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_16cout[0:0]),
	.datad(wire_pad_cella_datad[16:16]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[16:16]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_16.extended_lut = "off",
		pad_cella_16.lut_mask = 64'h000000FF0000FF00,
		pad_cella_16.shared_arith = "off",
		pad_cella_16.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_17
	( 
	.cin(wire_pad_cella_16cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_17cout[0:0]),
	.datad(wire_pad_cella_datad[17:17]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[17:17]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_17.extended_lut = "off",
		pad_cella_17.lut_mask = 64'h000000FF0000FF00,
		pad_cella_17.shared_arith = "off",
		pad_cella_17.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_18
	( 
	.cin(wire_pad_cella_17cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_18cout[0:0]),
	.datad(wire_pad_cella_datad[18:18]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[18:18]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_18.extended_lut = "off",
		pad_cella_18.lut_mask = 64'h000000FF0000FF00,
		pad_cella_18.shared_arith = "off",
		pad_cella_18.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_19
	( 
	.cin(wire_pad_cella_18cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_19cout[0:0]),
	.datad(wire_pad_cella_datad[19:19]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[19:19]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_19.extended_lut = "off",
		pad_cella_19.lut_mask = 64'h000000FF0000FF00,
		pad_cella_19.shared_arith = "off",
		pad_cella_19.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_20
	( 
	.cin(wire_pad_cella_19cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_20cout[0:0]),
	.datad(wire_pad_cella_datad[20:20]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[20:20]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_20.extended_lut = "off",
		pad_cella_20.lut_mask = 64'h000000FF0000FF00,
		pad_cella_20.shared_arith = "off",
		pad_cella_20.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_21
	( 
	.cin(wire_pad_cella_20cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_21cout[0:0]),
	.datad(wire_pad_cella_datad[21:21]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[21:21]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_21.extended_lut = "off",
		pad_cella_21.lut_mask = 64'h000000FF0000FF00,
		pad_cella_21.shared_arith = "off",
		pad_cella_21.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_22
	( 
	.cin(wire_pad_cella_21cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_22cout[0:0]),
	.datad(wire_pad_cella_datad[22:22]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[22:22]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_22.extended_lut = "off",
		pad_cella_22.lut_mask = 64'h000000FF0000FF00,
		pad_cella_22.shared_arith = "off",
		pad_cella_22.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_23
	( 
	.cin(wire_pad_cella_22cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_23cout[0:0]),
	.datad(wire_pad_cella_datad[23:23]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[23:23]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_23.extended_lut = "off",
		pad_cella_23.lut_mask = 64'h000000FF0000FF00,
		pad_cella_23.shared_arith = "off",
		pad_cella_23.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_24
	( 
	.cin(wire_pad_cella_23cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_24cout[0:0]),
	.datad(wire_pad_cella_datad[24:24]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[24:24]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_24.extended_lut = "off",
		pad_cella_24.lut_mask = 64'h000000FF0000FF00,
		pad_cella_24.shared_arith = "off",
		pad_cella_24.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_25
	( 
	.cin(wire_pad_cella_24cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_25cout[0:0]),
	.datad(wire_pad_cella_datad[25:25]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[25:25]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_25.extended_lut = "off",
		pad_cella_25.lut_mask = 64'h000000FF0000FF00,
		pad_cella_25.shared_arith = "off",
		pad_cella_25.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_26
	( 
	.cin(wire_pad_cella_25cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_26cout[0:0]),
	.datad(wire_pad_cella_datad[26:26]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[26:26]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_26.extended_lut = "off",
		pad_cella_26.lut_mask = 64'h000000FF0000FF00,
		pad_cella_26.shared_arith = "off",
		pad_cella_26.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_27
	( 
	.cin(wire_pad_cella_26cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_27cout[0:0]),
	.datad(wire_pad_cella_datad[27:27]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[27:27]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_27.extended_lut = "off",
		pad_cella_27.lut_mask = 64'h000000FF0000FF00,
		pad_cella_27.shared_arith = "off",
		pad_cella_27.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_28
	( 
	.cin(wire_pad_cella_27cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_28cout[0:0]),
	.datad(wire_pad_cella_datad[28:28]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[28:28]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_28.extended_lut = "off",
		pad_cella_28.lut_mask = 64'h000000FF0000FF00,
		pad_cella_28.shared_arith = "off",
		pad_cella_28.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_29
	( 
	.cin(wire_pad_cella_28cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_29cout[0:0]),
	.datad(wire_pad_cella_datad[29:29]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[29:29]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_29.extended_lut = "off",
		pad_cella_29.lut_mask = 64'h000000FF0000FF00,
		pad_cella_29.shared_arith = "off",
		pad_cella_29.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_30
	( 
	.cin(wire_pad_cella_29cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_30cout[0:0]),
	.datad(wire_pad_cella_datad[30:30]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[30:30]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_30.extended_lut = "off",
		pad_cella_30.lut_mask = 64'h000000FF0000FF00,
		pad_cella_30.shared_arith = "off",
		pad_cella_30.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_31
	( 
	.cin(wire_pad_cella_30cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_31cout[0:0]),
	.datad(wire_pad_cella_datad[31:31]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[31:31]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_31.extended_lut = "off",
		pad_cella_31.lut_mask = 64'h000000FF0000FF00,
		pad_cella_31.shared_arith = "off",
		pad_cella_31.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_32
	( 
	.cin(wire_le_comb11_cout),
	.combout(),
	.cout(wire_pad_cella_32cout[0:0]),
	.datad(wire_pad_cella_datad[32:32]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[32:32]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_32.extended_lut = "off",
		pad_cella_32.lut_mask = 64'h000000FF0000FF00,
		pad_cella_32.shared_arith = "off",
		pad_cella_32.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_33
	( 
	.cin(wire_pad_cella_32cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_33cout[0:0]),
	.datad(wire_pad_cella_datad[33:33]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[33:33]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_33.extended_lut = "off",
		pad_cella_33.lut_mask = 64'h000000FF0000FF00,
		pad_cella_33.shared_arith = "off",
		pad_cella_33.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_34
	( 
	.cin(wire_pad_cella_33cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_34cout[0:0]),
	.datad(wire_pad_cella_datad[34:34]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[34:34]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_34.extended_lut = "off",
		pad_cella_34.lut_mask = 64'h000000FF0000FF00,
		pad_cella_34.shared_arith = "off",
		pad_cella_34.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_35
	( 
	.cin(wire_pad_cella_34cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_35cout[0:0]),
	.datad(wire_pad_cella_datad[35:35]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[35:35]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_35.extended_lut = "off",
		pad_cella_35.lut_mask = 64'h000000FF0000FF00,
		pad_cella_35.shared_arith = "off",
		pad_cella_35.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_36
	( 
	.cin(wire_pad_cella_35cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_36cout[0:0]),
	.datad(wire_pad_cella_datad[36:36]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[36:36]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_36.extended_lut = "off",
		pad_cella_36.lut_mask = 64'h000000FF0000FF00,
		pad_cella_36.shared_arith = "off",
		pad_cella_36.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_37
	( 
	.cin(wire_pad_cella_36cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_37cout[0:0]),
	.datad(wire_pad_cella_datad[37:37]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[37:37]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_37.extended_lut = "off",
		pad_cella_37.lut_mask = 64'h000000FF0000FF00,
		pad_cella_37.shared_arith = "off",
		pad_cella_37.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_38
	( 
	.cin(wire_pad_cella_37cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_38cout[0:0]),
	.datad(wire_pad_cella_datad[38:38]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[38:38]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_38.extended_lut = "off",
		pad_cella_38.lut_mask = 64'h000000FF0000FF00,
		pad_cella_38.shared_arith = "off",
		pad_cella_38.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_39
	( 
	.cin(wire_pad_cella_38cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_39cout[0:0]),
	.datad(wire_pad_cella_datad[39:39]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[39:39]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_39.extended_lut = "off",
		pad_cella_39.lut_mask = 64'h000000FF0000FF00,
		pad_cella_39.shared_arith = "off",
		pad_cella_39.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_40
	( 
	.cin(wire_pad_cella_39cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_40cout[0:0]),
	.datad(wire_pad_cella_datad[40:40]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[40:40]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_40.extended_lut = "off",
		pad_cella_40.lut_mask = 64'h000000FF0000FF00,
		pad_cella_40.shared_arith = "off",
		pad_cella_40.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_41
	( 
	.cin(wire_pad_cella_40cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_41cout[0:0]),
	.datad(wire_pad_cella_datad[41:41]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[41:41]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_41.extended_lut = "off",
		pad_cella_41.lut_mask = 64'h000000FF0000FF00,
		pad_cella_41.shared_arith = "off",
		pad_cella_41.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_42
	( 
	.cin(wire_pad_cella_41cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_42cout[0:0]),
	.datad(wire_pad_cella_datad[42:42]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[42:42]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_42.extended_lut = "off",
		pad_cella_42.lut_mask = 64'h000000FF0000FF00,
		pad_cella_42.shared_arith = "off",
		pad_cella_42.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_43
	( 
	.cin(wire_pad_cella_42cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_43cout[0:0]),
	.datad(wire_pad_cella_datad[43:43]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[43:43]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_43.extended_lut = "off",
		pad_cella_43.lut_mask = 64'h000000FF0000FF00,
		pad_cella_43.shared_arith = "off",
		pad_cella_43.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_44
	( 
	.cin(wire_pad_cella_43cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_44cout[0:0]),
	.datad(wire_pad_cella_datad[44:44]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[44:44]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_44.extended_lut = "off",
		pad_cella_44.lut_mask = 64'h000000FF0000FF00,
		pad_cella_44.shared_arith = "off",
		pad_cella_44.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_45
	( 
	.cin(wire_pad_cella_44cout[0:0]),
	.combout(),
	.cout(),
	.datad(wire_pad_cella_datad[45:45]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[45:45]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_45.extended_lut = "off",
		pad_cella_45.lut_mask = 64'h000000FF0000FF00,
		pad_cella_45.shared_arith = "off",
		pad_cella_45.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_46
	( 
	.cin(wire_inter_regrs_couta_0cout),
	.combout(),
	.cout(wire_pad_cella_46cout[0:0]),
	.datad(wire_pad_cella_datad[46:46]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[46:46]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_46.extended_lut = "off",
		pad_cella_46.lut_mask = 64'h000000FF0000FF00,
		pad_cella_46.shared_arith = "off",
		pad_cella_46.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_47
	( 
	.cin(wire_pad_cella_46cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_47cout[0:0]),
	.datad(wire_pad_cella_datad[47:47]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[47:47]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_47.extended_lut = "off",
		pad_cella_47.lut_mask = 64'h000000FF0000FF00,
		pad_cella_47.shared_arith = "off",
		pad_cella_47.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_48
	( 
	.cin(wire_pad_cella_47cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_48cout[0:0]),
	.datad(wire_pad_cella_datad[48:48]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[48:48]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_48.extended_lut = "off",
		pad_cella_48.lut_mask = 64'h000000FF0000FF00,
		pad_cella_48.shared_arith = "off",
		pad_cella_48.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_49
	( 
	.cin(wire_pad_cella_48cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_49cout[0:0]),
	.datad(wire_pad_cella_datad[49:49]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[49:49]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_49.extended_lut = "off",
		pad_cella_49.lut_mask = 64'h000000FF0000FF00,
		pad_cella_49.shared_arith = "off",
		pad_cella_49.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_50
	( 
	.cin(wire_pad_cella_49cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_50cout[0:0]),
	.datad(wire_pad_cella_datad[50:50]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[50:50]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_50.extended_lut = "off",
		pad_cella_50.lut_mask = 64'h000000FF0000FF00,
		pad_cella_50.shared_arith = "off",
		pad_cella_50.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_51
	( 
	.cin(wire_pad_cella_50cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_51cout[0:0]),
	.datad(wire_pad_cella_datad[51:51]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[51:51]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_51.extended_lut = "off",
		pad_cella_51.lut_mask = 64'h000000FF0000FF00,
		pad_cella_51.shared_arith = "off",
		pad_cella_51.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_52
	( 
	.cin(wire_pad_cella_51cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_52cout[0:0]),
	.datad(wire_pad_cella_datad[52:52]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[52:52]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_52.extended_lut = "off",
		pad_cella_52.lut_mask = 64'h000000FF0000FF00,
		pad_cella_52.shared_arith = "off",
		pad_cella_52.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_53
	( 
	.cin(wire_pad_cella_52cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_53cout[0:0]),
	.datad(wire_pad_cella_datad[53:53]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[53:53]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_53.extended_lut = "off",
		pad_cella_53.lut_mask = 64'h000000FF0000FF00,
		pad_cella_53.shared_arith = "off",
		pad_cella_53.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_54
	( 
	.cin(wire_pad_cella_53cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_54cout[0:0]),
	.datad(wire_pad_cella_datad[54:54]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[54:54]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_54.extended_lut = "off",
		pad_cella_54.lut_mask = 64'h000000FF0000FF00,
		pad_cella_54.shared_arith = "off",
		pad_cella_54.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_55
	( 
	.cin(wire_pad_cella_54cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_55cout[0:0]),
	.datad(wire_pad_cella_datad[55:55]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[55:55]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_55.extended_lut = "off",
		pad_cella_55.lut_mask = 64'h000000FF0000FF00,
		pad_cella_55.shared_arith = "off",
		pad_cella_55.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_56
	( 
	.cin(wire_pad_cella_55cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_56cout[0:0]),
	.datad(wire_pad_cella_datad[56:56]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[56:56]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_56.extended_lut = "off",
		pad_cella_56.lut_mask = 64'h000000FF0000FF00,
		pad_cella_56.shared_arith = "off",
		pad_cella_56.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_57
	( 
	.cin(wire_pad_cella_56cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_57cout[0:0]),
	.datad(wire_pad_cella_datad[57:57]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[57:57]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_57.extended_lut = "off",
		pad_cella_57.lut_mask = 64'h000000FF0000FF00,
		pad_cella_57.shared_arith = "off",
		pad_cella_57.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_58
	( 
	.cin(wire_pad_cella_57cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_58cout[0:0]),
	.datad(wire_pad_cella_datad[58:58]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[58:58]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_58.extended_lut = "off",
		pad_cella_58.lut_mask = 64'h000000FF0000FF00,
		pad_cella_58.shared_arith = "off",
		pad_cella_58.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_59
	( 
	.cin(wire_pad_cella_58cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_59cout[0:0]),
	.datad(wire_pad_cella_datad[59:59]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[59:59]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_59.extended_lut = "off",
		pad_cella_59.lut_mask = 64'h000000FF0000FF00,
		pad_cella_59.shared_arith = "off",
		pad_cella_59.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_60
	( 
	.cin(wire_pad_cella_59cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_60cout[0:0]),
	.datad(wire_pad_cella_datad[60:60]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[60:60]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_60.extended_lut = "off",
		pad_cella_60.lut_mask = 64'h000000FF0000FF00,
		pad_cella_60.shared_arith = "off",
		pad_cella_60.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_61
	( 
	.cin(wire_pad_cella_60cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_61cout[0:0]),
	.datad(wire_pad_cella_datad[61:61]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[61:61]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_61.extended_lut = "off",
		pad_cella_61.lut_mask = 64'h000000FF0000FF00,
		pad_cella_61.shared_arith = "off",
		pad_cella_61.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_62
	( 
	.cin(wire_pad_cella_61cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_62cout[0:0]),
	.datad(wire_pad_cella_datad[62:62]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[62:62]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_62.extended_lut = "off",
		pad_cella_62.lut_mask = 64'h000000FF0000FF00,
		pad_cella_62.shared_arith = "off",
		pad_cella_62.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_63
	( 
	.cin(wire_pad_cella_62cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_63cout[0:0]),
	.datad(wire_pad_cella_datad[63:63]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[63:63]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_63.extended_lut = "off",
		pad_cella_63.lut_mask = 64'h000000FF0000FF00,
		pad_cella_63.shared_arith = "off",
		pad_cella_63.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_64
	( 
	.cin(wire_pad_cella_63cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_64cout[0:0]),
	.datad(wire_pad_cella_datad[64:64]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[64:64]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_64.extended_lut = "off",
		pad_cella_64.lut_mask = 64'h000000FF0000FF00,
		pad_cella_64.shared_arith = "off",
		pad_cella_64.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_65
	( 
	.cin(wire_pad_cella_64cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_65cout[0:0]),
	.datad(wire_pad_cella_datad[65:65]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[65:65]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_65.extended_lut = "off",
		pad_cella_65.lut_mask = 64'h000000FF0000FF00,
		pad_cella_65.shared_arith = "off",
		pad_cella_65.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_66
	( 
	.cin(wire_pad_cella_65cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_66cout[0:0]),
	.datad(wire_pad_cella_datad[66:66]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[66:66]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_66.extended_lut = "off",
		pad_cella_66.lut_mask = 64'h000000FF0000FF00,
		pad_cella_66.shared_arith = "off",
		pad_cella_66.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_67
	( 
	.cin(wire_pad_cella_66cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_67cout[0:0]),
	.datad(wire_pad_cella_datad[67:67]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[67:67]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_67.extended_lut = "off",
		pad_cella_67.lut_mask = 64'h000000FF0000FF00,
		pad_cella_67.shared_arith = "off",
		pad_cella_67.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_68
	( 
	.cin(wire_pad_cella_67cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_68cout[0:0]),
	.datad(wire_pad_cella_datad[68:68]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[68:68]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_68.extended_lut = "off",
		pad_cella_68.lut_mask = 64'h000000FF0000FF00,
		pad_cella_68.shared_arith = "off",
		pad_cella_68.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_69
	( 
	.cin(wire_pad_cella_68cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_69cout[0:0]),
	.datad(wire_pad_cella_datad[69:69]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[69:69]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_69.extended_lut = "off",
		pad_cella_69.lut_mask = 64'h000000FF0000FF00,
		pad_cella_69.shared_arith = "off",
		pad_cella_69.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_70
	( 
	.cin(wire_pad_cella_69cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_70cout[0:0]),
	.datad(wire_pad_cella_datad[70:70]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[70:70]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_70.extended_lut = "off",
		pad_cella_70.lut_mask = 64'h000000FF0000FF00,
		pad_cella_70.shared_arith = "off",
		pad_cella_70.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_71
	( 
	.cin(wire_pad_cella_70cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_71cout[0:0]),
	.datad(wire_pad_cella_datad[71:71]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[71:71]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_71.extended_lut = "off",
		pad_cella_71.lut_mask = 64'h000000FF0000FF00,
		pad_cella_71.shared_arith = "off",
		pad_cella_71.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_72
	( 
	.cin(wire_pad_cella_71cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_72cout[0:0]),
	.datad(wire_pad_cella_datad[72:72]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[72:72]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_72.extended_lut = "off",
		pad_cella_72.lut_mask = 64'h000000FF0000FF00,
		pad_cella_72.shared_arith = "off",
		pad_cella_72.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_73
	( 
	.cin(wire_pad_cella_72cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_73cout[0:0]),
	.datad(wire_pad_cella_datad[73:73]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[73:73]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_73.extended_lut = "off",
		pad_cella_73.lut_mask = 64'h000000FF0000FF00,
		pad_cella_73.shared_arith = "off",
		pad_cella_73.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_74
	( 
	.cin(wire_pad_cella_73cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_74cout[0:0]),
	.datad(wire_pad_cella_datad[74:74]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[74:74]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_74.extended_lut = "off",
		pad_cella_74.lut_mask = 64'h000000FF0000FF00,
		pad_cella_74.shared_arith = "off",
		pad_cella_74.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_75
	( 
	.cin(wire_pad_cella_74cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_75cout[0:0]),
	.datad(wire_pad_cella_datad[75:75]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[75:75]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_75.extended_lut = "off",
		pad_cella_75.lut_mask = 64'h000000FF0000FF00,
		pad_cella_75.shared_arith = "off",
		pad_cella_75.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_76
	( 
	.cin(wire_pad_cella_75cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_76cout[0:0]),
	.datad(wire_pad_cella_datad[76:76]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[76:76]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_76.extended_lut = "off",
		pad_cella_76.lut_mask = 64'h000000FF0000FF00,
		pad_cella_76.shared_arith = "off",
		pad_cella_76.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_77
	( 
	.cin(wire_pad_cella_76cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_77cout[0:0]),
	.datad(wire_pad_cella_datad[77:77]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[77:77]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_77.extended_lut = "off",
		pad_cella_77.lut_mask = 64'h000000FF0000FF00,
		pad_cella_77.shared_arith = "off",
		pad_cella_77.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_78
	( 
	.cin(wire_le_comb13_cout),
	.combout(),
	.cout(wire_pad_cella_78cout[0:0]),
	.datad(wire_pad_cella_datad[78:78]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[78:78]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_78.extended_lut = "off",
		pad_cella_78.lut_mask = 64'h000000FF0000FF00,
		pad_cella_78.shared_arith = "off",
		pad_cella_78.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_79
	( 
	.cin(wire_pad_cella_78cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_79cout[0:0]),
	.datad(wire_pad_cella_datad[79:79]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[79:79]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_79.extended_lut = "off",
		pad_cella_79.lut_mask = 64'h000000FF0000FF00,
		pad_cella_79.shared_arith = "off",
		pad_cella_79.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_80
	( 
	.cin(wire_pad_cella_79cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_80cout[0:0]),
	.datad(wire_pad_cella_datad[80:80]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[80:80]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_80.extended_lut = "off",
		pad_cella_80.lut_mask = 64'h000000FF0000FF00,
		pad_cella_80.shared_arith = "off",
		pad_cella_80.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_81
	( 
	.cin(wire_pad_cella_80cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_81cout[0:0]),
	.datad(wire_pad_cella_datad[81:81]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[81:81]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_81.extended_lut = "off",
		pad_cella_81.lut_mask = 64'h000000FF0000FF00,
		pad_cella_81.shared_arith = "off",
		pad_cella_81.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_82
	( 
	.cin(wire_pad_cella_81cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_82cout[0:0]),
	.datad(wire_pad_cella_datad[82:82]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[82:82]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_82.extended_lut = "off",
		pad_cella_82.lut_mask = 64'h000000FF0000FF00,
		pad_cella_82.shared_arith = "off",
		pad_cella_82.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_83
	( 
	.cin(wire_pad_cella_82cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_83cout[0:0]),
	.datad(wire_pad_cella_datad[83:83]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[83:83]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_83.extended_lut = "off",
		pad_cella_83.lut_mask = 64'h000000FF0000FF00,
		pad_cella_83.shared_arith = "off",
		pad_cella_83.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_84
	( 
	.cin(wire_pad_cella_83cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_84cout[0:0]),
	.datad(wire_pad_cella_datad[84:84]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[84:84]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_84.extended_lut = "off",
		pad_cella_84.lut_mask = 64'h000000FF0000FF00,
		pad_cella_84.shared_arith = "off",
		pad_cella_84.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_85
	( 
	.cin(wire_pad_cella_84cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_85cout[0:0]),
	.datad(wire_pad_cella_datad[85:85]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[85:85]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_85.extended_lut = "off",
		pad_cella_85.lut_mask = 64'h000000FF0000FF00,
		pad_cella_85.shared_arith = "off",
		pad_cella_85.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_86
	( 
	.cin(wire_pad_cella_85cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_86cout[0:0]),
	.datad(wire_pad_cella_datad[86:86]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[86:86]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_86.extended_lut = "off",
		pad_cella_86.lut_mask = 64'h000000FF0000FF00,
		pad_cella_86.shared_arith = "off",
		pad_cella_86.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_87
	( 
	.cin(wire_pad_cella_86cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_87cout[0:0]),
	.datad(wire_pad_cella_datad[87:87]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[87:87]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_87.extended_lut = "off",
		pad_cella_87.lut_mask = 64'h000000FF0000FF00,
		pad_cella_87.shared_arith = "off",
		pad_cella_87.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_88
	( 
	.cin(wire_pad_cella_87cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_88cout[0:0]),
	.datad(wire_pad_cella_datad[88:88]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[88:88]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_88.extended_lut = "off",
		pad_cella_88.lut_mask = 64'h000000FF0000FF00,
		pad_cella_88.shared_arith = "off",
		pad_cella_88.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_89
	( 
	.cin(wire_pad_cella_88cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_89cout[0:0]),
	.datad(wire_pad_cella_datad[89:89]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[89:89]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_89.extended_lut = "off",
		pad_cella_89.lut_mask = 64'h000000FF0000FF00,
		pad_cella_89.shared_arith = "off",
		pad_cella_89.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_90
	( 
	.cin(wire_pad_cella_89cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_90cout[0:0]),
	.datad(wire_pad_cella_datad[90:90]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[90:90]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_90.extended_lut = "off",
		pad_cella_90.lut_mask = 64'h000000FF0000FF00,
		pad_cella_90.shared_arith = "off",
		pad_cella_90.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_91
	( 
	.cin(wire_pad_cella_90cout[0:0]),
	.combout(),
	.cout(),
	.datad(wire_pad_cella_datad[91:91]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[91:91]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_91.extended_lut = "off",
		pad_cella_91.lut_mask = 64'h000000FF0000FF00,
		pad_cella_91.shared_arith = "off",
		pad_cella_91.lpm_type = "cyclonev_lcell_comb";
	assign
		wire_pad_cella_datad = {add_sub_cell_ffa};
	assign
		result = pad_cell_ffa[91:0];
endmodule //ALTFP_EXa_add_sub

//synthesis_resources = lut 194 reg 185 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  ALTFP_EXa_altmult_opt_csa1
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [91:0]  dataa;
	input   [91:0]  datab;
	output   [91:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [91:0]  dataa;
	tri0   [91:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [91:0]   wire_add_sub2_result;
	wire  [91:0]  result_w;

	ALTFP_EXa_add_sub   add_sub2
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.dataa(dataa),
	.datab(datab),
	.result(wire_add_sub2_result));
	assign
		result = result_w,
		result_w = wire_add_sub2_result;
endmodule //ALTFP_EXa_altmult_opt_csa1


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=31 cout dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=31 cout dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=32 LPM_WIDTHB=32 LPM_WIDTHP=64 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_mult 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_padd 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ cbx_util_mgl 2016:04:27:18:05:34:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  ALTFP_EXa_mult12
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [31:0]  dataa;
	input   [31:0]  datab;
	output   [63:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg  [63:0]  result_output_reg;
	wire [31:0]    dataa_wire;
	wire [31:0]    datab_wire;
	wire [63:0]    result_wire;


	// synopsys translate_off
	initial
		result_output_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			result_output_reg <= 64'b0;
		else
			if (clken == 1'b1)
				result_output_reg <= result_wire[63:0];

	assign dataa_wire = dataa;
	assign datab_wire = datab;
	assign result_wire = dataa_wire * datab_wire;
	assign result = ({result_output_reg});

endmodule //ALTFP_EXa_mult12


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=31 LPM_WIDTHB=30 LPM_WIDTHP=61 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_mult 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_padd 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ cbx_util_mgl 2016:04:27:18:05:34:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  ALTFP_EXa_mult123
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [30:0]  dataa;
	input   [29:0]  datab;
	output   [60:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg  [60:0]  result_output_reg;
	wire [30:0]    dataa_wire;
	wire [29:0]    datab_wire;
	wire [60:0]    result_wire;


	// synopsys translate_off
	initial
		result_output_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			result_output_reg <= 61'b0;
		else
			if (clken == 1'b1)
				result_output_reg <= result_wire[60:0];

	assign dataa_wire = dataa;
	assign datab_wire = datab;
	assign result_wire = dataa_wire * datab_wire;
	assign result = ({result_output_reg});

endmodule //ALTFP_EXa_mult123

//synthesis_resources = lut 256 reg 649 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  ALTFP_EXa_altmult_opt1
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [60:0]  dataa;
	input   [60:0]  datab;
	output   [121:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [91:0]   wire_sum_result;
	reg	[91:0]	car_two_adj_reg0;
	reg	[30:0]	lowest_bits_wi_reg0;
	reg	[30:0]	lowest_bits_wi_reg1;
	reg	[30:0]	lowest_bits_wi_reg2;
	reg	[61:0]	lsb_prod_wi_reg0;
	reg	[63:0]	mid_prod_wi_reg0;
	reg	[60:0]	msb_prod_wi_reg0;
	reg	[91:0]	sum_two_reg0;
	wire	[31:0]	wire_compress_a_result_int;
	wire	wire_compress_a_cout;
	wire	[30:0]	wire_compress_a_dataa;
	wire	[30:0]	wire_compress_a_datab;
	wire	[30:0]	wire_compress_a_result;
	wire	[31:0]	wire_compress_b_result_int;
	wire	wire_compress_b_cout;
	wire	[30:0]	wire_compress_b_dataa;
	wire	[30:0]	wire_compress_b_datab;
	wire	[30:0]	wire_compress_b_result;
	wire  [61:0]   wire_lsb_prod_result;
	wire  [31:0]   wire_mid_prod_dataa;
	wire  [31:0]   wire_mid_prod_datab;
	wire  [63:0]   wire_mid_prod_result;
	wire  [30:0]   wire_msb_prod_dataa;
	wire  [29:0]   wire_msb_prod_datab;
	wire  [60:0]   wire_msb_prod_result;
	wire  [91:0]  car_one;
	wire  [91:0]  car_one_adj;
	wire  [91:0]  car_two;
	wire  [91:0]  car_two_adj;
	wire  [91:0]  car_two_wo;
	wire  [30:0]  lowest_bits_wi;
	wire  [30:0]  lowest_bits_wo;
	wire  [61:0]  lsb_prod_wi;
	wire  [61:0]  lsb_prod_wo;
	wire  [63:0]  mid_prod_wi;
	wire  [63:0]  mid_prod_wo;
	wire  [60:0]  msb_prod_out;
	wire  [60:0]  msb_prod_wi;
	wire  [60:0]  msb_prod_wo;
	wire  [91:0]  neg_lsb;
	wire  [91:0]  neg_msb;
	wire  [91:0]  sum_one;
	wire  [91:0]  sum_two;
	wire  [91:0]  sum_two_wo;
	wire  [91:0]  vector1;
	wire  [91:0]  vector2;
	wire  [60:0]  wire_a;
	wire  [60:0]  wire_b;

	ALTFP_EXa_altmult_opt_csa1   sum
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.dataa(car_two_wo),
	.datab(sum_two_wo),
	.result(wire_sum_result));
	// synopsys translate_off
	initial
		car_two_adj_reg0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) car_two_adj_reg0 <= 92'b0;
		else if  (clken == 1'b1)   car_two_adj_reg0 <= car_two_adj;
	// synopsys translate_off
	initial
		lowest_bits_wi_reg0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) lowest_bits_wi_reg0 <= 31'b0;
		else if  (clken == 1'b1)   lowest_bits_wi_reg0 <= lowest_bits_wi;
	// synopsys translate_off
	initial
		lowest_bits_wi_reg1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) lowest_bits_wi_reg1 <= 31'b0;
		else if  (clken == 1'b1)   lowest_bits_wi_reg1 <= lowest_bits_wi_reg0;
	// synopsys translate_off
	initial
		lowest_bits_wi_reg2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) lowest_bits_wi_reg2 <= 31'b0;
		else if  (clken == 1'b1)   lowest_bits_wi_reg2 <= lowest_bits_wi_reg1;
	// synopsys translate_off
	initial
		lsb_prod_wi_reg0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) lsb_prod_wi_reg0 <= 62'b0;
		else if  (clken == 1'b1)   lsb_prod_wi_reg0 <= lsb_prod_wi;
	// synopsys translate_off
	initial
		mid_prod_wi_reg0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) mid_prod_wi_reg0 <= 64'b0;
		else if  (clken == 1'b1)   mid_prod_wi_reg0 <= mid_prod_wi;
	// synopsys translate_off
	initial
		msb_prod_wi_reg0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) msb_prod_wi_reg0 <= 61'b0;
		else if  (clken == 1'b1)   msb_prod_wi_reg0 <= msb_prod_wi;
	// synopsys translate_off
	initial
		sum_two_reg0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sum_two_reg0 <= 92'b0;
		else if  (clken == 1'b1)   sum_two_reg0 <= sum_two;
	assign
		wire_compress_a_result_int = wire_compress_a_dataa + wire_compress_a_datab;
	assign
		wire_compress_a_result = wire_compress_a_result_int[30:0],
		wire_compress_a_cout = wire_compress_a_result_int[31:31];
	assign
		wire_compress_a_dataa = {1'b0, wire_a[60:31]},
		wire_compress_a_datab = wire_a[30:0];
	assign
		wire_compress_b_result_int = wire_compress_b_dataa + wire_compress_b_datab;
	assign
		wire_compress_b_result = wire_compress_b_result_int[30:0],
		wire_compress_b_cout = wire_compress_b_result_int[31:31];
	assign
		wire_compress_b_dataa = {1'b0, wire_b[60:31]},
		wire_compress_b_datab = wire_b[30:0];
	ALTFP_EXa_mult1   lsb_prod
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.dataa(wire_a[30:0]),
	.datab(wire_b[30:0]),
	.result(wire_lsb_prod_result));
	ALTFP_EXa_mult12   mid_prod
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.dataa({wire_compress_a_cout, wire_compress_a_result}),
	.datab({wire_compress_b_cout, wire_compress_b_result}),
	.result(wire_mid_prod_result));
	ALTFP_EXa_mult123   msb_prod
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.dataa({1'b0, wire_a[60:31]}),
	.datab(wire_b[60:31]),
	.result(wire_msb_prod_result));
	assign
		car_one = {(((vector2[91] & neg_msb[91]) | (vector2[91] & neg_lsb[91])) | (neg_msb[91] & neg_lsb[91])), (((vector2[90] & neg_msb[90]) | (vector2[90] & neg_lsb[90])) | (neg_msb[90] & neg_lsb[90])), (((vector2[89] & neg_msb[89]) | (vector2[89] & neg_lsb[89])) | (neg_msb[89] & neg_lsb[89])), (((vector2[88] & neg_msb[88]) | (vector2[88] & neg_lsb[88])) | (neg_msb[88] & neg_lsb[88])), (((vector2[87] & neg_msb[87]) | (vector2[87] & neg_lsb[87])) | (neg_msb[87] & neg_lsb[87])), (((vector2[86] & neg_msb[86]) | (vector2[86] & neg_lsb[86])) | (neg_msb[86] & neg_lsb[86])), (((vector2[85] & neg_msb[85]) | (vector2[85] & neg_lsb[85])) | (neg_msb[85] & neg_lsb[85])), (((vector2[84] & neg_msb[84]) | (vector2[84] & neg_lsb[84])) | (neg_msb[84] & neg_lsb[84])), (((vector2[83] & neg_msb[83]) | (vector2[83] & neg_lsb[83])) | (neg_msb[83] & neg_lsb[83])), (((vector2[82] & neg_msb[82]) | (vector2[82] & neg_lsb[82])) | (neg_msb[82] & neg_lsb[82])), (((vector2[81] & neg_msb[81]) | (vector2[81] & neg_lsb[81])) | (neg_msb[81] & neg_lsb[81])), (((vector2[80] & neg_msb[80]) | (vector2[80] & neg_lsb[80])) | (neg_msb[80] & neg_lsb[80])), (((vector2[79] & neg_msb[79]) | (vector2[79] & neg_lsb[79])) | (neg_msb[79] & neg_lsb[79])), (((vector2[78] & neg_msb[78]) | (vector2[78] & neg_lsb[78])) | (neg_msb[78] & neg_lsb[78])), (((vector2[77] & neg_msb[77]) | (vector2[77] & neg_lsb[77])) | (neg_msb[77] & neg_lsb[77])), (((vector2[76] & neg_msb[76]) | (vector2[76] & neg_lsb[76])) | (neg_msb[76] & neg_lsb[76])), (((vector2[75] & neg_msb[75]) | (vector2[75] & neg_lsb[75])) | (neg_msb[75] & neg_lsb[75])), (((vector2[74] & neg_msb[74]) | (vector2[74] & neg_lsb[74])) | (neg_msb[74] & neg_lsb[74])), (((vector2[73] & neg_msb[73]) | (vector2[73] & neg_lsb[73])) | (neg_msb[73] & neg_lsb[73])), (((vector2[72] & neg_msb[72]) | (vector2[72] & neg_lsb[72])) | (neg_msb[72] & neg_lsb[72])), (((vector2[71] & neg_msb[71]) | (vector2[71] & neg_lsb[71])) | (neg_msb[71] & neg_lsb[71])), (((vector2[70] & neg_msb[70]) | (vector2[70] & neg_lsb[70])) | (neg_msb[70] & neg_lsb[70]
)), (((vector2[69] & neg_msb[69]) | (vector2[69] & neg_lsb[69])) | (neg_msb[69] & neg_lsb[69])), (((vector2[68] & neg_msb[68]) | (vector2[68] & neg_lsb[68])) | (neg_msb[68] & neg_lsb[68])), (((vector2[67] & neg_msb[67]) | (vector2[67] & neg_lsb[67])) | (neg_msb[67] & neg_lsb[67])), (((vector2[66] & neg_msb[66]) | (vector2[66] & neg_lsb[66])) | (neg_msb[66] & neg_lsb[66])), (((vector2[65] & neg_msb[65]) | (vector2[65] & neg_lsb[65])) | (neg_msb[65] & neg_lsb[65])), (((vector2[64] & neg_msb[64]) | (vector2[64] & neg_lsb[64])) | (neg_msb[64] & neg_lsb[64])), (((vector2[63] & neg_msb[63]) | (vector2[63] & neg_lsb[63])) | (neg_msb[63] & neg_lsb[63])), (((vector2[62] & neg_msb[62]) | (vector2[62] & neg_lsb[62])) | (neg_msb[62] & neg_lsb[62])), (((vector2[61] & neg_msb[61]) | (vector2[61] & neg_lsb[61])) | (neg_msb[61] & neg_lsb[61])), (((vector2[60] & neg_msb[60]) | (vector2[60] & neg_lsb[60])) | (neg_msb[60] & neg_lsb[60])), (((vector2[59] & neg_msb[59]) | (vector2[59] & neg_lsb[59])) | (neg_msb[59] & neg_lsb[59])), (((vector2[58] & neg_msb[58]) | (vector2[58] & neg_lsb[58])) | (neg_msb[58] & neg_lsb[58])), (((vector2[57] & neg_msb[57]) | (vector2[57] & neg_lsb[57])) | (neg_msb[57] & neg_lsb[57])), (((vector2[56] & neg_msb[56]) | (vector2[56] & neg_lsb[56])) | (neg_msb[56] & neg_lsb[56])), (((vector2[55] & neg_msb[55]) | (vector2[55] & neg_lsb[55])) | (neg_msb[55] & neg_lsb[55])), (((vector2[54] & neg_msb[54]) | (vector2[54] & neg_lsb[54])) | (neg_msb[54] & neg_lsb[54])), (((vector2[53] & neg_msb[53]) | (vector2[53] & neg_lsb[53])) | (neg_msb[53] & neg_lsb[53])), (((vector2[52] & neg_msb[52]) | (vector2[52] & neg_lsb[52])) | (neg_msb[52] & neg_lsb[52])), (((vector2[51] & neg_msb[51]) | (vector2[51] & neg_lsb[51])) | (neg_msb[51] & neg_lsb[51])), (((vector2[50] & neg_msb[50]) | (vector2[50] & neg_lsb[50])) | (neg_msb[50] & neg_lsb[50])), (((vector2[49] & neg_msb[49]) | (vector2[49] & neg_lsb[49])) | (neg_msb[49] & neg_lsb[49])), (((vector2[48] & neg_msb[48]) | (vector2[48] & neg_lsb[48])) | (neg_msb[48] & neg_lsb[48]))
, (((vector2[47] & neg_msb[47]) | (vector2[47] & neg_lsb[47])) | (neg_msb[47] & neg_lsb[47])), (((vector2[46] & neg_msb[46]) | (vector2[46] & neg_lsb[46])) | (neg_msb[46] & neg_lsb[46])), (((vector2[45] & neg_msb[45]) | (vector2[45] & neg_lsb[45])) | (neg_msb[45] & neg_lsb[45])), (((vector2[44] & neg_msb[44]) | (vector2[44] & neg_lsb[44])) | (neg_msb[44] & neg_lsb[44])), (((vector2[43] & neg_msb[43]) | (vector2[43] & neg_lsb[43])) | (neg_msb[43] & neg_lsb[43])), (((vector2[42] & neg_msb[42]) | (vector2[42] & neg_lsb[42])) | (neg_msb[42] & neg_lsb[42])), (((vector2[41] & neg_msb[41]) | (vector2[41] & neg_lsb[41])) | (neg_msb[41] & neg_lsb[41])), (((vector2[40] & neg_msb[40]) | (vector2[40] & neg_lsb[40])) | (neg_msb[40] & neg_lsb[40])), (((vector2[39] & neg_msb[39]) | (vector2[39] & neg_lsb[39])) | (neg_msb[39] & neg_lsb[39])), (((vector2[38] & neg_msb[38]) | (vector2[38] & neg_lsb[38])) | (neg_msb[38] & neg_lsb[38])), (((vector2[37] & neg_msb[37]) | (vector2[37] & neg_lsb[37])) | (neg_msb[37] & neg_lsb[37])), (((vector2[36] & neg_msb[36]) | (vector2[36] & neg_lsb[36])) | (neg_msb[36] & neg_lsb[36])), (((vector2[35] & neg_msb[35]) | (vector2[35] & neg_lsb[35])) | (neg_msb[35] & neg_lsb[35])), (((vector2[34] & neg_msb[34]) | (vector2[34] & neg_lsb[34])) | (neg_msb[34] & neg_lsb[34])), (((vector2[33] & neg_msb[33]) | (vector2[33] & neg_lsb[33])) | (neg_msb[33] & neg_lsb[33])), (((vector2[32] & neg_msb[32]) | (vector2[32] & neg_lsb[32])) | (neg_msb[32] & neg_lsb[32])), (((vector2[31] & neg_msb[31]) | (vector2[31] & neg_lsb[31])) | (neg_msb[31] & neg_lsb[31])), (((vector2[30] & neg_msb[30]) | (vector2[30] & neg_lsb[30])) | (neg_msb[30] & neg_lsb[30])), (((vector2[29] & neg_msb[29]) | (vector2[29] & neg_lsb[29])) | (neg_msb[29] & neg_lsb[29])), (((vector2[28] & neg_msb[28]) | (vector2[28] & neg_lsb[28])) | (neg_msb[28] & neg_lsb[28])), (((vector2[27] & neg_msb[27]) | (vector2[27] & neg_lsb[27])) | (neg_msb[27] & neg_lsb[27])), (((vector2[26] & neg_msb[26]) | (vector2[26] & neg_lsb[26])) | (neg_msb[26] & neg_lsb[26])), 
(((vector2[25] & neg_msb[25]) | (vector2[25] & neg_lsb[25])) | (neg_msb[25] & neg_lsb[25])), (((vector2[24] & neg_msb[24]) | (vector2[24] & neg_lsb[24])) | (neg_msb[24] & neg_lsb[24])), (((vector2[23] & neg_msb[23]) | (vector2[23] & neg_lsb[23])) | (neg_msb[23] & neg_lsb[23])), (((vector2[22] & neg_msb[22]) | (vector2[22] & neg_lsb[22])) | (neg_msb[22] & neg_lsb[22])), (((vector2[21] & neg_msb[21]) | (vector2[21] & neg_lsb[21])) | (neg_msb[21] & neg_lsb[21])), (((vector2[20] & neg_msb[20]) | (vector2[20] & neg_lsb[20])) | (neg_msb[20] & neg_lsb[20])), (((vector2[19] & neg_msb[19]) | (vector2[19] & neg_lsb[19])) | (neg_msb[19] & neg_lsb[19])), (((vector2[18] & neg_msb[18]) | (vector2[18] & neg_lsb[18])) | (neg_msb[18] & neg_lsb[18])), (((vector2[17] & neg_msb[17]) | (vector2[17] & neg_lsb[17])) | (neg_msb[17] & neg_lsb[17])), (((vector2[16] & neg_msb[16]) | (vector2[16] & neg_lsb[16])) | (neg_msb[16] & neg_lsb[16])), (((vector2[15] & neg_msb[15]) | (vector2[15] & neg_lsb[15])) | (neg_msb[15] & neg_lsb[15])), (((vector2[14] & neg_msb[14]) | (vector2[14] & neg_lsb[14])) | (neg_msb[14] & neg_lsb[14])), (((vector2[13] & neg_msb[13]) | (vector2[13] & neg_lsb[13])) | (neg_msb[13] & neg_lsb[13])), (((vector2[12] & neg_msb[12]) | (vector2[12] & neg_lsb[12])) | (neg_msb[12] & neg_lsb[12])), (((vector2[11] & neg_msb[11]) | (vector2[11] & neg_lsb[11])) | (neg_msb[11] & neg_lsb[11])), (((vector2[10] & neg_msb[10]) | (vector2[10] & neg_lsb[10])) | (neg_msb[10] & neg_lsb[10])), (((vector2[9] & neg_msb[9]) | (vector2[9] & neg_lsb[9])) | (neg_msb[9] & neg_lsb[9])), (((vector2[8] & neg_msb[8]) | (vector2[8] & neg_lsb[8])) | (neg_msb[8] & neg_lsb[8])), (((vector2[7] & neg_msb[7]) | (vector2[7] & neg_lsb[7])) | (neg_msb[7] & neg_lsb[7])), (((vector2[6] & neg_msb[6]) | (vector2[6] & neg_lsb[6])) | (neg_msb[6] & neg_lsb[6])), (((vector2[5] & neg_msb[5]) | (vector2[5] & neg_lsb[5])) | (neg_msb[5] & neg_lsb[5])), (((vector2[4] & neg_msb[4]) | (vector2[4] & neg_lsb[4])) | (neg_msb[4] & neg_lsb[4])), (((vector2[3] & neg_msb[3]) | (vector2[3]
 & neg_lsb[3])) | (neg_msb[3] & neg_lsb[3])), (((vector2[2] & neg_msb[2]) | (vector2[2] & neg_lsb[2])) | (neg_msb[2] & neg_lsb[2])), (((vector2[1] & neg_msb[1]) | (vector2[1] & neg_lsb[1])) | (neg_msb[1] & neg_lsb[1])), (((vector2[0] & neg_msb[0]) | (vector2[0] & neg_lsb[0])) | (neg_msb[0] & neg_lsb[0]))},
		car_one_adj = {car_one[90:0], 1'b1},
		car_two = {(((vector1[91] & sum_one[91]) | (vector1[91] & car_one_adj[91])) | (sum_one[91] & car_one_adj[91])), (((vector1[90] & sum_one[90]) | (vector1[90] & car_one_adj[90])) | (sum_one[90] & car_one_adj[90])), (((vector1[89] & sum_one[89]) | (vector1[89] & car_one_adj[89])) | (sum_one[89] & car_one_adj[89])), (((vector1[88] & sum_one[88]) | (vector1[88] & car_one_adj[88])) | (sum_one[88] & car_one_adj[88])), (((vector1[87] & sum_one[87]) | (vector1[87] & car_one_adj[87])) | (sum_one[87] & car_one_adj[87])), (((vector1[86] & sum_one[86]) | (vector1[86] & car_one_adj[86])) | (sum_one[86] & car_one_adj[86])), (((vector1[85] & sum_one[85]) | (vector1[85] & car_one_adj[85])) | (sum_one[85] & car_one_adj[85])), (((vector1[84] & sum_one[84]) | (vector1[84] & car_one_adj[84])) | (sum_one[84] & car_one_adj[84])), (((vector1[83] & sum_one[83]) | (vector1[83] & car_one_adj[83])) | (sum_one[83] & car_one_adj[83])), (((vector1[82] & sum_one[82]) | (vector1[82] & car_one_adj[82])) | (sum_one[82] & car_one_adj[82])), (((vector1[81] & sum_one[81]) | (vector1[81] & car_one_adj[81])) | (sum_one[81] & car_one_adj[81])), (((vector1[80] & sum_one[80]) | (vector1[80] & car_one_adj[80])) | (sum_one[80] & car_one_adj[80])), (((vector1[79] & sum_one[79]) | (vector1[79] & car_one_adj[79])) | (sum_one[79] & car_one_adj[79])), (((vector1[78] & sum_one[78]) | (vector1[78] & car_one_adj[78])) | (sum_one[78] & car_one_adj[78])), (((vector1[77] & sum_one[77]) | (vector1[77] & car_one_adj[77])) | (sum_one[77] & car_one_adj[77])), (((vector1[76] & sum_one[76]) | (vector1[76] & car_one_adj[76])) | (sum_one[76] & car_one_adj[76])), (((vector1[75] & sum_one[75]) | (vector1[75] & car_one_adj[75])) | (sum_one[75] & car_one_adj[75])), (((vector1[74] & sum_one[74]) | (vector1[74] & car_one_adj[74])) | (sum_one[74] & car_one_adj[74])), (((vector1[73] & sum_one[73]) | (vector1[73] & car_one_adj[73])) | (sum_one[73] & car_one_adj[73])), (((vector1[72] & sum_one[72]) | (vector1[72] & car_one_adj[72])) | (sum_one[72] & car_one_adj[72])), (((vector1[71] 
& sum_one[71]) | (vector1[71] & car_one_adj[71])) | (sum_one[71] & car_one_adj[71])), (((vector1[70] & sum_one[70]) | (vector1[70] & car_one_adj[70])) | (sum_one[70] & car_one_adj[70])), (((vector1[69] & sum_one[69]) | (vector1[69] & car_one_adj[69])) | (sum_one[69] & car_one_adj[69])), (((vector1[68] & sum_one[68]) | (vector1[68] & car_one_adj[68])) | (sum_one[68] & car_one_adj[68])), (((vector1[67] & sum_one[67]) | (vector1[67] & car_one_adj[67])) | (sum_one[67] & car_one_adj[67])), (((vector1[66] & sum_one[66]) | (vector1[66] & car_one_adj[66])) | (sum_one[66] & car_one_adj[66])), (((vector1[65] & sum_one[65]) | (vector1[65] & car_one_adj[65])) | (sum_one[65] & car_one_adj[65])), (((vector1[64] & sum_one[64]) | (vector1[64] & car_one_adj[64])) | (sum_one[64] & car_one_adj[64])), (((vector1[63] & sum_one[63]) | (vector1[63] & car_one_adj[63])) | (sum_one[63] & car_one_adj[63])), (((vector1[62] & sum_one[62]) | (vector1[62] & car_one_adj[62])) | (sum_one[62] & car_one_adj[62])), (((vector1[61] & sum_one[61]) | (vector1[61] & car_one_adj[61])) | (sum_one[61] & car_one_adj[61])), (((vector1[60] & sum_one[60]) | (vector1[60] & car_one_adj[60])) | (sum_one[60] & car_one_adj[60])), (((vector1[59] & sum_one[59]) | (vector1[59] & car_one_adj[59])) | (sum_one[59] & car_one_adj[59])), (((vector1[58] & sum_one[58]) | (vector1[58] & car_one_adj[58])) | (sum_one[58] & car_one_adj[58])), (((vector1[57] & sum_one[57]) | (vector1[57] & car_one_adj[57])) | (sum_one[57] & car_one_adj[57])), (((vector1[56] & sum_one[56]) | (vector1[56] & car_one_adj[56])) | (sum_one[56] & car_one_adj[56])), (((vector1[55] & sum_one[55]) | (vector1[55] & car_one_adj[55])) | (sum_one[55] & car_one_adj[55])), (((vector1[54] & sum_one[54]) | (vector1[54] & car_one_adj[54])) | (sum_one[54] & car_one_adj[54])), (((vector1[53] & sum_one[53]) | (vector1[53] & car_one_adj[53])) | (sum_one[53] & car_one_adj[53])), (((vector1[52] & sum_one[52]) | (vector1[52] & car_one_adj[52])) | (sum_one[52] & car_one_adj[52])), (((vector1[51] & sum_one[51]) | (vector1[51]
 & car_one_adj[51])) | (sum_one[51] & car_one_adj[51])), (((vector1[50] & sum_one[50]) | (vector1[50] & car_one_adj[50])) | (sum_one[50] & car_one_adj[50])), (((vector1[49] & sum_one[49]) | (vector1[49] & car_one_adj[49])) | (sum_one[49] & car_one_adj[49])), (((vector1[48] & sum_one[48]) | (vector1[48] & car_one_adj[48])) | (sum_one[48] & car_one_adj[48])), (((vector1[47] & sum_one[47]) | (vector1[47] & car_one_adj[47])) | (sum_one[47] & car_one_adj[47])), (((vector1[46] & sum_one[46]) | (vector1[46] & car_one_adj[46])) | (sum_one[46] & car_one_adj[46])), (((vector1[45] & sum_one[45]) | (vector1[45] & car_one_adj[45])) | (sum_one[45] & car_one_adj[45])), (((vector1[44] & sum_one[44]) | (vector1[44] & car_one_adj[44])) | (sum_one[44] & car_one_adj[44])), (((vector1[43] & sum_one[43]) | (vector1[43] & car_one_adj[43])) | (sum_one[43] & car_one_adj[43])), (((vector1[42] & sum_one[42]) | (vector1[42] & car_one_adj[42])) | (sum_one[42] & car_one_adj[42])), (((vector1[41] & sum_one[41]) | (vector1[41] & car_one_adj[41])) | (sum_one[41] & car_one_adj[41])), (((vector1[40] & sum_one[40]) | (vector1[40] & car_one_adj[40])) | (sum_one[40] & car_one_adj[40])), (((vector1[39] & sum_one[39]) | (vector1[39] & car_one_adj[39])) | (sum_one[39] & car_one_adj[39])), (((vector1[38] & sum_one[38]) | (vector1[38] & car_one_adj[38])) | (sum_one[38] & car_one_adj[38])), (((vector1[37] & sum_one[37]) | (vector1[37] & car_one_adj[37])) | (sum_one[37] & car_one_adj[37])), (((vector1[36] & sum_one[36]) | (vector1[36] & car_one_adj[36])) | (sum_one[36] & car_one_adj[36])), (((vector1[35] & sum_one[35]) | (vector1[35] & car_one_adj[35])) | (sum_one[35] & car_one_adj[35])), (((vector1[34] & sum_one[34]) | (vector1[34] & car_one_adj[34])) | (sum_one[34] & car_one_adj[34])), (((vector1[33] & sum_one[33]) | (vector1[33] & car_one_adj[33])) | (sum_one[33] & car_one_adj[33])), (((vector1[32] & sum_one[32]) | (vector1[32] & car_one_adj[32])) | (sum_one[32] & car_one_adj[32])), (((vector1[31] & sum_one[31]) | (vector1[31] & car_one_adj[31])) | (sum_one[31]
 & car_one_adj[31])), (((vector1[30] & sum_one[30]) | (vector1[30] & car_one_adj[30])) | (sum_one[30] & car_one_adj[30])), (((vector1[29] & sum_one[29]) | (vector1[29] & car_one_adj[29])) | (sum_one[29] & car_one_adj[29])), (((vector1[28] & sum_one[28]) | (vector1[28] & car_one_adj[28])) | (sum_one[28] & car_one_adj[28])), (((vector1[27] & sum_one[27]) | (vector1[27] & car_one_adj[27])) | (sum_one[27] & car_one_adj[27])), (((vector1[26] & sum_one[26]) | (vector1[26] & car_one_adj[26])) | (sum_one[26] & car_one_adj[26])), (((vector1[25] & sum_one[25]) | (vector1[25] & car_one_adj[25])) | (sum_one[25] & car_one_adj[25])), (((vector1[24] & sum_one[24]) | (vector1[24] & car_one_adj[24])) | (sum_one[24] & car_one_adj[24])), (((vector1[23] & sum_one[23]) | (vector1[23] & car_one_adj[23])) | (sum_one[23] & car_one_adj[23])), (((vector1[22] & sum_one[22]) | (vector1[22] & car_one_adj[22])) | (sum_one[22] & car_one_adj[22])), (((vector1[21] & sum_one[21]) | (vector1[21] & car_one_adj[21])) | (sum_one[21] & car_one_adj[21])), (((vector1[20] & sum_one[20]) | (vector1[20] & car_one_adj[20])) | (sum_one[20] & car_one_adj[20])), (((vector1[19] & sum_one[19]) | (vector1[19] & car_one_adj[19])) | (sum_one[19] & car_one_adj[19])), (((vector1[18] & sum_one[18]) | (vector1[18] & car_one_adj[18])) | (sum_one[18] & car_one_adj[18])), (((vector1[17] & sum_one[17]) | (vector1[17] & car_one_adj[17])) | (sum_one[17] & car_one_adj[17])), (((vector1[16] & sum_one[16]) | (vector1[16] & car_one_adj[16])) | (sum_one[16] & car_one_adj[16])), (((vector1[15] & sum_one[15]) | (vector1[15] & car_one_adj[15])) | (sum_one[15] & car_one_adj[15])), (((vector1[14] & sum_one[14]) | (vector1[14] & car_one_adj[14])) | (sum_one[14] & car_one_adj[14])), (((vector1[13] & sum_one[13]) | (vector1[13] & car_one_adj[13])) | (sum_one[13] & car_one_adj[13])), (((vector1[12] & sum_one[12]) | (vector1[12] & car_one_adj[12])) | (sum_one[12] & car_one_adj[12])), (((vector1[11] & sum_one[11]) | (vector1[11] & car_one_adj[11])) | (sum_one[11] & car_one_adj[11])), (((vector1[10]
 & sum_one[10]) | (vector1[10] & car_one_adj[10])) | (sum_one[10] & car_one_adj[10])), (((vector1[9] & sum_one[9]) | (vector1[9] & car_one_adj[9])) | (sum_one[9] & car_one_adj[9])), (((vector1[8] & sum_one[8]) | (vector1[8] & car_one_adj[8])) | (sum_one[8] & car_one_adj[8])), (((vector1[7] & sum_one[7]) | (vector1[7] & car_one_adj[7])) | (sum_one[7] & car_one_adj[7])), (((vector1[6] & sum_one[6]) | (vector1[6] & car_one_adj[6])) | (sum_one[6] & car_one_adj[6])), (((vector1[5] & sum_one[5]) | (vector1[5] & car_one_adj[5])) | (sum_one[5] & car_one_adj[5])), (((vector1[4] & sum_one[4]) | (vector1[4] & car_one_adj[4])) | (sum_one[4] & car_one_adj[4])), (((vector1[3] & sum_one[3]) | (vector1[3] & car_one_adj[3])) | (sum_one[3] & car_one_adj[3])), (((vector1[2] & sum_one[2]) | (vector1[2] & car_one_adj[2])) | (sum_one[2] & car_one_adj[2])), (((vector1[1] & sum_one[1]) | (vector1[1] & car_one_adj[1])) | (sum_one[1] & car_one_adj[1])), (((vector1[0] & sum_one[0]) | (vector1[0] & car_one_adj[0])) | (sum_one[0] & car_one_adj[0]))},
		car_two_adj = {car_two[90:0], 1'b1},
		car_two_wo = car_two_adj_reg0,
		lowest_bits_wi = lsb_prod_wo[30:0],
		lowest_bits_wo = lowest_bits_wi_reg2,
		lsb_prod_wi = wire_lsb_prod_result,
		lsb_prod_wo = lsb_prod_wi_reg0,
		mid_prod_wi = wire_mid_prod_result,
		mid_prod_wo = mid_prod_wi_reg0,
		msb_prod_out = wire_msb_prod_result,
		msb_prod_wi = msb_prod_out,
		msb_prod_wo = msb_prod_wi_reg0,
		neg_lsb = {{30{1'b1}}, (~ lsb_prod_wo[61]), (~ lsb_prod_wo[60]), (~ lsb_prod_wo[59]), (~ lsb_prod_wo[58]), (~ lsb_prod_wo[57]), (~ lsb_prod_wo[56]), (~ lsb_prod_wo[55]), (~ lsb_prod_wo[54]), (~ lsb_prod_wo[53]), (~ lsb_prod_wo[52]), (~ lsb_prod_wo[51]), (~ lsb_prod_wo[50]), (~ lsb_prod_wo[49]), (~ lsb_prod_wo[48]), (~ lsb_prod_wo[47]), (~ lsb_prod_wo[46]), (~ lsb_prod_wo[45]), (~ lsb_prod_wo[44]), (~ lsb_prod_wo[43]), (~ lsb_prod_wo[42]), (~ lsb_prod_wo[41]), (~ lsb_prod_wo[40]), (~ lsb_prod_wo[39]), (~ lsb_prod_wo[38]), (~ lsb_prod_wo[37]), (~ lsb_prod_wo[36]), (~ lsb_prod_wo[35]), (~ lsb_prod_wo[34]), (~ lsb_prod_wo[33]), (~ lsb_prod_wo[32]), (~ lsb_prod_wo[31]), (~ lsb_prod_wo[30]), (~ lsb_prod_wo[29]), (~ lsb_prod_wo[28]), (~ lsb_prod_wo[27]), (~ lsb_prod_wo[26]), (~ lsb_prod_wo[25]), (~ lsb_prod_wo[24]), (~ lsb_prod_wo[23]), (~ lsb_prod_wo[22]), (~ lsb_prod_wo[21]), (~ lsb_prod_wo[20]), (~ lsb_prod_wo[19]), (~ lsb_prod_wo[18]), (~ lsb_prod_wo[17]), (~ lsb_prod_wo[16]), (~ lsb_prod_wo[15]), (~ lsb_prod_wo[14]), (~ lsb_prod_wo[13]), (~ lsb_prod_wo[12]), (~ lsb_prod_wo[11]), (~ lsb_prod_wo[10]), (~ lsb_prod_wo[9]), (~ lsb_prod_wo[8]), (~ lsb_prod_wo[7]), (~ lsb_prod_wo[6]), (~ lsb_prod_wo[5]), (~ lsb_prod_wo[4]), (~ lsb_prod_wo[3]), (~ lsb_prod_wo[2]), (~ lsb_prod_wo[1]), (~ lsb_prod_wo[0])},
		neg_msb = {{31{1'b1}}, (~ msb_prod_wo[60]), (~ msb_prod_wo[59]), (~ msb_prod_wo[58]), (~ msb_prod_wo[57]), (~ msb_prod_wo[56]), (~ msb_prod_wo[55]), (~ msb_prod_wo[54]), (~ msb_prod_wo[53]), (~ msb_prod_wo[52]), (~ msb_prod_wo[51]), (~ msb_prod_wo[50]), (~ msb_prod_wo[49]), (~ msb_prod_wo[48]), (~ msb_prod_wo[47]), (~ msb_prod_wo[46]), (~ msb_prod_wo[45]), (~ msb_prod_wo[44]), (~ msb_prod_wo[43]), (~ msb_prod_wo[42]), (~ msb_prod_wo[41]), (~ msb_prod_wo[40]), (~ msb_prod_wo[39]), (~ msb_prod_wo[38]), (~ msb_prod_wo[37]), (~ msb_prod_wo[36]), (~ msb_prod_wo[35]), (~ msb_prod_wo[34]), (~ msb_prod_wo[33]), (~ msb_prod_wo[32]), (~ msb_prod_wo[31]), (~ msb_prod_wo[30]), (~ msb_prod_wo[29]), (~ msb_prod_wo[28]), (~ msb_prod_wo[27]), (~ msb_prod_wo[26]), (~ msb_prod_wo[25]), (~ msb_prod_wo[24]), (~ msb_prod_wo[23]), (~ msb_prod_wo[22]), (~ msb_prod_wo[21]), (~ msb_prod_wo[20]), (~ msb_prod_wo[19]), (~ msb_prod_wo[18]), (~ msb_prod_wo[17]), (~ msb_prod_wo[16]), (~ msb_prod_wo[15]), (~ msb_prod_wo[14]), (~ msb_prod_wo[13]), (~ msb_prod_wo[12]), (~ msb_prod_wo[11]), (~ msb_prod_wo[10]), (~ msb_prod_wo[9]), (~ msb_prod_wo[8]), (~ msb_prod_wo[7]), (~ msb_prod_wo[6]), (~ msb_prod_wo[5]), (~ msb_prod_wo[4]), (~ msb_prod_wo[3]), (~ msb_prod_wo[2]), (~ msb_prod_wo[1]), (~ msb_prod_wo[0])},
		result = {wire_sum_result[90:0], lowest_bits_wo},
		sum_one = {((vector2[91] ^ neg_msb[91]) ^ neg_lsb[91]), ((vector2[90] ^ neg_msb[90]) ^ neg_lsb[90]), ((vector2[89] ^ neg_msb[89]) ^ neg_lsb[89]), ((vector2[88] ^ neg_msb[88]) ^ neg_lsb[88]), ((vector2[87] ^ neg_msb[87]) ^ neg_lsb[87]), ((vector2[86] ^ neg_msb[86]) ^ neg_lsb[86]), ((vector2[85] ^ neg_msb[85]) ^ neg_lsb[85]), ((vector2[84] ^ neg_msb[84]) ^ neg_lsb[84]), ((vector2[83] ^ neg_msb[83]) ^ neg_lsb[83]), ((vector2[82] ^ neg_msb[82]) ^ neg_lsb[82]), ((vector2[81] ^ neg_msb[81]) ^ neg_lsb[81]), ((vector2[80] ^ neg_msb[80]) ^ neg_lsb[80]), ((vector2[79] ^ neg_msb[79]) ^ neg_lsb[79]), ((vector2[78] ^ neg_msb[78]) ^ neg_lsb[78]), ((vector2[77] ^ neg_msb[77]) ^ neg_lsb[77]), ((vector2[76] ^ neg_msb[76]) ^ neg_lsb[76]), ((vector2[75] ^ neg_msb[75]) ^ neg_lsb[75]), ((vector2[74] ^ neg_msb[74]) ^ neg_lsb[74]), ((vector2[73] ^ neg_msb[73]) ^ neg_lsb[73]), ((vector2[72] ^ neg_msb[72]) ^ neg_lsb[72]), ((vector2[71] ^ neg_msb[71]) ^ neg_lsb[71]), ((vector2[70] ^ neg_msb[70]) ^ neg_lsb[70]), ((vector2[69] ^ neg_msb[69]) ^ neg_lsb[69]), ((vector2[68] ^ neg_msb[68]) ^ neg_lsb[68]), ((vector2[67] ^ neg_msb[67]) ^ neg_lsb[67]), ((vector2[66] ^ neg_msb[66]) ^ neg_lsb[66]), ((vector2[65] ^ neg_msb[65]) ^ neg_lsb[65]), ((vector2[64] ^ neg_msb[64]) ^ neg_lsb[64]), ((vector2[63] ^ neg_msb[63]) ^ neg_lsb[63]), ((vector2[62] ^ neg_msb[62]) ^ neg_lsb[62]), ((vector2[61] ^ neg_msb[61]) ^ neg_lsb[61]), ((vector2[60] ^ neg_msb[60]) ^ neg_lsb[60]), ((vector2[59] ^ neg_msb[59]) ^ neg_lsb[59]), ((vector2[58] ^ neg_msb[58]) ^ neg_lsb[58]), ((vector2[57] ^ neg_msb[57]) ^ neg_lsb[57]), ((vector2[56] ^ neg_msb[56]) ^ neg_lsb[56]), ((vector2[55] ^ neg_msb[55]) ^ neg_lsb[55]), ((vector2[54] ^ neg_msb[54]) ^ neg_lsb[54]), ((vector2[53] ^ neg_msb[53]) ^ neg_lsb[53]), ((vector2[52] ^ neg_msb[52]) ^ neg_lsb[52]), ((vector2[51] ^ neg_msb[51]) ^ neg_lsb[51]), ((vector2[50] ^ neg_msb[50]) ^ neg_lsb[50]), ((vector2[49] ^ neg_msb[49]) ^ neg_lsb[49]), ((vector2[48] ^ neg_msb[48]) ^ neg_lsb[48]), ((vector2[47] ^ neg_msb[47]) ^ neg_lsb[47]), ((vector2[46]
 ^ neg_msb[46]) ^ neg_lsb[46]), ((vector2[45] ^ neg_msb[45]) ^ neg_lsb[45]), ((vector2[44] ^ neg_msb[44]) ^ neg_lsb[44]), ((vector2[43] ^ neg_msb[43]) ^ neg_lsb[43]), ((vector2[42] ^ neg_msb[42]) ^ neg_lsb[42]), ((vector2[41] ^ neg_msb[41]) ^ neg_lsb[41]), ((vector2[40] ^ neg_msb[40]) ^ neg_lsb[40]), ((vector2[39] ^ neg_msb[39]) ^ neg_lsb[39]), ((vector2[38] ^ neg_msb[38]) ^ neg_lsb[38]), ((vector2[37] ^ neg_msb[37]) ^ neg_lsb[37]), ((vector2[36] ^ neg_msb[36]) ^ neg_lsb[36]), ((vector2[35] ^ neg_msb[35]) ^ neg_lsb[35]), ((vector2[34] ^ neg_msb[34]) ^ neg_lsb[34]), ((vector2[33] ^ neg_msb[33]) ^ neg_lsb[33]), ((vector2[32] ^ neg_msb[32]) ^ neg_lsb[32]), ((vector2[31] ^ neg_msb[31]) ^ neg_lsb[31]), ((vector2[30] ^ neg_msb[30]) ^ neg_lsb[30]), ((vector2[29] ^ neg_msb[29]) ^ neg_lsb[29]), ((vector2[28] ^ neg_msb[28]) ^ neg_lsb[28]), ((vector2[27] ^ neg_msb[27]) ^ neg_lsb[27]), ((vector2[26] ^ neg_msb[26]) ^ neg_lsb[26]), ((vector2[25] ^ neg_msb[25]) ^ neg_lsb[25]), ((vector2[24] ^ neg_msb[24]) ^ neg_lsb[24]), ((vector2[23] ^ neg_msb[23]) ^ neg_lsb[23]), ((vector2[22] ^ neg_msb[22]) ^ neg_lsb[22]), ((vector2[21] ^ neg_msb[21]) ^ neg_lsb[21]), ((vector2[20] ^ neg_msb[20]) ^ neg_lsb[20]), ((vector2[19] ^ neg_msb[19]) ^ neg_lsb[19]), ((vector2[18] ^ neg_msb[18]) ^ neg_lsb[18]), ((vector2[17] ^ neg_msb[17]) ^ neg_lsb[17]), ((vector2[16] ^ neg_msb[16]) ^ neg_lsb[16]), ((vector2[15] ^ neg_msb[15]) ^ neg_lsb[15]), ((vector2[14] ^ neg_msb[14]) ^ neg_lsb[14]), ((vector2[13] ^ neg_msb[13]) ^ neg_lsb[13]), ((vector2[12] ^ neg_msb[12]) ^ neg_lsb[12]), ((vector2[11] ^ neg_msb[11]) ^ neg_lsb[11]), ((vector2[10] ^ neg_msb[10]) ^ neg_lsb[10]), ((vector2[9] ^ neg_msb[9]) ^ neg_lsb[9]), ((vector2[8] ^ neg_msb[8]) ^ neg_lsb[8]), ((vector2[7] ^ neg_msb[7]) ^ neg_lsb[7]), ((vector2[6] ^ neg_msb[6]) ^ neg_lsb[6]), ((vector2[5] ^ neg_msb[5]) ^ neg_lsb[5]), ((vector2[4] ^ neg_msb[4]) ^ neg_lsb[4]), ((vector2[3] ^ neg_msb[3]) ^ neg_lsb[3]), ((vector2[2] ^ neg_msb[2]) ^ neg_lsb[2]), ((vector2[1] ^ neg_msb[1]) ^ neg_lsb[1]), ((vector2[0] ^ neg_msb[0]
) ^ neg_lsb[0])},
		sum_two = {((vector1[91] ^ sum_one[91]) ^ car_one_adj[91]), ((vector1[90] ^ sum_one[90]) ^ car_one_adj[90]), ((vector1[89] ^ sum_one[89]) ^ car_one_adj[89]), ((vector1[88] ^ sum_one[88]) ^ car_one_adj[88]), ((vector1[87] ^ sum_one[87]) ^ car_one_adj[87]), ((vector1[86] ^ sum_one[86]) ^ car_one_adj[86]), ((vector1[85] ^ sum_one[85]) ^ car_one_adj[85]), ((vector1[84] ^ sum_one[84]) ^ car_one_adj[84]), ((vector1[83] ^ sum_one[83]) ^ car_one_adj[83]), ((vector1[82] ^ sum_one[82]) ^ car_one_adj[82]), ((vector1[81] ^ sum_one[81]) ^ car_one_adj[81]), ((vector1[80] ^ sum_one[80]) ^ car_one_adj[80]), ((vector1[79] ^ sum_one[79]) ^ car_one_adj[79]), ((vector1[78] ^ sum_one[78]) ^ car_one_adj[78]), ((vector1[77] ^ sum_one[77]) ^ car_one_adj[77]), ((vector1[76] ^ sum_one[76]) ^ car_one_adj[76]), ((vector1[75] ^ sum_one[75]) ^ car_one_adj[75]), ((vector1[74] ^ sum_one[74]) ^ car_one_adj[74]), ((vector1[73] ^ sum_one[73]) ^ car_one_adj[73]), ((vector1[72] ^ sum_one[72]) ^ car_one_adj[72]), ((vector1[71] ^ sum_one[71]) ^ car_one_adj[71]), ((vector1[70] ^ sum_one[70]) ^ car_one_adj[70]), ((vector1[69] ^ sum_one[69]) ^ car_one_adj[69]), ((vector1[68] ^ sum_one[68]) ^ car_one_adj[68]), ((vector1[67] ^ sum_one[67]) ^ car_one_adj[67]), ((vector1[66] ^ sum_one[66]) ^ car_one_adj[66]), ((vector1[65] ^ sum_one[65]) ^ car_one_adj[65]), ((vector1[64] ^ sum_one[64]) ^ car_one_adj[64]), ((vector1[63] ^ sum_one[63]) ^ car_one_adj[63]), ((vector1[62] ^ sum_one[62]) ^ car_one_adj[62]), ((vector1[61] ^ sum_one[61]) ^ car_one_adj[61]), ((vector1[60] ^ sum_one[60]) ^ car_one_adj[60]), ((vector1[59] ^ sum_one[59]) ^ car_one_adj[59]), ((vector1[58] ^ sum_one[58]) ^ car_one_adj[58]), ((vector1[57] ^ sum_one[57]) ^ car_one_adj[57]), ((vector1[56] ^ sum_one[56]) ^ car_one_adj[56]), ((vector1[55] ^ sum_one[55]) ^ car_one_adj[55]), ((vector1[54] ^ sum_one[54]) ^ car_one_adj[54]), ((vector1[53] ^ sum_one[53]) ^ car_one_adj[53]), ((vector1[52] ^ sum_one[52]) ^ car_one_adj[52]), ((vector1[51] ^ sum_one[51]) ^ car_one_adj[51]), ((vector1[50] ^ sum_one[50]
) ^ car_one_adj[50]), ((vector1[49] ^ sum_one[49]) ^ car_one_adj[49]), ((vector1[48] ^ sum_one[48]) ^ car_one_adj[48]), ((vector1[47] ^ sum_one[47]) ^ car_one_adj[47]), ((vector1[46] ^ sum_one[46]) ^ car_one_adj[46]), ((vector1[45] ^ sum_one[45]) ^ car_one_adj[45]), ((vector1[44] ^ sum_one[44]) ^ car_one_adj[44]), ((vector1[43] ^ sum_one[43]) ^ car_one_adj[43]), ((vector1[42] ^ sum_one[42]) ^ car_one_adj[42]), ((vector1[41] ^ sum_one[41]) ^ car_one_adj[41]), ((vector1[40] ^ sum_one[40]) ^ car_one_adj[40]), ((vector1[39] ^ sum_one[39]) ^ car_one_adj[39]), ((vector1[38] ^ sum_one[38]) ^ car_one_adj[38]), ((vector1[37] ^ sum_one[37]) ^ car_one_adj[37]), ((vector1[36] ^ sum_one[36]) ^ car_one_adj[36]), ((vector1[35] ^ sum_one[35]) ^ car_one_adj[35]), ((vector1[34] ^ sum_one[34]) ^ car_one_adj[34]), ((vector1[33] ^ sum_one[33]) ^ car_one_adj[33]), ((vector1[32] ^ sum_one[32]) ^ car_one_adj[32]), ((vector1[31] ^ sum_one[31]) ^ car_one_adj[31]), ((vector1[30] ^ sum_one[30]) ^ car_one_adj[30]), ((vector1[29] ^ sum_one[29]) ^ car_one_adj[29]), ((vector1[28] ^ sum_one[28]) ^ car_one_adj[28]), ((vector1[27] ^ sum_one[27]) ^ car_one_adj[27]), ((vector1[26] ^ sum_one[26]) ^ car_one_adj[26]), ((vector1[25] ^ sum_one[25]) ^ car_one_adj[25]), ((vector1[24] ^ sum_one[24]) ^ car_one_adj[24]), ((vector1[23] ^ sum_one[23]) ^ car_one_adj[23]), ((vector1[22] ^ sum_one[22]) ^ car_one_adj[22]), ((vector1[21] ^ sum_one[21]) ^ car_one_adj[21]), ((vector1[20] ^ sum_one[20]) ^ car_one_adj[20]), ((vector1[19] ^ sum_one[19]) ^ car_one_adj[19]), ((vector1[18] ^ sum_one[18]) ^ car_one_adj[18]), ((vector1[17] ^ sum_one[17]) ^ car_one_adj[17]), ((vector1[16] ^ sum_one[16]) ^ car_one_adj[16]), ((vector1[15] ^ sum_one[15]) ^ car_one_adj[15]), ((vector1[14] ^ sum_one[14]) ^ car_one_adj[14]), ((vector1[13] ^ sum_one[13]) ^ car_one_adj[13]), ((vector1[12] ^ sum_one[12]) ^ car_one_adj[12]), ((vector1[11] ^ sum_one[11]) ^ car_one_adj[11]), ((vector1[10] ^ sum_one[10]) ^ car_one_adj[10]), ((vector1[9] ^ sum_one[9]) ^ car_one_adj[9]), ((vector1[8] ^ sum_one[8]
) ^ car_one_adj[8]), ((vector1[7] ^ sum_one[7]) ^ car_one_adj[7]), ((vector1[6] ^ sum_one[6]) ^ car_one_adj[6]), ((vector1[5] ^ sum_one[5]) ^ car_one_adj[5]), ((vector1[4] ^ sum_one[4]) ^ car_one_adj[4]), ((vector1[3] ^ sum_one[3]) ^ car_one_adj[3]), ((vector1[2] ^ sum_one[2]) ^ car_one_adj[2]), ((vector1[1] ^ sum_one[1]) ^ car_one_adj[1]), ((vector1[0] ^ sum_one[0]) ^ car_one_adj[0])},
		sum_two_wo = sum_two_reg0,
		vector1 = {msb_prod_wo, lsb_prod_wo[61:31]},
		vector2 = {{28{1'b0}}, mid_prod_wo},
		wire_a = dataa,
		wire_b = datab;
endmodule //ALTFP_EXa_altmult_opt1


//altmult_opt DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=5 LPM_WIDTHA=61 LPM_WIDTHB=59 LPM_WIDTHP=120 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_altmult_opt 2016:04:27:18:05:34:SJ cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_compare 2016:04:27:18:05:34:SJ cbx_lpm_mult 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_padd 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ cbx_util_mgl 2016:04:27:18:05:34:SJ  VERSION_END


//altmult_opt_csa CARRY_SELECT="NO" LPM_DIRECTION="ADD" LPM_PIPELINE=2 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=90 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_altmult_opt 2016:04:27:18:05:34:SJ cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_compare 2016:04:27:18:05:34:SJ cbx_lpm_mult 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_padd 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ cbx_util_mgl 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_PIPELINE=2 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=90 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END

//synthesis_resources = lut 190 reg 181 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  ALTFP_EXa_add_sub1
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [89:0]  dataa;
	input   [89:0]  datab;
	output   [89:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [89:0]  dataa;
	tri0   [89:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[89:0]	add_sub_cell_ffa;
	reg	[0:0]	inter_regrs_cin_ffa0;
	reg	[89:0]	pad_cell_ffa;
	wire  [0:0]   wire_add_sub_cella_0cout;
	wire  [0:0]   wire_add_sub_cella_1cout;
	wire  [0:0]   wire_add_sub_cella_2cout;
	wire  [0:0]   wire_add_sub_cella_3cout;
	wire  [0:0]   wire_add_sub_cella_4cout;
	wire  [0:0]   wire_add_sub_cella_5cout;
	wire  [0:0]   wire_add_sub_cella_6cout;
	wire  [0:0]   wire_add_sub_cella_7cout;
	wire  [0:0]   wire_add_sub_cella_8cout;
	wire  [0:0]   wire_add_sub_cella_9cout;
	wire  [0:0]   wire_add_sub_cella_10cout;
	wire  [0:0]   wire_add_sub_cella_11cout;
	wire  [0:0]   wire_add_sub_cella_12cout;
	wire  [0:0]   wire_add_sub_cella_13cout;
	wire  [0:0]   wire_add_sub_cella_14cout;
	wire  [0:0]   wire_add_sub_cella_15cout;
	wire  [0:0]   wire_add_sub_cella_16cout;
	wire  [0:0]   wire_add_sub_cella_17cout;
	wire  [0:0]   wire_add_sub_cella_18cout;
	wire  [0:0]   wire_add_sub_cella_19cout;
	wire  [0:0]   wire_add_sub_cella_20cout;
	wire  [0:0]   wire_add_sub_cella_21cout;
	wire  [0:0]   wire_add_sub_cella_22cout;
	wire  [0:0]   wire_add_sub_cella_23cout;
	wire  [0:0]   wire_add_sub_cella_24cout;
	wire  [0:0]   wire_add_sub_cella_25cout;
	wire  [0:0]   wire_add_sub_cella_26cout;
	wire  [0:0]   wire_add_sub_cella_27cout;
	wire  [0:0]   wire_add_sub_cella_28cout;
	wire  [0:0]   wire_add_sub_cella_29cout;
	wire  [0:0]   wire_add_sub_cella_30cout;
	wire  [0:0]   wire_add_sub_cella_31cout;
	wire  [0:0]   wire_add_sub_cella_32cout;
	wire  [0:0]   wire_add_sub_cella_33cout;
	wire  [0:0]   wire_add_sub_cella_34cout;
	wire  [0:0]   wire_add_sub_cella_35cout;
	wire  [0:0]   wire_add_sub_cella_36cout;
	wire  [0:0]   wire_add_sub_cella_37cout;
	wire  [0:0]   wire_add_sub_cella_38cout;
	wire  [0:0]   wire_add_sub_cella_39cout;
	wire  [0:0]   wire_add_sub_cella_40cout;
	wire  [0:0]   wire_add_sub_cella_41cout;
	wire  [0:0]   wire_add_sub_cella_42cout;
	wire  [0:0]   wire_add_sub_cella_43cout;
	wire  [0:0]   wire_add_sub_cella_44cout;
	wire  [0:0]   wire_add_sub_cella_45cout;
	wire  [0:0]   wire_add_sub_cella_46cout;
	wire  [0:0]   wire_add_sub_cella_47cout;
	wire  [0:0]   wire_add_sub_cella_48cout;
	wire  [0:0]   wire_add_sub_cella_49cout;
	wire  [0:0]   wire_add_sub_cella_50cout;
	wire  [0:0]   wire_add_sub_cella_51cout;
	wire  [0:0]   wire_add_sub_cella_52cout;
	wire  [0:0]   wire_add_sub_cella_53cout;
	wire  [0:0]   wire_add_sub_cella_54cout;
	wire  [0:0]   wire_add_sub_cella_55cout;
	wire  [0:0]   wire_add_sub_cella_56cout;
	wire  [0:0]   wire_add_sub_cella_57cout;
	wire  [0:0]   wire_add_sub_cella_58cout;
	wire  [0:0]   wire_add_sub_cella_59cout;
	wire  [0:0]   wire_add_sub_cella_60cout;
	wire  [0:0]   wire_add_sub_cella_61cout;
	wire  [0:0]   wire_add_sub_cella_62cout;
	wire  [0:0]   wire_add_sub_cella_63cout;
	wire  [0:0]   wire_add_sub_cella_64cout;
	wire  [0:0]   wire_add_sub_cella_65cout;
	wire  [0:0]   wire_add_sub_cella_66cout;
	wire  [0:0]   wire_add_sub_cella_67cout;
	wire  [0:0]   wire_add_sub_cella_68cout;
	wire  [0:0]   wire_add_sub_cella_69cout;
	wire  [0:0]   wire_add_sub_cella_70cout;
	wire  [0:0]   wire_add_sub_cella_71cout;
	wire  [0:0]   wire_add_sub_cella_72cout;
	wire  [0:0]   wire_add_sub_cella_73cout;
	wire  [0:0]   wire_add_sub_cella_74cout;
	wire  [0:0]   wire_add_sub_cella_75cout;
	wire  [0:0]   wire_add_sub_cella_76cout;
	wire  [0:0]   wire_add_sub_cella_77cout;
	wire  [0:0]   wire_add_sub_cella_78cout;
	wire  [0:0]   wire_add_sub_cella_79cout;
	wire  [0:0]   wire_add_sub_cella_80cout;
	wire  [0:0]   wire_add_sub_cella_81cout;
	wire  [0:0]   wire_add_sub_cella_82cout;
	wire  [0:0]   wire_add_sub_cella_83cout;
	wire  [0:0]   wire_add_sub_cella_84cout;
	wire  [0:0]   wire_add_sub_cella_85cout;
	wire  [0:0]   wire_add_sub_cella_86cout;
	wire  [0:0]   wire_add_sub_cella_87cout;
	wire  [0:0]   wire_add_sub_cella_88cout;
	wire  [89:0]   wire_add_sub_cella_datad;
	wire  [89:0]   wire_add_sub_cella_dataf;
	wire  [89:0]   wire_add_sub_cella_sumout;
	wire  [0:0]   wire_inter_regrs_cina_sumout;
	wire  [0:0]   wire_inter_regrs_couta_0cout;
	wire  wire_le_comb18_sumout;
	wire  wire_le_comb19_cout;
	wire  wire_le_comb20_sumout;
	wire  wire_le_comb21_cout;
	wire  wire_le_comb22_sumout;
	wire  wire_le_comb23_cout;
	wire  wire_le_comb24_sumout;
	wire  wire_le_comb25_cout;
	wire  [0:0]   wire_pad_cella_0cout;
	wire  [0:0]   wire_pad_cella_1cout;
	wire  [0:0]   wire_pad_cella_2cout;
	wire  [0:0]   wire_pad_cella_3cout;
	wire  [0:0]   wire_pad_cella_4cout;
	wire  [0:0]   wire_pad_cella_5cout;
	wire  [0:0]   wire_pad_cella_6cout;
	wire  [0:0]   wire_pad_cella_7cout;
	wire  [0:0]   wire_pad_cella_8cout;
	wire  [0:0]   wire_pad_cella_9cout;
	wire  [0:0]   wire_pad_cella_10cout;
	wire  [0:0]   wire_pad_cella_11cout;
	wire  [0:0]   wire_pad_cella_12cout;
	wire  [0:0]   wire_pad_cella_13cout;
	wire  [0:0]   wire_pad_cella_14cout;
	wire  [0:0]   wire_pad_cella_15cout;
	wire  [0:0]   wire_pad_cella_16cout;
	wire  [0:0]   wire_pad_cella_17cout;
	wire  [0:0]   wire_pad_cella_18cout;
	wire  [0:0]   wire_pad_cella_19cout;
	wire  [0:0]   wire_pad_cella_20cout;
	wire  [0:0]   wire_pad_cella_21cout;
	wire  [0:0]   wire_pad_cella_22cout;
	wire  [0:0]   wire_pad_cella_23cout;
	wire  [0:0]   wire_pad_cella_24cout;
	wire  [0:0]   wire_pad_cella_25cout;
	wire  [0:0]   wire_pad_cella_26cout;
	wire  [0:0]   wire_pad_cella_27cout;
	wire  [0:0]   wire_pad_cella_28cout;
	wire  [0:0]   wire_pad_cella_29cout;
	wire  [0:0]   wire_pad_cella_30cout;
	wire  [0:0]   wire_pad_cella_31cout;
	wire  [0:0]   wire_pad_cella_32cout;
	wire  [0:0]   wire_pad_cella_33cout;
	wire  [0:0]   wire_pad_cella_34cout;
	wire  [0:0]   wire_pad_cella_35cout;
	wire  [0:0]   wire_pad_cella_36cout;
	wire  [0:0]   wire_pad_cella_37cout;
	wire  [0:0]   wire_pad_cella_38cout;
	wire  [0:0]   wire_pad_cella_39cout;
	wire  [0:0]   wire_pad_cella_40cout;
	wire  [0:0]   wire_pad_cella_41cout;
	wire  [0:0]   wire_pad_cella_42cout;
	wire  [0:0]   wire_pad_cella_43cout;
	wire  [0:0]   wire_pad_cella_45cout;
	wire  [0:0]   wire_pad_cella_46cout;
	wire  [0:0]   wire_pad_cella_47cout;
	wire  [0:0]   wire_pad_cella_48cout;
	wire  [0:0]   wire_pad_cella_49cout;
	wire  [0:0]   wire_pad_cella_50cout;
	wire  [0:0]   wire_pad_cella_51cout;
	wire  [0:0]   wire_pad_cella_52cout;
	wire  [0:0]   wire_pad_cella_53cout;
	wire  [0:0]   wire_pad_cella_54cout;
	wire  [0:0]   wire_pad_cella_55cout;
	wire  [0:0]   wire_pad_cella_56cout;
	wire  [0:0]   wire_pad_cella_57cout;
	wire  [0:0]   wire_pad_cella_58cout;
	wire  [0:0]   wire_pad_cella_59cout;
	wire  [0:0]   wire_pad_cella_60cout;
	wire  [0:0]   wire_pad_cella_61cout;
	wire  [0:0]   wire_pad_cella_62cout;
	wire  [0:0]   wire_pad_cella_63cout;
	wire  [0:0]   wire_pad_cella_64cout;
	wire  [0:0]   wire_pad_cella_65cout;
	wire  [0:0]   wire_pad_cella_66cout;
	wire  [0:0]   wire_pad_cella_67cout;
	wire  [0:0]   wire_pad_cella_68cout;
	wire  [0:0]   wire_pad_cella_69cout;
	wire  [0:0]   wire_pad_cella_70cout;
	wire  [0:0]   wire_pad_cella_71cout;
	wire  [0:0]   wire_pad_cella_72cout;
	wire  [0:0]   wire_pad_cella_73cout;
	wire  [0:0]   wire_pad_cella_74cout;
	wire  [0:0]   wire_pad_cella_75cout;
	wire  [0:0]   wire_pad_cella_76cout;
	wire  [0:0]   wire_pad_cella_77cout;
	wire  [0:0]   wire_pad_cella_78cout;
	wire  [0:0]   wire_pad_cella_79cout;
	wire  [0:0]   wire_pad_cella_80cout;
	wire  [0:0]   wire_pad_cella_81cout;
	wire  [0:0]   wire_pad_cella_82cout;
	wire  [0:0]   wire_pad_cella_83cout;
	wire  [0:0]   wire_pad_cella_84cout;
	wire  [0:0]   wire_pad_cella_85cout;
	wire  [0:0]   wire_pad_cella_86cout;
	wire  [0:0]   wire_pad_cella_87cout;
	wire  [0:0]   wire_pad_cella_88cout;
	wire  [89:0]   wire_pad_cella_datad;
	wire  [89:0]   wire_pad_cella_sumout;

	// synopsys translate_off
	initial
		add_sub_cell_ffa = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) add_sub_cell_ffa <= 90'b0;
		else if  (clken == 1'b1)   add_sub_cell_ffa <= wire_add_sub_cella_sumout;
	// synopsys translate_off
	initial
		inter_regrs_cin_ffa0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) inter_regrs_cin_ffa0 <= 1'b0;
		else if  (clken == 1'b1)   inter_regrs_cin_ffa0 <= wire_inter_regrs_cina_sumout[0:0];
	// synopsys translate_off
	initial
		pad_cell_ffa = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) pad_cell_ffa <= 90'b0;
		else if  (clken == 1'b1)   pad_cell_ffa <= wire_pad_cella_sumout;
	cyclonev_lcell_comb   add_sub_cella_0
	( 
	.cin(1'b0),
	.combout(),
	.cout(wire_add_sub_cella_0cout[0:0]),
	.datad(wire_add_sub_cella_datad[0:0]),
	.dataf(wire_add_sub_cella_dataf[0:0]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_0.extended_lut = "off",
		add_sub_cella_0.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_0.shared_arith = "off",
		add_sub_cella_0.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_1
	( 
	.cin(wire_add_sub_cella_0cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_1cout[0:0]),
	.datad(wire_add_sub_cella_datad[1:1]),
	.dataf(wire_add_sub_cella_dataf[1:1]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[1:1]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_1.extended_lut = "off",
		add_sub_cella_1.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_1.shared_arith = "off",
		add_sub_cella_1.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_2
	( 
	.cin(wire_add_sub_cella_1cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_2cout[0:0]),
	.datad(wire_add_sub_cella_datad[2:2]),
	.dataf(wire_add_sub_cella_dataf[2:2]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[2:2]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_2.extended_lut = "off",
		add_sub_cella_2.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_2.shared_arith = "off",
		add_sub_cella_2.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_3
	( 
	.cin(wire_add_sub_cella_2cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_3cout[0:0]),
	.datad(wire_add_sub_cella_datad[3:3]),
	.dataf(wire_add_sub_cella_dataf[3:3]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[3:3]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_3.extended_lut = "off",
		add_sub_cella_3.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_3.shared_arith = "off",
		add_sub_cella_3.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_4
	( 
	.cin(wire_add_sub_cella_3cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_4cout[0:0]),
	.datad(wire_add_sub_cella_datad[4:4]),
	.dataf(wire_add_sub_cella_dataf[4:4]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[4:4]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_4.extended_lut = "off",
		add_sub_cella_4.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_4.shared_arith = "off",
		add_sub_cella_4.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_5
	( 
	.cin(wire_add_sub_cella_4cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_5cout[0:0]),
	.datad(wire_add_sub_cella_datad[5:5]),
	.dataf(wire_add_sub_cella_dataf[5:5]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[5:5]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_5.extended_lut = "off",
		add_sub_cella_5.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_5.shared_arith = "off",
		add_sub_cella_5.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_6
	( 
	.cin(wire_add_sub_cella_5cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_6cout[0:0]),
	.datad(wire_add_sub_cella_datad[6:6]),
	.dataf(wire_add_sub_cella_dataf[6:6]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[6:6]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_6.extended_lut = "off",
		add_sub_cella_6.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_6.shared_arith = "off",
		add_sub_cella_6.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_7
	( 
	.cin(wire_add_sub_cella_6cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_7cout[0:0]),
	.datad(wire_add_sub_cella_datad[7:7]),
	.dataf(wire_add_sub_cella_dataf[7:7]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[7:7]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_7.extended_lut = "off",
		add_sub_cella_7.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_7.shared_arith = "off",
		add_sub_cella_7.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_8
	( 
	.cin(wire_add_sub_cella_7cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_8cout[0:0]),
	.datad(wire_add_sub_cella_datad[8:8]),
	.dataf(wire_add_sub_cella_dataf[8:8]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[8:8]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_8.extended_lut = "off",
		add_sub_cella_8.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_8.shared_arith = "off",
		add_sub_cella_8.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_9
	( 
	.cin(wire_add_sub_cella_8cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_9cout[0:0]),
	.datad(wire_add_sub_cella_datad[9:9]),
	.dataf(wire_add_sub_cella_dataf[9:9]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[9:9]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_9.extended_lut = "off",
		add_sub_cella_9.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_9.shared_arith = "off",
		add_sub_cella_9.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_10
	( 
	.cin(wire_add_sub_cella_9cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_10cout[0:0]),
	.datad(wire_add_sub_cella_datad[10:10]),
	.dataf(wire_add_sub_cella_dataf[10:10]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[10:10]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_10.extended_lut = "off",
		add_sub_cella_10.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_10.shared_arith = "off",
		add_sub_cella_10.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_11
	( 
	.cin(wire_add_sub_cella_10cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_11cout[0:0]),
	.datad(wire_add_sub_cella_datad[11:11]),
	.dataf(wire_add_sub_cella_dataf[11:11]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[11:11]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_11.extended_lut = "off",
		add_sub_cella_11.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_11.shared_arith = "off",
		add_sub_cella_11.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_12
	( 
	.cin(wire_add_sub_cella_11cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_12cout[0:0]),
	.datad(wire_add_sub_cella_datad[12:12]),
	.dataf(wire_add_sub_cella_dataf[12:12]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[12:12]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_12.extended_lut = "off",
		add_sub_cella_12.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_12.shared_arith = "off",
		add_sub_cella_12.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_13
	( 
	.cin(wire_add_sub_cella_12cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_13cout[0:0]),
	.datad(wire_add_sub_cella_datad[13:13]),
	.dataf(wire_add_sub_cella_dataf[13:13]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[13:13]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_13.extended_lut = "off",
		add_sub_cella_13.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_13.shared_arith = "off",
		add_sub_cella_13.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_14
	( 
	.cin(wire_add_sub_cella_13cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_14cout[0:0]),
	.datad(wire_add_sub_cella_datad[14:14]),
	.dataf(wire_add_sub_cella_dataf[14:14]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[14:14]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_14.extended_lut = "off",
		add_sub_cella_14.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_14.shared_arith = "off",
		add_sub_cella_14.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_15
	( 
	.cin(wire_add_sub_cella_14cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_15cout[0:0]),
	.datad(wire_add_sub_cella_datad[15:15]),
	.dataf(wire_add_sub_cella_dataf[15:15]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[15:15]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_15.extended_lut = "off",
		add_sub_cella_15.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_15.shared_arith = "off",
		add_sub_cella_15.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_16
	( 
	.cin(wire_add_sub_cella_15cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_16cout[0:0]),
	.datad(wire_add_sub_cella_datad[16:16]),
	.dataf(wire_add_sub_cella_dataf[16:16]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[16:16]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_16.extended_lut = "off",
		add_sub_cella_16.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_16.shared_arith = "off",
		add_sub_cella_16.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_17
	( 
	.cin(wire_add_sub_cella_16cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_17cout[0:0]),
	.datad(wire_add_sub_cella_datad[17:17]),
	.dataf(wire_add_sub_cella_dataf[17:17]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[17:17]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_17.extended_lut = "off",
		add_sub_cella_17.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_17.shared_arith = "off",
		add_sub_cella_17.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_18
	( 
	.cin(wire_add_sub_cella_17cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_18cout[0:0]),
	.datad(wire_add_sub_cella_datad[18:18]),
	.dataf(wire_add_sub_cella_dataf[18:18]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[18:18]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_18.extended_lut = "off",
		add_sub_cella_18.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_18.shared_arith = "off",
		add_sub_cella_18.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_19
	( 
	.cin(wire_add_sub_cella_18cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_19cout[0:0]),
	.datad(wire_add_sub_cella_datad[19:19]),
	.dataf(wire_add_sub_cella_dataf[19:19]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[19:19]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_19.extended_lut = "off",
		add_sub_cella_19.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_19.shared_arith = "off",
		add_sub_cella_19.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_20
	( 
	.cin(wire_add_sub_cella_19cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_20cout[0:0]),
	.datad(wire_add_sub_cella_datad[20:20]),
	.dataf(wire_add_sub_cella_dataf[20:20]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[20:20]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_20.extended_lut = "off",
		add_sub_cella_20.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_20.shared_arith = "off",
		add_sub_cella_20.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_21
	( 
	.cin(wire_add_sub_cella_20cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_21cout[0:0]),
	.datad(wire_add_sub_cella_datad[21:21]),
	.dataf(wire_add_sub_cella_dataf[21:21]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[21:21]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_21.extended_lut = "off",
		add_sub_cella_21.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_21.shared_arith = "off",
		add_sub_cella_21.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_22
	( 
	.cin(wire_add_sub_cella_21cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_22cout[0:0]),
	.datad(wire_add_sub_cella_datad[22:22]),
	.dataf(wire_add_sub_cella_dataf[22:22]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[22:22]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_22.extended_lut = "off",
		add_sub_cella_22.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_22.shared_arith = "off",
		add_sub_cella_22.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_23
	( 
	.cin(wire_add_sub_cella_22cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_23cout[0:0]),
	.datad(wire_add_sub_cella_datad[23:23]),
	.dataf(wire_add_sub_cella_dataf[23:23]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[23:23]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_23.extended_lut = "off",
		add_sub_cella_23.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_23.shared_arith = "off",
		add_sub_cella_23.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_24
	( 
	.cin(wire_add_sub_cella_23cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_24cout[0:0]),
	.datad(wire_add_sub_cella_datad[24:24]),
	.dataf(wire_add_sub_cella_dataf[24:24]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[24:24]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_24.extended_lut = "off",
		add_sub_cella_24.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_24.shared_arith = "off",
		add_sub_cella_24.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_25
	( 
	.cin(wire_add_sub_cella_24cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_25cout[0:0]),
	.datad(wire_add_sub_cella_datad[25:25]),
	.dataf(wire_add_sub_cella_dataf[25:25]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[25:25]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_25.extended_lut = "off",
		add_sub_cella_25.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_25.shared_arith = "off",
		add_sub_cella_25.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_26
	( 
	.cin(wire_add_sub_cella_25cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_26cout[0:0]),
	.datad(wire_add_sub_cella_datad[26:26]),
	.dataf(wire_add_sub_cella_dataf[26:26]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[26:26]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_26.extended_lut = "off",
		add_sub_cella_26.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_26.shared_arith = "off",
		add_sub_cella_26.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_27
	( 
	.cin(wire_add_sub_cella_26cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_27cout[0:0]),
	.datad(wire_add_sub_cella_datad[27:27]),
	.dataf(wire_add_sub_cella_dataf[27:27]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[27:27]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_27.extended_lut = "off",
		add_sub_cella_27.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_27.shared_arith = "off",
		add_sub_cella_27.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_28
	( 
	.cin(wire_add_sub_cella_27cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_28cout[0:0]),
	.datad(wire_add_sub_cella_datad[28:28]),
	.dataf(wire_add_sub_cella_dataf[28:28]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[28:28]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_28.extended_lut = "off",
		add_sub_cella_28.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_28.shared_arith = "off",
		add_sub_cella_28.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_29
	( 
	.cin(wire_add_sub_cella_28cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_29cout[0:0]),
	.datad(wire_add_sub_cella_datad[29:29]),
	.dataf(wire_add_sub_cella_dataf[29:29]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[29:29]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_29.extended_lut = "off",
		add_sub_cella_29.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_29.shared_arith = "off",
		add_sub_cella_29.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_30
	( 
	.cin(wire_add_sub_cella_29cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_30cout[0:0]),
	.datad(wire_add_sub_cella_datad[30:30]),
	.dataf(wire_add_sub_cella_dataf[30:30]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[30:30]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_30.extended_lut = "off",
		add_sub_cella_30.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_30.shared_arith = "off",
		add_sub_cella_30.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_31
	( 
	.cin(wire_add_sub_cella_30cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_31cout[0:0]),
	.datad(wire_add_sub_cella_datad[31:31]),
	.dataf(wire_add_sub_cella_dataf[31:31]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[31:31]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_31.extended_lut = "off",
		add_sub_cella_31.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_31.shared_arith = "off",
		add_sub_cella_31.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_32
	( 
	.cin(wire_le_comb19_cout),
	.combout(),
	.cout(wire_add_sub_cella_32cout[0:0]),
	.datad(wire_add_sub_cella_datad[32:32]),
	.dataf(wire_add_sub_cella_dataf[32:32]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[32:32]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_32.extended_lut = "off",
		add_sub_cella_32.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_32.shared_arith = "off",
		add_sub_cella_32.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_33
	( 
	.cin(wire_add_sub_cella_32cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_33cout[0:0]),
	.datad(wire_add_sub_cella_datad[33:33]),
	.dataf(wire_add_sub_cella_dataf[33:33]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[33:33]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_33.extended_lut = "off",
		add_sub_cella_33.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_33.shared_arith = "off",
		add_sub_cella_33.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_34
	( 
	.cin(wire_add_sub_cella_33cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_34cout[0:0]),
	.datad(wire_add_sub_cella_datad[34:34]),
	.dataf(wire_add_sub_cella_dataf[34:34]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[34:34]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_34.extended_lut = "off",
		add_sub_cella_34.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_34.shared_arith = "off",
		add_sub_cella_34.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_35
	( 
	.cin(wire_add_sub_cella_34cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_35cout[0:0]),
	.datad(wire_add_sub_cella_datad[35:35]),
	.dataf(wire_add_sub_cella_dataf[35:35]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[35:35]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_35.extended_lut = "off",
		add_sub_cella_35.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_35.shared_arith = "off",
		add_sub_cella_35.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_36
	( 
	.cin(wire_add_sub_cella_35cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_36cout[0:0]),
	.datad(wire_add_sub_cella_datad[36:36]),
	.dataf(wire_add_sub_cella_dataf[36:36]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[36:36]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_36.extended_lut = "off",
		add_sub_cella_36.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_36.shared_arith = "off",
		add_sub_cella_36.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_37
	( 
	.cin(wire_add_sub_cella_36cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_37cout[0:0]),
	.datad(wire_add_sub_cella_datad[37:37]),
	.dataf(wire_add_sub_cella_dataf[37:37]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[37:37]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_37.extended_lut = "off",
		add_sub_cella_37.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_37.shared_arith = "off",
		add_sub_cella_37.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_38
	( 
	.cin(wire_add_sub_cella_37cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_38cout[0:0]),
	.datad(wire_add_sub_cella_datad[38:38]),
	.dataf(wire_add_sub_cella_dataf[38:38]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[38:38]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_38.extended_lut = "off",
		add_sub_cella_38.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_38.shared_arith = "off",
		add_sub_cella_38.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_39
	( 
	.cin(wire_add_sub_cella_38cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_39cout[0:0]),
	.datad(wire_add_sub_cella_datad[39:39]),
	.dataf(wire_add_sub_cella_dataf[39:39]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[39:39]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_39.extended_lut = "off",
		add_sub_cella_39.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_39.shared_arith = "off",
		add_sub_cella_39.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_40
	( 
	.cin(wire_add_sub_cella_39cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_40cout[0:0]),
	.datad(wire_add_sub_cella_datad[40:40]),
	.dataf(wire_add_sub_cella_dataf[40:40]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[40:40]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_40.extended_lut = "off",
		add_sub_cella_40.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_40.shared_arith = "off",
		add_sub_cella_40.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_41
	( 
	.cin(wire_add_sub_cella_40cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_41cout[0:0]),
	.datad(wire_add_sub_cella_datad[41:41]),
	.dataf(wire_add_sub_cella_dataf[41:41]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[41:41]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_41.extended_lut = "off",
		add_sub_cella_41.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_41.shared_arith = "off",
		add_sub_cella_41.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_42
	( 
	.cin(wire_add_sub_cella_41cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_42cout[0:0]),
	.datad(wire_add_sub_cella_datad[42:42]),
	.dataf(wire_add_sub_cella_dataf[42:42]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[42:42]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_42.extended_lut = "off",
		add_sub_cella_42.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_42.shared_arith = "off",
		add_sub_cella_42.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_43
	( 
	.cin(wire_add_sub_cella_42cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_43cout[0:0]),
	.datad(wire_add_sub_cella_datad[43:43]),
	.dataf(wire_add_sub_cella_dataf[43:43]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[43:43]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_43.extended_lut = "off",
		add_sub_cella_43.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_43.shared_arith = "off",
		add_sub_cella_43.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_44
	( 
	.cin(wire_add_sub_cella_43cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_44cout[0:0]),
	.datad(wire_add_sub_cella_datad[44:44]),
	.dataf(wire_add_sub_cella_dataf[44:44]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[44:44]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_44.extended_lut = "off",
		add_sub_cella_44.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_44.shared_arith = "off",
		add_sub_cella_44.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_45
	( 
	.cin(1'b0),
	.combout(),
	.cout(wire_add_sub_cella_45cout[0:0]),
	.datad(wire_add_sub_cella_datad[45:45]),
	.dataf(wire_add_sub_cella_dataf[45:45]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[45:45]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_45.extended_lut = "off",
		add_sub_cella_45.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_45.shared_arith = "off",
		add_sub_cella_45.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_46
	( 
	.cin(wire_add_sub_cella_45cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_46cout[0:0]),
	.datad(wire_add_sub_cella_datad[46:46]),
	.dataf(wire_add_sub_cella_dataf[46:46]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[46:46]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_46.extended_lut = "off",
		add_sub_cella_46.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_46.shared_arith = "off",
		add_sub_cella_46.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_47
	( 
	.cin(wire_add_sub_cella_46cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_47cout[0:0]),
	.datad(wire_add_sub_cella_datad[47:47]),
	.dataf(wire_add_sub_cella_dataf[47:47]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[47:47]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_47.extended_lut = "off",
		add_sub_cella_47.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_47.shared_arith = "off",
		add_sub_cella_47.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_48
	( 
	.cin(wire_add_sub_cella_47cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_48cout[0:0]),
	.datad(wire_add_sub_cella_datad[48:48]),
	.dataf(wire_add_sub_cella_dataf[48:48]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[48:48]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_48.extended_lut = "off",
		add_sub_cella_48.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_48.shared_arith = "off",
		add_sub_cella_48.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_49
	( 
	.cin(wire_add_sub_cella_48cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_49cout[0:0]),
	.datad(wire_add_sub_cella_datad[49:49]),
	.dataf(wire_add_sub_cella_dataf[49:49]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[49:49]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_49.extended_lut = "off",
		add_sub_cella_49.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_49.shared_arith = "off",
		add_sub_cella_49.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_50
	( 
	.cin(wire_add_sub_cella_49cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_50cout[0:0]),
	.datad(wire_add_sub_cella_datad[50:50]),
	.dataf(wire_add_sub_cella_dataf[50:50]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[50:50]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_50.extended_lut = "off",
		add_sub_cella_50.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_50.shared_arith = "off",
		add_sub_cella_50.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_51
	( 
	.cin(wire_add_sub_cella_50cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_51cout[0:0]),
	.datad(wire_add_sub_cella_datad[51:51]),
	.dataf(wire_add_sub_cella_dataf[51:51]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[51:51]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_51.extended_lut = "off",
		add_sub_cella_51.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_51.shared_arith = "off",
		add_sub_cella_51.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_52
	( 
	.cin(wire_add_sub_cella_51cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_52cout[0:0]),
	.datad(wire_add_sub_cella_datad[52:52]),
	.dataf(wire_add_sub_cella_dataf[52:52]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[52:52]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_52.extended_lut = "off",
		add_sub_cella_52.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_52.shared_arith = "off",
		add_sub_cella_52.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_53
	( 
	.cin(wire_add_sub_cella_52cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_53cout[0:0]),
	.datad(wire_add_sub_cella_datad[53:53]),
	.dataf(wire_add_sub_cella_dataf[53:53]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[53:53]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_53.extended_lut = "off",
		add_sub_cella_53.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_53.shared_arith = "off",
		add_sub_cella_53.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_54
	( 
	.cin(wire_add_sub_cella_53cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_54cout[0:0]),
	.datad(wire_add_sub_cella_datad[54:54]),
	.dataf(wire_add_sub_cella_dataf[54:54]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[54:54]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_54.extended_lut = "off",
		add_sub_cella_54.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_54.shared_arith = "off",
		add_sub_cella_54.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_55
	( 
	.cin(wire_add_sub_cella_54cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_55cout[0:0]),
	.datad(wire_add_sub_cella_datad[55:55]),
	.dataf(wire_add_sub_cella_dataf[55:55]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[55:55]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_55.extended_lut = "off",
		add_sub_cella_55.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_55.shared_arith = "off",
		add_sub_cella_55.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_56
	( 
	.cin(wire_add_sub_cella_55cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_56cout[0:0]),
	.datad(wire_add_sub_cella_datad[56:56]),
	.dataf(wire_add_sub_cella_dataf[56:56]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[56:56]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_56.extended_lut = "off",
		add_sub_cella_56.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_56.shared_arith = "off",
		add_sub_cella_56.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_57
	( 
	.cin(wire_add_sub_cella_56cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_57cout[0:0]),
	.datad(wire_add_sub_cella_datad[57:57]),
	.dataf(wire_add_sub_cella_dataf[57:57]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[57:57]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_57.extended_lut = "off",
		add_sub_cella_57.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_57.shared_arith = "off",
		add_sub_cella_57.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_58
	( 
	.cin(wire_add_sub_cella_57cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_58cout[0:0]),
	.datad(wire_add_sub_cella_datad[58:58]),
	.dataf(wire_add_sub_cella_dataf[58:58]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[58:58]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_58.extended_lut = "off",
		add_sub_cella_58.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_58.shared_arith = "off",
		add_sub_cella_58.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_59
	( 
	.cin(wire_add_sub_cella_58cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_59cout[0:0]),
	.datad(wire_add_sub_cella_datad[59:59]),
	.dataf(wire_add_sub_cella_dataf[59:59]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[59:59]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_59.extended_lut = "off",
		add_sub_cella_59.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_59.shared_arith = "off",
		add_sub_cella_59.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_60
	( 
	.cin(wire_add_sub_cella_59cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_60cout[0:0]),
	.datad(wire_add_sub_cella_datad[60:60]),
	.dataf(wire_add_sub_cella_dataf[60:60]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[60:60]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_60.extended_lut = "off",
		add_sub_cella_60.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_60.shared_arith = "off",
		add_sub_cella_60.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_61
	( 
	.cin(wire_add_sub_cella_60cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_61cout[0:0]),
	.datad(wire_add_sub_cella_datad[61:61]),
	.dataf(wire_add_sub_cella_dataf[61:61]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[61:61]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_61.extended_lut = "off",
		add_sub_cella_61.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_61.shared_arith = "off",
		add_sub_cella_61.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_62
	( 
	.cin(wire_add_sub_cella_61cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_62cout[0:0]),
	.datad(wire_add_sub_cella_datad[62:62]),
	.dataf(wire_add_sub_cella_dataf[62:62]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[62:62]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_62.extended_lut = "off",
		add_sub_cella_62.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_62.shared_arith = "off",
		add_sub_cella_62.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_63
	( 
	.cin(wire_add_sub_cella_62cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_63cout[0:0]),
	.datad(wire_add_sub_cella_datad[63:63]),
	.dataf(wire_add_sub_cella_dataf[63:63]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[63:63]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_63.extended_lut = "off",
		add_sub_cella_63.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_63.shared_arith = "off",
		add_sub_cella_63.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_64
	( 
	.cin(wire_add_sub_cella_63cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_64cout[0:0]),
	.datad(wire_add_sub_cella_datad[64:64]),
	.dataf(wire_add_sub_cella_dataf[64:64]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[64:64]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_64.extended_lut = "off",
		add_sub_cella_64.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_64.shared_arith = "off",
		add_sub_cella_64.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_65
	( 
	.cin(wire_add_sub_cella_64cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_65cout[0:0]),
	.datad(wire_add_sub_cella_datad[65:65]),
	.dataf(wire_add_sub_cella_dataf[65:65]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[65:65]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_65.extended_lut = "off",
		add_sub_cella_65.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_65.shared_arith = "off",
		add_sub_cella_65.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_66
	( 
	.cin(wire_add_sub_cella_65cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_66cout[0:0]),
	.datad(wire_add_sub_cella_datad[66:66]),
	.dataf(wire_add_sub_cella_dataf[66:66]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[66:66]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_66.extended_lut = "off",
		add_sub_cella_66.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_66.shared_arith = "off",
		add_sub_cella_66.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_67
	( 
	.cin(wire_add_sub_cella_66cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_67cout[0:0]),
	.datad(wire_add_sub_cella_datad[67:67]),
	.dataf(wire_add_sub_cella_dataf[67:67]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[67:67]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_67.extended_lut = "off",
		add_sub_cella_67.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_67.shared_arith = "off",
		add_sub_cella_67.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_68
	( 
	.cin(wire_add_sub_cella_67cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_68cout[0:0]),
	.datad(wire_add_sub_cella_datad[68:68]),
	.dataf(wire_add_sub_cella_dataf[68:68]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[68:68]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_68.extended_lut = "off",
		add_sub_cella_68.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_68.shared_arith = "off",
		add_sub_cella_68.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_69
	( 
	.cin(wire_add_sub_cella_68cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_69cout[0:0]),
	.datad(wire_add_sub_cella_datad[69:69]),
	.dataf(wire_add_sub_cella_dataf[69:69]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[69:69]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_69.extended_lut = "off",
		add_sub_cella_69.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_69.shared_arith = "off",
		add_sub_cella_69.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_70
	( 
	.cin(wire_add_sub_cella_69cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_70cout[0:0]),
	.datad(wire_add_sub_cella_datad[70:70]),
	.dataf(wire_add_sub_cella_dataf[70:70]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[70:70]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_70.extended_lut = "off",
		add_sub_cella_70.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_70.shared_arith = "off",
		add_sub_cella_70.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_71
	( 
	.cin(wire_add_sub_cella_70cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_71cout[0:0]),
	.datad(wire_add_sub_cella_datad[71:71]),
	.dataf(wire_add_sub_cella_dataf[71:71]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[71:71]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_71.extended_lut = "off",
		add_sub_cella_71.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_71.shared_arith = "off",
		add_sub_cella_71.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_72
	( 
	.cin(wire_add_sub_cella_71cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_72cout[0:0]),
	.datad(wire_add_sub_cella_datad[72:72]),
	.dataf(wire_add_sub_cella_dataf[72:72]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[72:72]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_72.extended_lut = "off",
		add_sub_cella_72.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_72.shared_arith = "off",
		add_sub_cella_72.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_73
	( 
	.cin(wire_add_sub_cella_72cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_73cout[0:0]),
	.datad(wire_add_sub_cella_datad[73:73]),
	.dataf(wire_add_sub_cella_dataf[73:73]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[73:73]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_73.extended_lut = "off",
		add_sub_cella_73.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_73.shared_arith = "off",
		add_sub_cella_73.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_74
	( 
	.cin(wire_add_sub_cella_73cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_74cout[0:0]),
	.datad(wire_add_sub_cella_datad[74:74]),
	.dataf(wire_add_sub_cella_dataf[74:74]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[74:74]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_74.extended_lut = "off",
		add_sub_cella_74.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_74.shared_arith = "off",
		add_sub_cella_74.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_75
	( 
	.cin(wire_add_sub_cella_74cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_75cout[0:0]),
	.datad(wire_add_sub_cella_datad[75:75]),
	.dataf(wire_add_sub_cella_dataf[75:75]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[75:75]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_75.extended_lut = "off",
		add_sub_cella_75.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_75.shared_arith = "off",
		add_sub_cella_75.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_76
	( 
	.cin(wire_add_sub_cella_75cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_76cout[0:0]),
	.datad(wire_add_sub_cella_datad[76:76]),
	.dataf(wire_add_sub_cella_dataf[76:76]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[76:76]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_76.extended_lut = "off",
		add_sub_cella_76.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_76.shared_arith = "off",
		add_sub_cella_76.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_77
	( 
	.cin(wire_le_comb21_cout),
	.combout(),
	.cout(wire_add_sub_cella_77cout[0:0]),
	.datad(wire_add_sub_cella_datad[77:77]),
	.dataf(wire_add_sub_cella_dataf[77:77]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[77:77]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_77.extended_lut = "off",
		add_sub_cella_77.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_77.shared_arith = "off",
		add_sub_cella_77.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_78
	( 
	.cin(wire_add_sub_cella_77cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_78cout[0:0]),
	.datad(wire_add_sub_cella_datad[78:78]),
	.dataf(wire_add_sub_cella_dataf[78:78]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[78:78]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_78.extended_lut = "off",
		add_sub_cella_78.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_78.shared_arith = "off",
		add_sub_cella_78.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_79
	( 
	.cin(wire_add_sub_cella_78cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_79cout[0:0]),
	.datad(wire_add_sub_cella_datad[79:79]),
	.dataf(wire_add_sub_cella_dataf[79:79]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[79:79]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_79.extended_lut = "off",
		add_sub_cella_79.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_79.shared_arith = "off",
		add_sub_cella_79.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_80
	( 
	.cin(wire_add_sub_cella_79cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_80cout[0:0]),
	.datad(wire_add_sub_cella_datad[80:80]),
	.dataf(wire_add_sub_cella_dataf[80:80]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[80:80]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_80.extended_lut = "off",
		add_sub_cella_80.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_80.shared_arith = "off",
		add_sub_cella_80.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_81
	( 
	.cin(wire_add_sub_cella_80cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_81cout[0:0]),
	.datad(wire_add_sub_cella_datad[81:81]),
	.dataf(wire_add_sub_cella_dataf[81:81]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[81:81]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_81.extended_lut = "off",
		add_sub_cella_81.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_81.shared_arith = "off",
		add_sub_cella_81.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_82
	( 
	.cin(wire_add_sub_cella_81cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_82cout[0:0]),
	.datad(wire_add_sub_cella_datad[82:82]),
	.dataf(wire_add_sub_cella_dataf[82:82]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[82:82]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_82.extended_lut = "off",
		add_sub_cella_82.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_82.shared_arith = "off",
		add_sub_cella_82.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_83
	( 
	.cin(wire_add_sub_cella_82cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_83cout[0:0]),
	.datad(wire_add_sub_cella_datad[83:83]),
	.dataf(wire_add_sub_cella_dataf[83:83]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[83:83]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_83.extended_lut = "off",
		add_sub_cella_83.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_83.shared_arith = "off",
		add_sub_cella_83.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_84
	( 
	.cin(wire_add_sub_cella_83cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_84cout[0:0]),
	.datad(wire_add_sub_cella_datad[84:84]),
	.dataf(wire_add_sub_cella_dataf[84:84]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[84:84]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_84.extended_lut = "off",
		add_sub_cella_84.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_84.shared_arith = "off",
		add_sub_cella_84.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_85
	( 
	.cin(wire_add_sub_cella_84cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_85cout[0:0]),
	.datad(wire_add_sub_cella_datad[85:85]),
	.dataf(wire_add_sub_cella_dataf[85:85]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[85:85]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_85.extended_lut = "off",
		add_sub_cella_85.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_85.shared_arith = "off",
		add_sub_cella_85.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_86
	( 
	.cin(wire_add_sub_cella_85cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_86cout[0:0]),
	.datad(wire_add_sub_cella_datad[86:86]),
	.dataf(wire_add_sub_cella_dataf[86:86]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[86:86]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_86.extended_lut = "off",
		add_sub_cella_86.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_86.shared_arith = "off",
		add_sub_cella_86.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_87
	( 
	.cin(wire_add_sub_cella_86cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_87cout[0:0]),
	.datad(wire_add_sub_cella_datad[87:87]),
	.dataf(wire_add_sub_cella_dataf[87:87]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[87:87]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_87.extended_lut = "off",
		add_sub_cella_87.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_87.shared_arith = "off",
		add_sub_cella_87.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_88
	( 
	.cin(wire_add_sub_cella_87cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_88cout[0:0]),
	.datad(wire_add_sub_cella_datad[88:88]),
	.dataf(wire_add_sub_cella_dataf[88:88]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[88:88]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_88.extended_lut = "off",
		add_sub_cella_88.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_88.shared_arith = "off",
		add_sub_cella_88.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_89
	( 
	.cin(wire_add_sub_cella_88cout[0:0]),
	.combout(),
	.cout(),
	.datad(wire_add_sub_cella_datad[89:89]),
	.dataf(wire_add_sub_cella_dataf[89:89]),
	.shareout(),
	.sumout(wire_add_sub_cella_sumout[89:89]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_89.extended_lut = "off",
		add_sub_cella_89.lut_mask = 64'h000000FF0000FF00,
		add_sub_cella_89.shared_arith = "off",
		add_sub_cella_89.lpm_type = "cyclonev_lcell_comb";
	assign
		wire_add_sub_cella_datad = dataa,
		wire_add_sub_cella_dataf = datab;
	cyclonev_lcell_comb   inter_regrs_cina_0
	( 
	.cin(wire_add_sub_cella_44cout[0:0]),
	.combout(),
	.cout(),
	.dataa(1'b1),
	.shareout(),
	.sumout(wire_inter_regrs_cina_sumout[0:0]),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		inter_regrs_cina_0.extended_lut = "off",
		inter_regrs_cina_0.lut_mask = 64'h0000AAAA00005555,
		inter_regrs_cina_0.shared_arith = "off",
		inter_regrs_cina_0.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   inter_regrs_couta_0
	( 
	.cin(1'b0),
	.combout(),
	.cout(wire_inter_regrs_couta_0cout[0:0]),
	.dataa(inter_regrs_cin_ffa0),
	.shareout(),
	.sumout(),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		inter_regrs_couta_0.extended_lut = "off",
		inter_regrs_couta_0.lut_mask = 64'h000055550000AAAA,
		inter_regrs_couta_0.shared_arith = "off",
		inter_regrs_couta_0.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   le_comb18
	( 
	.cin(wire_add_sub_cella_31cout[0:0]),
	.combout(),
	.cout(),
	.dataa(1'b1),
	.shareout(),
	.sumout(wire_le_comb18_sumout),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		le_comb18.extended_lut = "off",
		le_comb18.lut_mask = 64'h0000AAAA00005555,
		le_comb18.shared_arith = "off",
		le_comb18.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   le_comb19
	( 
	.cin(1'b0),
	.combout(),
	.cout(wire_le_comb19_cout),
	.dataa(wire_le_comb18_sumout),
	.shareout(),
	.sumout(),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		le_comb19.extended_lut = "off",
		le_comb19.lut_mask = 64'h000055550000AAAA,
		le_comb19.shared_arith = "off",
		le_comb19.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   le_comb20
	( 
	.cin(wire_add_sub_cella_76cout[0:0]),
	.combout(),
	.cout(),
	.dataa(1'b1),
	.shareout(),
	.sumout(wire_le_comb20_sumout),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		le_comb20.extended_lut = "off",
		le_comb20.lut_mask = 64'h0000AAAA00005555,
		le_comb20.shared_arith = "off",
		le_comb20.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   le_comb21
	( 
	.cin(1'b0),
	.combout(),
	.cout(wire_le_comb21_cout),
	.dataa(wire_le_comb20_sumout),
	.shareout(),
	.sumout(),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		le_comb21.extended_lut = "off",
		le_comb21.lut_mask = 64'h000055550000AAAA,
		le_comb21.shared_arith = "off",
		le_comb21.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   le_comb22
	( 
	.cin(wire_pad_cella_31cout[0:0]),
	.combout(),
	.cout(),
	.dataa(1'b1),
	.shareout(),
	.sumout(wire_le_comb22_sumout),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		le_comb22.extended_lut = "off",
		le_comb22.lut_mask = 64'h0000AAAA00005555,
		le_comb22.shared_arith = "off",
		le_comb22.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   le_comb23
	( 
	.cin(1'b0),
	.combout(),
	.cout(wire_le_comb23_cout),
	.dataa(wire_le_comb22_sumout),
	.shareout(),
	.sumout(),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		le_comb23.extended_lut = "off",
		le_comb23.lut_mask = 64'h000055550000AAAA,
		le_comb23.shared_arith = "off",
		le_comb23.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   le_comb24
	( 
	.cin(wire_pad_cella_76cout[0:0]),
	.combout(),
	.cout(),
	.dataa(1'b1),
	.shareout(),
	.sumout(wire_le_comb24_sumout),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		le_comb24.extended_lut = "off",
		le_comb24.lut_mask = 64'h0000AAAA00005555,
		le_comb24.shared_arith = "off",
		le_comb24.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   le_comb25
	( 
	.cin(1'b0),
	.combout(),
	.cout(wire_le_comb25_cout),
	.dataa(wire_le_comb24_sumout),
	.shareout(),
	.sumout(),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		le_comb25.extended_lut = "off",
		le_comb25.lut_mask = 64'h000055550000AAAA,
		le_comb25.shared_arith = "off",
		le_comb25.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_0
	( 
	.cin(1'b0),
	.combout(),
	.cout(wire_pad_cella_0cout[0:0]),
	.datad(wire_pad_cella_datad[0:0]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_0.extended_lut = "off",
		pad_cella_0.lut_mask = 64'h000000FF0000FF00,
		pad_cella_0.shared_arith = "off",
		pad_cella_0.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_1
	( 
	.cin(wire_pad_cella_0cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_1cout[0:0]),
	.datad(wire_pad_cella_datad[1:1]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[1:1]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_1.extended_lut = "off",
		pad_cella_1.lut_mask = 64'h000000FF0000FF00,
		pad_cella_1.shared_arith = "off",
		pad_cella_1.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_2
	( 
	.cin(wire_pad_cella_1cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_2cout[0:0]),
	.datad(wire_pad_cella_datad[2:2]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[2:2]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_2.extended_lut = "off",
		pad_cella_2.lut_mask = 64'h000000FF0000FF00,
		pad_cella_2.shared_arith = "off",
		pad_cella_2.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_3
	( 
	.cin(wire_pad_cella_2cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_3cout[0:0]),
	.datad(wire_pad_cella_datad[3:3]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[3:3]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_3.extended_lut = "off",
		pad_cella_3.lut_mask = 64'h000000FF0000FF00,
		pad_cella_3.shared_arith = "off",
		pad_cella_3.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_4
	( 
	.cin(wire_pad_cella_3cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_4cout[0:0]),
	.datad(wire_pad_cella_datad[4:4]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[4:4]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_4.extended_lut = "off",
		pad_cella_4.lut_mask = 64'h000000FF0000FF00,
		pad_cella_4.shared_arith = "off",
		pad_cella_4.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_5
	( 
	.cin(wire_pad_cella_4cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_5cout[0:0]),
	.datad(wire_pad_cella_datad[5:5]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[5:5]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_5.extended_lut = "off",
		pad_cella_5.lut_mask = 64'h000000FF0000FF00,
		pad_cella_5.shared_arith = "off",
		pad_cella_5.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_6
	( 
	.cin(wire_pad_cella_5cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_6cout[0:0]),
	.datad(wire_pad_cella_datad[6:6]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[6:6]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_6.extended_lut = "off",
		pad_cella_6.lut_mask = 64'h000000FF0000FF00,
		pad_cella_6.shared_arith = "off",
		pad_cella_6.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_7
	( 
	.cin(wire_pad_cella_6cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_7cout[0:0]),
	.datad(wire_pad_cella_datad[7:7]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[7:7]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_7.extended_lut = "off",
		pad_cella_7.lut_mask = 64'h000000FF0000FF00,
		pad_cella_7.shared_arith = "off",
		pad_cella_7.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_8
	( 
	.cin(wire_pad_cella_7cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_8cout[0:0]),
	.datad(wire_pad_cella_datad[8:8]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[8:8]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_8.extended_lut = "off",
		pad_cella_8.lut_mask = 64'h000000FF0000FF00,
		pad_cella_8.shared_arith = "off",
		pad_cella_8.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_9
	( 
	.cin(wire_pad_cella_8cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_9cout[0:0]),
	.datad(wire_pad_cella_datad[9:9]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[9:9]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_9.extended_lut = "off",
		pad_cella_9.lut_mask = 64'h000000FF0000FF00,
		pad_cella_9.shared_arith = "off",
		pad_cella_9.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_10
	( 
	.cin(wire_pad_cella_9cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_10cout[0:0]),
	.datad(wire_pad_cella_datad[10:10]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[10:10]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_10.extended_lut = "off",
		pad_cella_10.lut_mask = 64'h000000FF0000FF00,
		pad_cella_10.shared_arith = "off",
		pad_cella_10.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_11
	( 
	.cin(wire_pad_cella_10cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_11cout[0:0]),
	.datad(wire_pad_cella_datad[11:11]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[11:11]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_11.extended_lut = "off",
		pad_cella_11.lut_mask = 64'h000000FF0000FF00,
		pad_cella_11.shared_arith = "off",
		pad_cella_11.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_12
	( 
	.cin(wire_pad_cella_11cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_12cout[0:0]),
	.datad(wire_pad_cella_datad[12:12]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[12:12]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_12.extended_lut = "off",
		pad_cella_12.lut_mask = 64'h000000FF0000FF00,
		pad_cella_12.shared_arith = "off",
		pad_cella_12.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_13
	( 
	.cin(wire_pad_cella_12cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_13cout[0:0]),
	.datad(wire_pad_cella_datad[13:13]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[13:13]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_13.extended_lut = "off",
		pad_cella_13.lut_mask = 64'h000000FF0000FF00,
		pad_cella_13.shared_arith = "off",
		pad_cella_13.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_14
	( 
	.cin(wire_pad_cella_13cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_14cout[0:0]),
	.datad(wire_pad_cella_datad[14:14]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[14:14]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_14.extended_lut = "off",
		pad_cella_14.lut_mask = 64'h000000FF0000FF00,
		pad_cella_14.shared_arith = "off",
		pad_cella_14.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_15
	( 
	.cin(wire_pad_cella_14cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_15cout[0:0]),
	.datad(wire_pad_cella_datad[15:15]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[15:15]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_15.extended_lut = "off",
		pad_cella_15.lut_mask = 64'h000000FF0000FF00,
		pad_cella_15.shared_arith = "off",
		pad_cella_15.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_16
	( 
	.cin(wire_pad_cella_15cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_16cout[0:0]),
	.datad(wire_pad_cella_datad[16:16]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[16:16]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_16.extended_lut = "off",
		pad_cella_16.lut_mask = 64'h000000FF0000FF00,
		pad_cella_16.shared_arith = "off",
		pad_cella_16.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_17
	( 
	.cin(wire_pad_cella_16cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_17cout[0:0]),
	.datad(wire_pad_cella_datad[17:17]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[17:17]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_17.extended_lut = "off",
		pad_cella_17.lut_mask = 64'h000000FF0000FF00,
		pad_cella_17.shared_arith = "off",
		pad_cella_17.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_18
	( 
	.cin(wire_pad_cella_17cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_18cout[0:0]),
	.datad(wire_pad_cella_datad[18:18]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[18:18]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_18.extended_lut = "off",
		pad_cella_18.lut_mask = 64'h000000FF0000FF00,
		pad_cella_18.shared_arith = "off",
		pad_cella_18.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_19
	( 
	.cin(wire_pad_cella_18cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_19cout[0:0]),
	.datad(wire_pad_cella_datad[19:19]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[19:19]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_19.extended_lut = "off",
		pad_cella_19.lut_mask = 64'h000000FF0000FF00,
		pad_cella_19.shared_arith = "off",
		pad_cella_19.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_20
	( 
	.cin(wire_pad_cella_19cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_20cout[0:0]),
	.datad(wire_pad_cella_datad[20:20]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[20:20]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_20.extended_lut = "off",
		pad_cella_20.lut_mask = 64'h000000FF0000FF00,
		pad_cella_20.shared_arith = "off",
		pad_cella_20.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_21
	( 
	.cin(wire_pad_cella_20cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_21cout[0:0]),
	.datad(wire_pad_cella_datad[21:21]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[21:21]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_21.extended_lut = "off",
		pad_cella_21.lut_mask = 64'h000000FF0000FF00,
		pad_cella_21.shared_arith = "off",
		pad_cella_21.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_22
	( 
	.cin(wire_pad_cella_21cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_22cout[0:0]),
	.datad(wire_pad_cella_datad[22:22]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[22:22]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_22.extended_lut = "off",
		pad_cella_22.lut_mask = 64'h000000FF0000FF00,
		pad_cella_22.shared_arith = "off",
		pad_cella_22.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_23
	( 
	.cin(wire_pad_cella_22cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_23cout[0:0]),
	.datad(wire_pad_cella_datad[23:23]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[23:23]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_23.extended_lut = "off",
		pad_cella_23.lut_mask = 64'h000000FF0000FF00,
		pad_cella_23.shared_arith = "off",
		pad_cella_23.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_24
	( 
	.cin(wire_pad_cella_23cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_24cout[0:0]),
	.datad(wire_pad_cella_datad[24:24]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[24:24]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_24.extended_lut = "off",
		pad_cella_24.lut_mask = 64'h000000FF0000FF00,
		pad_cella_24.shared_arith = "off",
		pad_cella_24.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_25
	( 
	.cin(wire_pad_cella_24cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_25cout[0:0]),
	.datad(wire_pad_cella_datad[25:25]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[25:25]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_25.extended_lut = "off",
		pad_cella_25.lut_mask = 64'h000000FF0000FF00,
		pad_cella_25.shared_arith = "off",
		pad_cella_25.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_26
	( 
	.cin(wire_pad_cella_25cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_26cout[0:0]),
	.datad(wire_pad_cella_datad[26:26]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[26:26]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_26.extended_lut = "off",
		pad_cella_26.lut_mask = 64'h000000FF0000FF00,
		pad_cella_26.shared_arith = "off",
		pad_cella_26.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_27
	( 
	.cin(wire_pad_cella_26cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_27cout[0:0]),
	.datad(wire_pad_cella_datad[27:27]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[27:27]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_27.extended_lut = "off",
		pad_cella_27.lut_mask = 64'h000000FF0000FF00,
		pad_cella_27.shared_arith = "off",
		pad_cella_27.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_28
	( 
	.cin(wire_pad_cella_27cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_28cout[0:0]),
	.datad(wire_pad_cella_datad[28:28]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[28:28]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_28.extended_lut = "off",
		pad_cella_28.lut_mask = 64'h000000FF0000FF00,
		pad_cella_28.shared_arith = "off",
		pad_cella_28.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_29
	( 
	.cin(wire_pad_cella_28cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_29cout[0:0]),
	.datad(wire_pad_cella_datad[29:29]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[29:29]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_29.extended_lut = "off",
		pad_cella_29.lut_mask = 64'h000000FF0000FF00,
		pad_cella_29.shared_arith = "off",
		pad_cella_29.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_30
	( 
	.cin(wire_pad_cella_29cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_30cout[0:0]),
	.datad(wire_pad_cella_datad[30:30]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[30:30]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_30.extended_lut = "off",
		pad_cella_30.lut_mask = 64'h000000FF0000FF00,
		pad_cella_30.shared_arith = "off",
		pad_cella_30.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_31
	( 
	.cin(wire_pad_cella_30cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_31cout[0:0]),
	.datad(wire_pad_cella_datad[31:31]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[31:31]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_31.extended_lut = "off",
		pad_cella_31.lut_mask = 64'h000000FF0000FF00,
		pad_cella_31.shared_arith = "off",
		pad_cella_31.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_32
	( 
	.cin(wire_le_comb23_cout),
	.combout(),
	.cout(wire_pad_cella_32cout[0:0]),
	.datad(wire_pad_cella_datad[32:32]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[32:32]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_32.extended_lut = "off",
		pad_cella_32.lut_mask = 64'h000000FF0000FF00,
		pad_cella_32.shared_arith = "off",
		pad_cella_32.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_33
	( 
	.cin(wire_pad_cella_32cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_33cout[0:0]),
	.datad(wire_pad_cella_datad[33:33]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[33:33]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_33.extended_lut = "off",
		pad_cella_33.lut_mask = 64'h000000FF0000FF00,
		pad_cella_33.shared_arith = "off",
		pad_cella_33.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_34
	( 
	.cin(wire_pad_cella_33cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_34cout[0:0]),
	.datad(wire_pad_cella_datad[34:34]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[34:34]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_34.extended_lut = "off",
		pad_cella_34.lut_mask = 64'h000000FF0000FF00,
		pad_cella_34.shared_arith = "off",
		pad_cella_34.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_35
	( 
	.cin(wire_pad_cella_34cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_35cout[0:0]),
	.datad(wire_pad_cella_datad[35:35]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[35:35]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_35.extended_lut = "off",
		pad_cella_35.lut_mask = 64'h000000FF0000FF00,
		pad_cella_35.shared_arith = "off",
		pad_cella_35.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_36
	( 
	.cin(wire_pad_cella_35cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_36cout[0:0]),
	.datad(wire_pad_cella_datad[36:36]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[36:36]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_36.extended_lut = "off",
		pad_cella_36.lut_mask = 64'h000000FF0000FF00,
		pad_cella_36.shared_arith = "off",
		pad_cella_36.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_37
	( 
	.cin(wire_pad_cella_36cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_37cout[0:0]),
	.datad(wire_pad_cella_datad[37:37]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[37:37]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_37.extended_lut = "off",
		pad_cella_37.lut_mask = 64'h000000FF0000FF00,
		pad_cella_37.shared_arith = "off",
		pad_cella_37.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_38
	( 
	.cin(wire_pad_cella_37cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_38cout[0:0]),
	.datad(wire_pad_cella_datad[38:38]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[38:38]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_38.extended_lut = "off",
		pad_cella_38.lut_mask = 64'h000000FF0000FF00,
		pad_cella_38.shared_arith = "off",
		pad_cella_38.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_39
	( 
	.cin(wire_pad_cella_38cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_39cout[0:0]),
	.datad(wire_pad_cella_datad[39:39]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[39:39]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_39.extended_lut = "off",
		pad_cella_39.lut_mask = 64'h000000FF0000FF00,
		pad_cella_39.shared_arith = "off",
		pad_cella_39.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_40
	( 
	.cin(wire_pad_cella_39cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_40cout[0:0]),
	.datad(wire_pad_cella_datad[40:40]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[40:40]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_40.extended_lut = "off",
		pad_cella_40.lut_mask = 64'h000000FF0000FF00,
		pad_cella_40.shared_arith = "off",
		pad_cella_40.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_41
	( 
	.cin(wire_pad_cella_40cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_41cout[0:0]),
	.datad(wire_pad_cella_datad[41:41]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[41:41]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_41.extended_lut = "off",
		pad_cella_41.lut_mask = 64'h000000FF0000FF00,
		pad_cella_41.shared_arith = "off",
		pad_cella_41.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_42
	( 
	.cin(wire_pad_cella_41cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_42cout[0:0]),
	.datad(wire_pad_cella_datad[42:42]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[42:42]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_42.extended_lut = "off",
		pad_cella_42.lut_mask = 64'h000000FF0000FF00,
		pad_cella_42.shared_arith = "off",
		pad_cella_42.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_43
	( 
	.cin(wire_pad_cella_42cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_43cout[0:0]),
	.datad(wire_pad_cella_datad[43:43]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[43:43]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_43.extended_lut = "off",
		pad_cella_43.lut_mask = 64'h000000FF0000FF00,
		pad_cella_43.shared_arith = "off",
		pad_cella_43.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_44
	( 
	.cin(wire_pad_cella_43cout[0:0]),
	.combout(),
	.cout(),
	.datad(wire_pad_cella_datad[44:44]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[44:44]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_44.extended_lut = "off",
		pad_cella_44.lut_mask = 64'h000000FF0000FF00,
		pad_cella_44.shared_arith = "off",
		pad_cella_44.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_45
	( 
	.cin(wire_inter_regrs_couta_0cout),
	.combout(),
	.cout(wire_pad_cella_45cout[0:0]),
	.datad(wire_pad_cella_datad[45:45]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[45:45]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_45.extended_lut = "off",
		pad_cella_45.lut_mask = 64'h000000FF0000FF00,
		pad_cella_45.shared_arith = "off",
		pad_cella_45.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_46
	( 
	.cin(wire_pad_cella_45cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_46cout[0:0]),
	.datad(wire_pad_cella_datad[46:46]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[46:46]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_46.extended_lut = "off",
		pad_cella_46.lut_mask = 64'h000000FF0000FF00,
		pad_cella_46.shared_arith = "off",
		pad_cella_46.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_47
	( 
	.cin(wire_pad_cella_46cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_47cout[0:0]),
	.datad(wire_pad_cella_datad[47:47]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[47:47]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_47.extended_lut = "off",
		pad_cella_47.lut_mask = 64'h000000FF0000FF00,
		pad_cella_47.shared_arith = "off",
		pad_cella_47.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_48
	( 
	.cin(wire_pad_cella_47cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_48cout[0:0]),
	.datad(wire_pad_cella_datad[48:48]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[48:48]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_48.extended_lut = "off",
		pad_cella_48.lut_mask = 64'h000000FF0000FF00,
		pad_cella_48.shared_arith = "off",
		pad_cella_48.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_49
	( 
	.cin(wire_pad_cella_48cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_49cout[0:0]),
	.datad(wire_pad_cella_datad[49:49]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[49:49]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_49.extended_lut = "off",
		pad_cella_49.lut_mask = 64'h000000FF0000FF00,
		pad_cella_49.shared_arith = "off",
		pad_cella_49.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_50
	( 
	.cin(wire_pad_cella_49cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_50cout[0:0]),
	.datad(wire_pad_cella_datad[50:50]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[50:50]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_50.extended_lut = "off",
		pad_cella_50.lut_mask = 64'h000000FF0000FF00,
		pad_cella_50.shared_arith = "off",
		pad_cella_50.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_51
	( 
	.cin(wire_pad_cella_50cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_51cout[0:0]),
	.datad(wire_pad_cella_datad[51:51]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[51:51]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_51.extended_lut = "off",
		pad_cella_51.lut_mask = 64'h000000FF0000FF00,
		pad_cella_51.shared_arith = "off",
		pad_cella_51.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_52
	( 
	.cin(wire_pad_cella_51cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_52cout[0:0]),
	.datad(wire_pad_cella_datad[52:52]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[52:52]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_52.extended_lut = "off",
		pad_cella_52.lut_mask = 64'h000000FF0000FF00,
		pad_cella_52.shared_arith = "off",
		pad_cella_52.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_53
	( 
	.cin(wire_pad_cella_52cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_53cout[0:0]),
	.datad(wire_pad_cella_datad[53:53]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[53:53]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_53.extended_lut = "off",
		pad_cella_53.lut_mask = 64'h000000FF0000FF00,
		pad_cella_53.shared_arith = "off",
		pad_cella_53.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_54
	( 
	.cin(wire_pad_cella_53cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_54cout[0:0]),
	.datad(wire_pad_cella_datad[54:54]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[54:54]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_54.extended_lut = "off",
		pad_cella_54.lut_mask = 64'h000000FF0000FF00,
		pad_cella_54.shared_arith = "off",
		pad_cella_54.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_55
	( 
	.cin(wire_pad_cella_54cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_55cout[0:0]),
	.datad(wire_pad_cella_datad[55:55]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[55:55]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_55.extended_lut = "off",
		pad_cella_55.lut_mask = 64'h000000FF0000FF00,
		pad_cella_55.shared_arith = "off",
		pad_cella_55.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_56
	( 
	.cin(wire_pad_cella_55cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_56cout[0:0]),
	.datad(wire_pad_cella_datad[56:56]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[56:56]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_56.extended_lut = "off",
		pad_cella_56.lut_mask = 64'h000000FF0000FF00,
		pad_cella_56.shared_arith = "off",
		pad_cella_56.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_57
	( 
	.cin(wire_pad_cella_56cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_57cout[0:0]),
	.datad(wire_pad_cella_datad[57:57]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[57:57]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_57.extended_lut = "off",
		pad_cella_57.lut_mask = 64'h000000FF0000FF00,
		pad_cella_57.shared_arith = "off",
		pad_cella_57.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_58
	( 
	.cin(wire_pad_cella_57cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_58cout[0:0]),
	.datad(wire_pad_cella_datad[58:58]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[58:58]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_58.extended_lut = "off",
		pad_cella_58.lut_mask = 64'h000000FF0000FF00,
		pad_cella_58.shared_arith = "off",
		pad_cella_58.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_59
	( 
	.cin(wire_pad_cella_58cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_59cout[0:0]),
	.datad(wire_pad_cella_datad[59:59]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[59:59]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_59.extended_lut = "off",
		pad_cella_59.lut_mask = 64'h000000FF0000FF00,
		pad_cella_59.shared_arith = "off",
		pad_cella_59.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_60
	( 
	.cin(wire_pad_cella_59cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_60cout[0:0]),
	.datad(wire_pad_cella_datad[60:60]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[60:60]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_60.extended_lut = "off",
		pad_cella_60.lut_mask = 64'h000000FF0000FF00,
		pad_cella_60.shared_arith = "off",
		pad_cella_60.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_61
	( 
	.cin(wire_pad_cella_60cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_61cout[0:0]),
	.datad(wire_pad_cella_datad[61:61]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[61:61]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_61.extended_lut = "off",
		pad_cella_61.lut_mask = 64'h000000FF0000FF00,
		pad_cella_61.shared_arith = "off",
		pad_cella_61.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_62
	( 
	.cin(wire_pad_cella_61cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_62cout[0:0]),
	.datad(wire_pad_cella_datad[62:62]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[62:62]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_62.extended_lut = "off",
		pad_cella_62.lut_mask = 64'h000000FF0000FF00,
		pad_cella_62.shared_arith = "off",
		pad_cella_62.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_63
	( 
	.cin(wire_pad_cella_62cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_63cout[0:0]),
	.datad(wire_pad_cella_datad[63:63]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[63:63]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_63.extended_lut = "off",
		pad_cella_63.lut_mask = 64'h000000FF0000FF00,
		pad_cella_63.shared_arith = "off",
		pad_cella_63.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_64
	( 
	.cin(wire_pad_cella_63cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_64cout[0:0]),
	.datad(wire_pad_cella_datad[64:64]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[64:64]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_64.extended_lut = "off",
		pad_cella_64.lut_mask = 64'h000000FF0000FF00,
		pad_cella_64.shared_arith = "off",
		pad_cella_64.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_65
	( 
	.cin(wire_pad_cella_64cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_65cout[0:0]),
	.datad(wire_pad_cella_datad[65:65]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[65:65]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_65.extended_lut = "off",
		pad_cella_65.lut_mask = 64'h000000FF0000FF00,
		pad_cella_65.shared_arith = "off",
		pad_cella_65.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_66
	( 
	.cin(wire_pad_cella_65cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_66cout[0:0]),
	.datad(wire_pad_cella_datad[66:66]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[66:66]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_66.extended_lut = "off",
		pad_cella_66.lut_mask = 64'h000000FF0000FF00,
		pad_cella_66.shared_arith = "off",
		pad_cella_66.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_67
	( 
	.cin(wire_pad_cella_66cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_67cout[0:0]),
	.datad(wire_pad_cella_datad[67:67]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[67:67]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_67.extended_lut = "off",
		pad_cella_67.lut_mask = 64'h000000FF0000FF00,
		pad_cella_67.shared_arith = "off",
		pad_cella_67.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_68
	( 
	.cin(wire_pad_cella_67cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_68cout[0:0]),
	.datad(wire_pad_cella_datad[68:68]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[68:68]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_68.extended_lut = "off",
		pad_cella_68.lut_mask = 64'h000000FF0000FF00,
		pad_cella_68.shared_arith = "off",
		pad_cella_68.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_69
	( 
	.cin(wire_pad_cella_68cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_69cout[0:0]),
	.datad(wire_pad_cella_datad[69:69]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[69:69]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_69.extended_lut = "off",
		pad_cella_69.lut_mask = 64'h000000FF0000FF00,
		pad_cella_69.shared_arith = "off",
		pad_cella_69.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_70
	( 
	.cin(wire_pad_cella_69cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_70cout[0:0]),
	.datad(wire_pad_cella_datad[70:70]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[70:70]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_70.extended_lut = "off",
		pad_cella_70.lut_mask = 64'h000000FF0000FF00,
		pad_cella_70.shared_arith = "off",
		pad_cella_70.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_71
	( 
	.cin(wire_pad_cella_70cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_71cout[0:0]),
	.datad(wire_pad_cella_datad[71:71]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[71:71]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_71.extended_lut = "off",
		pad_cella_71.lut_mask = 64'h000000FF0000FF00,
		pad_cella_71.shared_arith = "off",
		pad_cella_71.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_72
	( 
	.cin(wire_pad_cella_71cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_72cout[0:0]),
	.datad(wire_pad_cella_datad[72:72]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[72:72]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_72.extended_lut = "off",
		pad_cella_72.lut_mask = 64'h000000FF0000FF00,
		pad_cella_72.shared_arith = "off",
		pad_cella_72.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_73
	( 
	.cin(wire_pad_cella_72cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_73cout[0:0]),
	.datad(wire_pad_cella_datad[73:73]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[73:73]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_73.extended_lut = "off",
		pad_cella_73.lut_mask = 64'h000000FF0000FF00,
		pad_cella_73.shared_arith = "off",
		pad_cella_73.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_74
	( 
	.cin(wire_pad_cella_73cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_74cout[0:0]),
	.datad(wire_pad_cella_datad[74:74]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[74:74]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_74.extended_lut = "off",
		pad_cella_74.lut_mask = 64'h000000FF0000FF00,
		pad_cella_74.shared_arith = "off",
		pad_cella_74.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_75
	( 
	.cin(wire_pad_cella_74cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_75cout[0:0]),
	.datad(wire_pad_cella_datad[75:75]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[75:75]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_75.extended_lut = "off",
		pad_cella_75.lut_mask = 64'h000000FF0000FF00,
		pad_cella_75.shared_arith = "off",
		pad_cella_75.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_76
	( 
	.cin(wire_pad_cella_75cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_76cout[0:0]),
	.datad(wire_pad_cella_datad[76:76]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[76:76]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_76.extended_lut = "off",
		pad_cella_76.lut_mask = 64'h000000FF0000FF00,
		pad_cella_76.shared_arith = "off",
		pad_cella_76.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_77
	( 
	.cin(wire_le_comb25_cout),
	.combout(),
	.cout(wire_pad_cella_77cout[0:0]),
	.datad(wire_pad_cella_datad[77:77]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[77:77]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_77.extended_lut = "off",
		pad_cella_77.lut_mask = 64'h000000FF0000FF00,
		pad_cella_77.shared_arith = "off",
		pad_cella_77.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_78
	( 
	.cin(wire_pad_cella_77cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_78cout[0:0]),
	.datad(wire_pad_cella_datad[78:78]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[78:78]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_78.extended_lut = "off",
		pad_cella_78.lut_mask = 64'h000000FF0000FF00,
		pad_cella_78.shared_arith = "off",
		pad_cella_78.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_79
	( 
	.cin(wire_pad_cella_78cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_79cout[0:0]),
	.datad(wire_pad_cella_datad[79:79]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[79:79]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_79.extended_lut = "off",
		pad_cella_79.lut_mask = 64'h000000FF0000FF00,
		pad_cella_79.shared_arith = "off",
		pad_cella_79.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_80
	( 
	.cin(wire_pad_cella_79cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_80cout[0:0]),
	.datad(wire_pad_cella_datad[80:80]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[80:80]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_80.extended_lut = "off",
		pad_cella_80.lut_mask = 64'h000000FF0000FF00,
		pad_cella_80.shared_arith = "off",
		pad_cella_80.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_81
	( 
	.cin(wire_pad_cella_80cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_81cout[0:0]),
	.datad(wire_pad_cella_datad[81:81]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[81:81]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_81.extended_lut = "off",
		pad_cella_81.lut_mask = 64'h000000FF0000FF00,
		pad_cella_81.shared_arith = "off",
		pad_cella_81.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_82
	( 
	.cin(wire_pad_cella_81cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_82cout[0:0]),
	.datad(wire_pad_cella_datad[82:82]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[82:82]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_82.extended_lut = "off",
		pad_cella_82.lut_mask = 64'h000000FF0000FF00,
		pad_cella_82.shared_arith = "off",
		pad_cella_82.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_83
	( 
	.cin(wire_pad_cella_82cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_83cout[0:0]),
	.datad(wire_pad_cella_datad[83:83]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[83:83]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_83.extended_lut = "off",
		pad_cella_83.lut_mask = 64'h000000FF0000FF00,
		pad_cella_83.shared_arith = "off",
		pad_cella_83.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_84
	( 
	.cin(wire_pad_cella_83cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_84cout[0:0]),
	.datad(wire_pad_cella_datad[84:84]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[84:84]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_84.extended_lut = "off",
		pad_cella_84.lut_mask = 64'h000000FF0000FF00,
		pad_cella_84.shared_arith = "off",
		pad_cella_84.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_85
	( 
	.cin(wire_pad_cella_84cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_85cout[0:0]),
	.datad(wire_pad_cella_datad[85:85]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[85:85]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_85.extended_lut = "off",
		pad_cella_85.lut_mask = 64'h000000FF0000FF00,
		pad_cella_85.shared_arith = "off",
		pad_cella_85.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_86
	( 
	.cin(wire_pad_cella_85cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_86cout[0:0]),
	.datad(wire_pad_cella_datad[86:86]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[86:86]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_86.extended_lut = "off",
		pad_cella_86.lut_mask = 64'h000000FF0000FF00,
		pad_cella_86.shared_arith = "off",
		pad_cella_86.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_87
	( 
	.cin(wire_pad_cella_86cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_87cout[0:0]),
	.datad(wire_pad_cella_datad[87:87]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[87:87]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_87.extended_lut = "off",
		pad_cella_87.lut_mask = 64'h000000FF0000FF00,
		pad_cella_87.shared_arith = "off",
		pad_cella_87.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_88
	( 
	.cin(wire_pad_cella_87cout[0:0]),
	.combout(),
	.cout(wire_pad_cella_88cout[0:0]),
	.datad(wire_pad_cella_datad[88:88]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[88:88]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_88.extended_lut = "off",
		pad_cella_88.lut_mask = 64'h000000FF0000FF00,
		pad_cella_88.shared_arith = "off",
		pad_cella_88.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   pad_cella_89
	( 
	.cin(wire_pad_cella_88cout[0:0]),
	.combout(),
	.cout(),
	.datad(wire_pad_cella_datad[89:89]),
	.dataf(1'b0),
	.shareout(),
	.sumout(wire_pad_cella_sumout[89:89]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		pad_cella_89.extended_lut = "off",
		pad_cella_89.lut_mask = 64'h000000FF0000FF00,
		pad_cella_89.shared_arith = "off",
		pad_cella_89.lpm_type = "cyclonev_lcell_comb";
	assign
		wire_pad_cella_datad = {add_sub_cell_ffa};
	assign
		result = pad_cell_ffa[89:0];
endmodule //ALTFP_EXa_add_sub1

//synthesis_resources = lut 190 reg 181 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  ALTFP_EXa_altmult_opt_csa12
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [89:0]  dataa;
	input   [89:0]  datab;
	output   [89:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [89:0]  dataa;
	tri0   [89:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [89:0]   wire_add_sub14_result;
	wire  [89:0]  result_w;

	ALTFP_EXa_add_sub1   add_sub14
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.dataa(dataa),
	.datab(datab),
	.result(wire_add_sub14_result));
	assign
		result = result_w,
		result_w = wire_add_sub14_result;
endmodule //ALTFP_EXa_altmult_opt_csa12


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=31 cout dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=31 cout dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=31 LPM_WIDTHB=28 LPM_WIDTHP=59 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_mult 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_padd 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ cbx_util_mgl 2016:04:27:18:05:34:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  ALTFP_EXa_mult1234
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [30:0]  dataa;
	input   [27:0]  datab;
	output   [58:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg  [58:0]  result_output_reg;
	wire [30:0]    dataa_wire;
	wire [27:0]    datab_wire;
	wire [58:0]    result_wire;


	// synopsys translate_off
	initial
		result_output_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			result_output_reg <= 59'b0;
		else
			if (clken == 1'b1)
				result_output_reg <= result_wire[58:0];

	assign dataa_wire = dataa;
	assign datab_wire = datab;
	assign result_wire = dataa_wire * datab_wire;
	assign result = ({result_output_reg});

endmodule //ALTFP_EXa_mult1234

//synthesis_resources = lut 252 reg 639 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  ALTFP_EXa_altmult_opt12
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [60:0]  dataa;
	input   [58:0]  datab;
	output   [119:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [89:0]   wire_sum_result;
	reg	[89:0]	car_two_adj_reg0;
	reg	[30:0]	lowest_bits_wi_reg0;
	reg	[30:0]	lowest_bits_wi_reg1;
	reg	[30:0]	lowest_bits_wi_reg2;
	reg	[61:0]	lsb_prod_wi_reg0;
	reg	[63:0]	mid_prod_wi_reg0;
	reg	[58:0]	msb_prod_wi_reg0;
	reg	[89:0]	sum_two_reg0;
	wire	[31:0]	wire_compress_a_result_int;
	wire	wire_compress_a_cout;
	wire	[30:0]	wire_compress_a_dataa;
	wire	[30:0]	wire_compress_a_datab;
	wire	[30:0]	wire_compress_a_result;
	wire	[31:0]	wire_compress_b_result_int;
	wire	wire_compress_b_cout;
	wire	[30:0]	wire_compress_b_dataa;
	wire	[30:0]	wire_compress_b_datab;
	wire	[30:0]	wire_compress_b_result;
	wire  [61:0]   wire_lsb_prod_result;
	wire  [63:0]   wire_mid_prod_result;
	wire  [30:0]   wire_msb_prod_dataa;
	wire  [27:0]   wire_msb_prod_datab;
	wire  [58:0]   wire_msb_prod_result;
	wire  [89:0]  car_one;
	wire  [89:0]  car_one_adj;
	wire  [89:0]  car_two;
	wire  [89:0]  car_two_adj;
	wire  [89:0]  car_two_wo;
	wire  [30:0]  lowest_bits_wi;
	wire  [30:0]  lowest_bits_wo;
	wire  [61:0]  lsb_prod_wi;
	wire  [61:0]  lsb_prod_wo;
	wire  [63:0]  mid_prod_wi;
	wire  [63:0]  mid_prod_wo;
	wire  [58:0]  msb_prod_out;
	wire  [58:0]  msb_prod_wi;
	wire  [58:0]  msb_prod_wo;
	wire  [89:0]  neg_lsb;
	wire  [89:0]  neg_msb;
	wire  [89:0]  sum_one;
	wire  [89:0]  sum_two;
	wire  [89:0]  sum_two_wo;
	wire  [89:0]  vector1;
	wire  [89:0]  vector2;
	wire  [60:0]  wire_a;
	wire  [58:0]  wire_b;

	ALTFP_EXa_altmult_opt_csa12   sum
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.dataa(car_two_wo),
	.datab(sum_two_wo),
	.result(wire_sum_result));
	// synopsys translate_off
	initial
		car_two_adj_reg0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) car_two_adj_reg0 <= 90'b0;
		else if  (clken == 1'b1)   car_two_adj_reg0 <= car_two_adj;
	// synopsys translate_off
	initial
		lowest_bits_wi_reg0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) lowest_bits_wi_reg0 <= 31'b0;
		else if  (clken == 1'b1)   lowest_bits_wi_reg0 <= lowest_bits_wi;
	// synopsys translate_off
	initial
		lowest_bits_wi_reg1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) lowest_bits_wi_reg1 <= 31'b0;
		else if  (clken == 1'b1)   lowest_bits_wi_reg1 <= lowest_bits_wi_reg0;
	// synopsys translate_off
	initial
		lowest_bits_wi_reg2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) lowest_bits_wi_reg2 <= 31'b0;
		else if  (clken == 1'b1)   lowest_bits_wi_reg2 <= lowest_bits_wi_reg1;
	// synopsys translate_off
	initial
		lsb_prod_wi_reg0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) lsb_prod_wi_reg0 <= 62'b0;
		else if  (clken == 1'b1)   lsb_prod_wi_reg0 <= lsb_prod_wi;
	// synopsys translate_off
	initial
		mid_prod_wi_reg0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) mid_prod_wi_reg0 <= 64'b0;
		else if  (clken == 1'b1)   mid_prod_wi_reg0 <= mid_prod_wi;
	// synopsys translate_off
	initial
		msb_prod_wi_reg0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) msb_prod_wi_reg0 <= 59'b0;
		else if  (clken == 1'b1)   msb_prod_wi_reg0 <= msb_prod_wi;
	// synopsys translate_off
	initial
		sum_two_reg0 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sum_two_reg0 <= 90'b0;
		else if  (clken == 1'b1)   sum_two_reg0 <= sum_two;
	assign
		wire_compress_a_result_int = wire_compress_a_dataa + wire_compress_a_datab;
	assign
		wire_compress_a_result = wire_compress_a_result_int[30:0],
		wire_compress_a_cout = wire_compress_a_result_int[31:31];
	assign
		wire_compress_a_dataa = {1'b0, wire_a[60:31]},
		wire_compress_a_datab = wire_a[30:0];
	assign
		wire_compress_b_result_int = wire_compress_b_dataa + wire_compress_b_datab;
	assign
		wire_compress_b_result = wire_compress_b_result_int[30:0],
		wire_compress_b_cout = wire_compress_b_result_int[31:31];
	assign
		wire_compress_b_dataa = {{3{1'b0}}, wire_b[58:31]},
		wire_compress_b_datab = wire_b[30:0];
	ALTFP_EXa_mult1   lsb_prod
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.dataa(wire_a[30:0]),
	.datab(wire_b[30:0]),
	.result(wire_lsb_prod_result));
	ALTFP_EXa_mult12   mid_prod
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.dataa({wire_compress_a_cout, wire_compress_a_result}),
	.datab({wire_compress_b_cout, wire_compress_b_result}),
	.result(wire_mid_prod_result));
	ALTFP_EXa_mult1234   msb_prod
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.dataa({1'b0, wire_a[60:31]}),
	.datab(wire_b[58:31]),
	.result(wire_msb_prod_result));
	assign
		car_one = {(((vector2[89] & neg_msb[89]) | (vector2[89] & neg_lsb[89])) | (neg_msb[89] & neg_lsb[89])), (((vector2[88] & neg_msb[88]) | (vector2[88] & neg_lsb[88])) | (neg_msb[88] & neg_lsb[88])), (((vector2[87] & neg_msb[87]) | (vector2[87] & neg_lsb[87])) | (neg_msb[87] & neg_lsb[87])), (((vector2[86] & neg_msb[86]) | (vector2[86] & neg_lsb[86])) | (neg_msb[86] & neg_lsb[86])), (((vector2[85] & neg_msb[85]) | (vector2[85] & neg_lsb[85])) | (neg_msb[85] & neg_lsb[85])), (((vector2[84] & neg_msb[84]) | (vector2[84] & neg_lsb[84])) | (neg_msb[84] & neg_lsb[84])), (((vector2[83] & neg_msb[83]) | (vector2[83] & neg_lsb[83])) | (neg_msb[83] & neg_lsb[83])), (((vector2[82] & neg_msb[82]) | (vector2[82] & neg_lsb[82])) | (neg_msb[82] & neg_lsb[82])), (((vector2[81] & neg_msb[81]) | (vector2[81] & neg_lsb[81])) | (neg_msb[81] & neg_lsb[81])), (((vector2[80] & neg_msb[80]) | (vector2[80] & neg_lsb[80])) | (neg_msb[80] & neg_lsb[80])), (((vector2[79] & neg_msb[79]) | (vector2[79] & neg_lsb[79])) | (neg_msb[79] & neg_lsb[79])), (((vector2[78] & neg_msb[78]) | (vector2[78] & neg_lsb[78])) | (neg_msb[78] & neg_lsb[78])), (((vector2[77] & neg_msb[77]) | (vector2[77] & neg_lsb[77])) | (neg_msb[77] & neg_lsb[77])), (((vector2[76] & neg_msb[76]) | (vector2[76] & neg_lsb[76])) | (neg_msb[76] & neg_lsb[76])), (((vector2[75] & neg_msb[75]) | (vector2[75] & neg_lsb[75])) | (neg_msb[75] & neg_lsb[75])), (((vector2[74] & neg_msb[74]) | (vector2[74] & neg_lsb[74])) | (neg_msb[74] & neg_lsb[74])), (((vector2[73] & neg_msb[73]) | (vector2[73] & neg_lsb[73])) | (neg_msb[73] & neg_lsb[73])), (((vector2[72] & neg_msb[72]) | (vector2[72] & neg_lsb[72])) | (neg_msb[72] & neg_lsb[72])), (((vector2[71] & neg_msb[71]) | (vector2[71] & neg_lsb[71])) | (neg_msb[71] & neg_lsb[71])), (((vector2[70] & neg_msb[70]) | (vector2[70] & neg_lsb[70])) | (neg_msb[70] & neg_lsb[70])), (((vector2[69] & neg_msb[69]) | (vector2[69] & neg_lsb[69])) | (neg_msb[69] & neg_lsb[69])), (((vector2[68] & neg_msb[68]) | (vector2[68] & neg_lsb[68])) | (neg_msb[68] & neg_lsb[68]
)), (((vector2[67] & neg_msb[67]) | (vector2[67] & neg_lsb[67])) | (neg_msb[67] & neg_lsb[67])), (((vector2[66] & neg_msb[66]) | (vector2[66] & neg_lsb[66])) | (neg_msb[66] & neg_lsb[66])), (((vector2[65] & neg_msb[65]) | (vector2[65] & neg_lsb[65])) | (neg_msb[65] & neg_lsb[65])), (((vector2[64] & neg_msb[64]) | (vector2[64] & neg_lsb[64])) | (neg_msb[64] & neg_lsb[64])), (((vector2[63] & neg_msb[63]) | (vector2[63] & neg_lsb[63])) | (neg_msb[63] & neg_lsb[63])), (((vector2[62] & neg_msb[62]) | (vector2[62] & neg_lsb[62])) | (neg_msb[62] & neg_lsb[62])), (((vector2[61] & neg_msb[61]) | (vector2[61] & neg_lsb[61])) | (neg_msb[61] & neg_lsb[61])), (((vector2[60] & neg_msb[60]) | (vector2[60] & neg_lsb[60])) | (neg_msb[60] & neg_lsb[60])), (((vector2[59] & neg_msb[59]) | (vector2[59] & neg_lsb[59])) | (neg_msb[59] & neg_lsb[59])), (((vector2[58] & neg_msb[58]) | (vector2[58] & neg_lsb[58])) | (neg_msb[58] & neg_lsb[58])), (((vector2[57] & neg_msb[57]) | (vector2[57] & neg_lsb[57])) | (neg_msb[57] & neg_lsb[57])), (((vector2[56] & neg_msb[56]) | (vector2[56] & neg_lsb[56])) | (neg_msb[56] & neg_lsb[56])), (((vector2[55] & neg_msb[55]) | (vector2[55] & neg_lsb[55])) | (neg_msb[55] & neg_lsb[55])), (((vector2[54] & neg_msb[54]) | (vector2[54] & neg_lsb[54])) | (neg_msb[54] & neg_lsb[54])), (((vector2[53] & neg_msb[53]) | (vector2[53] & neg_lsb[53])) | (neg_msb[53] & neg_lsb[53])), (((vector2[52] & neg_msb[52]) | (vector2[52] & neg_lsb[52])) | (neg_msb[52] & neg_lsb[52])), (((vector2[51] & neg_msb[51]) | (vector2[51] & neg_lsb[51])) | (neg_msb[51] & neg_lsb[51])), (((vector2[50] & neg_msb[50]) | (vector2[50] & neg_lsb[50])) | (neg_msb[50] & neg_lsb[50])), (((vector2[49] & neg_msb[49]) | (vector2[49] & neg_lsb[49])) | (neg_msb[49] & neg_lsb[49])), (((vector2[48] & neg_msb[48]) | (vector2[48] & neg_lsb[48])) | (neg_msb[48] & neg_lsb[48])), (((vector2[47] & neg_msb[47]) | (vector2[47] & neg_lsb[47])) | (neg_msb[47] & neg_lsb[47])), (((vector2[46] & neg_msb[46]) | (vector2[46] & neg_lsb[46])) | (neg_msb[46] & neg_lsb[46]))
, (((vector2[45] & neg_msb[45]) | (vector2[45] & neg_lsb[45])) | (neg_msb[45] & neg_lsb[45])), (((vector2[44] & neg_msb[44]) | (vector2[44] & neg_lsb[44])) | (neg_msb[44] & neg_lsb[44])), (((vector2[43] & neg_msb[43]) | (vector2[43] & neg_lsb[43])) | (neg_msb[43] & neg_lsb[43])), (((vector2[42] & neg_msb[42]) | (vector2[42] & neg_lsb[42])) | (neg_msb[42] & neg_lsb[42])), (((vector2[41] & neg_msb[41]) | (vector2[41] & neg_lsb[41])) | (neg_msb[41] & neg_lsb[41])), (((vector2[40] & neg_msb[40]) | (vector2[40] & neg_lsb[40])) | (neg_msb[40] & neg_lsb[40])), (((vector2[39] & neg_msb[39]) | (vector2[39] & neg_lsb[39])) | (neg_msb[39] & neg_lsb[39])), (((vector2[38] & neg_msb[38]) | (vector2[38] & neg_lsb[38])) | (neg_msb[38] & neg_lsb[38])), (((vector2[37] & neg_msb[37]) | (vector2[37] & neg_lsb[37])) | (neg_msb[37] & neg_lsb[37])), (((vector2[36] & neg_msb[36]) | (vector2[36] & neg_lsb[36])) | (neg_msb[36] & neg_lsb[36])), (((vector2[35] & neg_msb[35]) | (vector2[35] & neg_lsb[35])) | (neg_msb[35] & neg_lsb[35])), (((vector2[34] & neg_msb[34]) | (vector2[34] & neg_lsb[34])) | (neg_msb[34] & neg_lsb[34])), (((vector2[33] & neg_msb[33]) | (vector2[33] & neg_lsb[33])) | (neg_msb[33] & neg_lsb[33])), (((vector2[32] & neg_msb[32]) | (vector2[32] & neg_lsb[32])) | (neg_msb[32] & neg_lsb[32])), (((vector2[31] & neg_msb[31]) | (vector2[31] & neg_lsb[31])) | (neg_msb[31] & neg_lsb[31])), (((vector2[30] & neg_msb[30]) | (vector2[30] & neg_lsb[30])) | (neg_msb[30] & neg_lsb[30])), (((vector2[29] & neg_msb[29]) | (vector2[29] & neg_lsb[29])) | (neg_msb[29] & neg_lsb[29])), (((vector2[28] & neg_msb[28]) | (vector2[28] & neg_lsb[28])) | (neg_msb[28] & neg_lsb[28])), (((vector2[27] & neg_msb[27]) | (vector2[27] & neg_lsb[27])) | (neg_msb[27] & neg_lsb[27])), (((vector2[26] & neg_msb[26]) | (vector2[26] & neg_lsb[26])) | (neg_msb[26] & neg_lsb[26])), (((vector2[25] & neg_msb[25]) | (vector2[25] & neg_lsb[25])) | (neg_msb[25] & neg_lsb[25])), (((vector2[24] & neg_msb[24]) | (vector2[24] & neg_lsb[24])) | (neg_msb[24] & neg_lsb[24])), 
(((vector2[23] & neg_msb[23]) | (vector2[23] & neg_lsb[23])) | (neg_msb[23] & neg_lsb[23])), (((vector2[22] & neg_msb[22]) | (vector2[22] & neg_lsb[22])) | (neg_msb[22] & neg_lsb[22])), (((vector2[21] & neg_msb[21]) | (vector2[21] & neg_lsb[21])) | (neg_msb[21] & neg_lsb[21])), (((vector2[20] & neg_msb[20]) | (vector2[20] & neg_lsb[20])) | (neg_msb[20] & neg_lsb[20])), (((vector2[19] & neg_msb[19]) | (vector2[19] & neg_lsb[19])) | (neg_msb[19] & neg_lsb[19])), (((vector2[18] & neg_msb[18]) | (vector2[18] & neg_lsb[18])) | (neg_msb[18] & neg_lsb[18])), (((vector2[17] & neg_msb[17]) | (vector2[17] & neg_lsb[17])) | (neg_msb[17] & neg_lsb[17])), (((vector2[16] & neg_msb[16]) | (vector2[16] & neg_lsb[16])) | (neg_msb[16] & neg_lsb[16])), (((vector2[15] & neg_msb[15]) | (vector2[15] & neg_lsb[15])) | (neg_msb[15] & neg_lsb[15])), (((vector2[14] & neg_msb[14]) | (vector2[14] & neg_lsb[14])) | (neg_msb[14] & neg_lsb[14])), (((vector2[13] & neg_msb[13]) | (vector2[13] & neg_lsb[13])) | (neg_msb[13] & neg_lsb[13])), (((vector2[12] & neg_msb[12]) | (vector2[12] & neg_lsb[12])) | (neg_msb[12] & neg_lsb[12])), (((vector2[11] & neg_msb[11]) | (vector2[11] & neg_lsb[11])) | (neg_msb[11] & neg_lsb[11])), (((vector2[10] & neg_msb[10]) | (vector2[10] & neg_lsb[10])) | (neg_msb[10] & neg_lsb[10])), (((vector2[9] & neg_msb[9]) | (vector2[9] & neg_lsb[9])) | (neg_msb[9] & neg_lsb[9])), (((vector2[8] & neg_msb[8]) | (vector2[8] & neg_lsb[8])) | (neg_msb[8] & neg_lsb[8])), (((vector2[7] & neg_msb[7]) | (vector2[7] & neg_lsb[7])) | (neg_msb[7] & neg_lsb[7])), (((vector2[6] & neg_msb[6]) | (vector2[6] & neg_lsb[6])) | (neg_msb[6] & neg_lsb[6])), (((vector2[5] & neg_msb[5]) | (vector2[5] & neg_lsb[5])) | (neg_msb[5] & neg_lsb[5])), (((vector2[4] & neg_msb[4]) | (vector2[4] & neg_lsb[4])) | (neg_msb[4] & neg_lsb[4])), (((vector2[3] & neg_msb[3]) | (vector2[3] & neg_lsb[3])) | (neg_msb[3] & neg_lsb[3])), (((vector2[2] & neg_msb[2]) | (vector2[2] & neg_lsb[2])) | (neg_msb[2] & neg_lsb[2])), (((vector2[1] & neg_msb[1]) | (vector2[1] & neg_lsb[1]
)) | (neg_msb[1] & neg_lsb[1])), (((vector2[0] & neg_msb[0]) | (vector2[0] & neg_lsb[0])) | (neg_msb[0] & neg_lsb[0]))},
		car_one_adj = {car_one[88:0], 1'b1},
		car_two = {(((vector1[89] & sum_one[89]) | (vector1[89] & car_one_adj[89])) | (sum_one[89] & car_one_adj[89])), (((vector1[88] & sum_one[88]) | (vector1[88] & car_one_adj[88])) | (sum_one[88] & car_one_adj[88])), (((vector1[87] & sum_one[87]) | (vector1[87] & car_one_adj[87])) | (sum_one[87] & car_one_adj[87])), (((vector1[86] & sum_one[86]) | (vector1[86] & car_one_adj[86])) | (sum_one[86] & car_one_adj[86])), (((vector1[85] & sum_one[85]) | (vector1[85] & car_one_adj[85])) | (sum_one[85] & car_one_adj[85])), (((vector1[84] & sum_one[84]) | (vector1[84] & car_one_adj[84])) | (sum_one[84] & car_one_adj[84])), (((vector1[83] & sum_one[83]) | (vector1[83] & car_one_adj[83])) | (sum_one[83] & car_one_adj[83])), (((vector1[82] & sum_one[82]) | (vector1[82] & car_one_adj[82])) | (sum_one[82] & car_one_adj[82])), (((vector1[81] & sum_one[81]) | (vector1[81] & car_one_adj[81])) | (sum_one[81] & car_one_adj[81])), (((vector1[80] & sum_one[80]) | (vector1[80] & car_one_adj[80])) | (sum_one[80] & car_one_adj[80])), (((vector1[79] & sum_one[79]) | (vector1[79] & car_one_adj[79])) | (sum_one[79] & car_one_adj[79])), (((vector1[78] & sum_one[78]) | (vector1[78] & car_one_adj[78])) | (sum_one[78] & car_one_adj[78])), (((vector1[77] & sum_one[77]) | (vector1[77] & car_one_adj[77])) | (sum_one[77] & car_one_adj[77])), (((vector1[76] & sum_one[76]) | (vector1[76] & car_one_adj[76])) | (sum_one[76] & car_one_adj[76])), (((vector1[75] & sum_one[75]) | (vector1[75] & car_one_adj[75])) | (sum_one[75] & car_one_adj[75])), (((vector1[74] & sum_one[74]) | (vector1[74] & car_one_adj[74])) | (sum_one[74] & car_one_adj[74])), (((vector1[73] & sum_one[73]) | (vector1[73] & car_one_adj[73])) | (sum_one[73] & car_one_adj[73])), (((vector1[72] & sum_one[72]) | (vector1[72] & car_one_adj[72])) | (sum_one[72] & car_one_adj[72])), (((vector1[71] & sum_one[71]) | (vector1[71] & car_one_adj[71])) | (sum_one[71] & car_one_adj[71])), (((vector1[70] & sum_one[70]) | (vector1[70] & car_one_adj[70])) | (sum_one[70] & car_one_adj[70])), (((vector1[69] 
& sum_one[69]) | (vector1[69] & car_one_adj[69])) | (sum_one[69] & car_one_adj[69])), (((vector1[68] & sum_one[68]) | (vector1[68] & car_one_adj[68])) | (sum_one[68] & car_one_adj[68])), (((vector1[67] & sum_one[67]) | (vector1[67] & car_one_adj[67])) | (sum_one[67] & car_one_adj[67])), (((vector1[66] & sum_one[66]) | (vector1[66] & car_one_adj[66])) | (sum_one[66] & car_one_adj[66])), (((vector1[65] & sum_one[65]) | (vector1[65] & car_one_adj[65])) | (sum_one[65] & car_one_adj[65])), (((vector1[64] & sum_one[64]) | (vector1[64] & car_one_adj[64])) | (sum_one[64] & car_one_adj[64])), (((vector1[63] & sum_one[63]) | (vector1[63] & car_one_adj[63])) | (sum_one[63] & car_one_adj[63])), (((vector1[62] & sum_one[62]) | (vector1[62] & car_one_adj[62])) | (sum_one[62] & car_one_adj[62])), (((vector1[61] & sum_one[61]) | (vector1[61] & car_one_adj[61])) | (sum_one[61] & car_one_adj[61])), (((vector1[60] & sum_one[60]) | (vector1[60] & car_one_adj[60])) | (sum_one[60] & car_one_adj[60])), (((vector1[59] & sum_one[59]) | (vector1[59] & car_one_adj[59])) | (sum_one[59] & car_one_adj[59])), (((vector1[58] & sum_one[58]) | (vector1[58] & car_one_adj[58])) | (sum_one[58] & car_one_adj[58])), (((vector1[57] & sum_one[57]) | (vector1[57] & car_one_adj[57])) | (sum_one[57] & car_one_adj[57])), (((vector1[56] & sum_one[56]) | (vector1[56] & car_one_adj[56])) | (sum_one[56] & car_one_adj[56])), (((vector1[55] & sum_one[55]) | (vector1[55] & car_one_adj[55])) | (sum_one[55] & car_one_adj[55])), (((vector1[54] & sum_one[54]) | (vector1[54] & car_one_adj[54])) | (sum_one[54] & car_one_adj[54])), (((vector1[53] & sum_one[53]) | (vector1[53] & car_one_adj[53])) | (sum_one[53] & car_one_adj[53])), (((vector1[52] & sum_one[52]) | (vector1[52] & car_one_adj[52])) | (sum_one[52] & car_one_adj[52])), (((vector1[51] & sum_one[51]) | (vector1[51] & car_one_adj[51])) | (sum_one[51] & car_one_adj[51])), (((vector1[50] & sum_one[50]) | (vector1[50] & car_one_adj[50])) | (sum_one[50] & car_one_adj[50])), (((vector1[49] & sum_one[49]) | (vector1[49]
 & car_one_adj[49])) | (sum_one[49] & car_one_adj[49])), (((vector1[48] & sum_one[48]) | (vector1[48] & car_one_adj[48])) | (sum_one[48] & car_one_adj[48])), (((vector1[47] & sum_one[47]) | (vector1[47] & car_one_adj[47])) | (sum_one[47] & car_one_adj[47])), (((vector1[46] & sum_one[46]) | (vector1[46] & car_one_adj[46])) | (sum_one[46] & car_one_adj[46])), (((vector1[45] & sum_one[45]) | (vector1[45] & car_one_adj[45])) | (sum_one[45] & car_one_adj[45])), (((vector1[44] & sum_one[44]) | (vector1[44] & car_one_adj[44])) | (sum_one[44] & car_one_adj[44])), (((vector1[43] & sum_one[43]) | (vector1[43] & car_one_adj[43])) | (sum_one[43] & car_one_adj[43])), (((vector1[42] & sum_one[42]) | (vector1[42] & car_one_adj[42])) | (sum_one[42] & car_one_adj[42])), (((vector1[41] & sum_one[41]) | (vector1[41] & car_one_adj[41])) | (sum_one[41] & car_one_adj[41])), (((vector1[40] & sum_one[40]) | (vector1[40] & car_one_adj[40])) | (sum_one[40] & car_one_adj[40])), (((vector1[39] & sum_one[39]) | (vector1[39] & car_one_adj[39])) | (sum_one[39] & car_one_adj[39])), (((vector1[38] & sum_one[38]) | (vector1[38] & car_one_adj[38])) | (sum_one[38] & car_one_adj[38])), (((vector1[37] & sum_one[37]) | (vector1[37] & car_one_adj[37])) | (sum_one[37] & car_one_adj[37])), (((vector1[36] & sum_one[36]) | (vector1[36] & car_one_adj[36])) | (sum_one[36] & car_one_adj[36])), (((vector1[35] & sum_one[35]) | (vector1[35] & car_one_adj[35])) | (sum_one[35] & car_one_adj[35])), (((vector1[34] & sum_one[34]) | (vector1[34] & car_one_adj[34])) | (sum_one[34] & car_one_adj[34])), (((vector1[33] & sum_one[33]) | (vector1[33] & car_one_adj[33])) | (sum_one[33] & car_one_adj[33])), (((vector1[32] & sum_one[32]) | (vector1[32] & car_one_adj[32])) | (sum_one[32] & car_one_adj[32])), (((vector1[31] & sum_one[31]) | (vector1[31] & car_one_adj[31])) | (sum_one[31] & car_one_adj[31])), (((vector1[30] & sum_one[30]) | (vector1[30] & car_one_adj[30])) | (sum_one[30] & car_one_adj[30])), (((vector1[29] & sum_one[29]) | (vector1[29] & car_one_adj[29])) | (sum_one[29]
 & car_one_adj[29])), (((vector1[28] & sum_one[28]) | (vector1[28] & car_one_adj[28])) | (sum_one[28] & car_one_adj[28])), (((vector1[27] & sum_one[27]) | (vector1[27] & car_one_adj[27])) | (sum_one[27] & car_one_adj[27])), (((vector1[26] & sum_one[26]) | (vector1[26] & car_one_adj[26])) | (sum_one[26] & car_one_adj[26])), (((vector1[25] & sum_one[25]) | (vector1[25] & car_one_adj[25])) | (sum_one[25] & car_one_adj[25])), (((vector1[24] & sum_one[24]) | (vector1[24] & car_one_adj[24])) | (sum_one[24] & car_one_adj[24])), (((vector1[23] & sum_one[23]) | (vector1[23] & car_one_adj[23])) | (sum_one[23] & car_one_adj[23])), (((vector1[22] & sum_one[22]) | (vector1[22] & car_one_adj[22])) | (sum_one[22] & car_one_adj[22])), (((vector1[21] & sum_one[21]) | (vector1[21] & car_one_adj[21])) | (sum_one[21] & car_one_adj[21])), (((vector1[20] & sum_one[20]) | (vector1[20] & car_one_adj[20])) | (sum_one[20] & car_one_adj[20])), (((vector1[19] & sum_one[19]) | (vector1[19] & car_one_adj[19])) | (sum_one[19] & car_one_adj[19])), (((vector1[18] & sum_one[18]) | (vector1[18] & car_one_adj[18])) | (sum_one[18] & car_one_adj[18])), (((vector1[17] & sum_one[17]) | (vector1[17] & car_one_adj[17])) | (sum_one[17] & car_one_adj[17])), (((vector1[16] & sum_one[16]) | (vector1[16] & car_one_adj[16])) | (sum_one[16] & car_one_adj[16])), (((vector1[15] & sum_one[15]) | (vector1[15] & car_one_adj[15])) | (sum_one[15] & car_one_adj[15])), (((vector1[14] & sum_one[14]) | (vector1[14] & car_one_adj[14])) | (sum_one[14] & car_one_adj[14])), (((vector1[13] & sum_one[13]) | (vector1[13] & car_one_adj[13])) | (sum_one[13] & car_one_adj[13])), (((vector1[12] & sum_one[12]) | (vector1[12] & car_one_adj[12])) | (sum_one[12] & car_one_adj[12])), (((vector1[11] & sum_one[11]) | (vector1[11] & car_one_adj[11])) | (sum_one[11] & car_one_adj[11])), (((vector1[10] & sum_one[10]) | (vector1[10] & car_one_adj[10])) | (sum_one[10] & car_one_adj[10])), (((vector1[9] & sum_one[9]) | (vector1[9] & car_one_adj[9])) | (sum_one[9] & car_one_adj[9])), (((vector1[8]
 & sum_one[8]) | (vector1[8] & car_one_adj[8])) | (sum_one[8] & car_one_adj[8])), (((vector1[7] & sum_one[7]) | (vector1[7] & car_one_adj[7])) | (sum_one[7] & car_one_adj[7])), (((vector1[6] & sum_one[6]) | (vector1[6] & car_one_adj[6])) | (sum_one[6] & car_one_adj[6])), (((vector1[5] & sum_one[5]) | (vector1[5] & car_one_adj[5])) | (sum_one[5] & car_one_adj[5])), (((vector1[4] & sum_one[4]) | (vector1[4] & car_one_adj[4])) | (sum_one[4] & car_one_adj[4])), (((vector1[3] & sum_one[3]) | (vector1[3] & car_one_adj[3])) | (sum_one[3] & car_one_adj[3])), (((vector1[2] & sum_one[2]) | (vector1[2] & car_one_adj[2])) | (sum_one[2] & car_one_adj[2])), (((vector1[1] & sum_one[1]) | (vector1[1] & car_one_adj[1])) | (sum_one[1] & car_one_adj[1])), (((vector1[0] & sum_one[0]) | (vector1[0] & car_one_adj[0])) | (sum_one[0] & car_one_adj[0]))},
		car_two_adj = {car_two[88:0], 1'b1},
		car_two_wo = car_two_adj_reg0,
		lowest_bits_wi = lsb_prod_wo[30:0],
		lowest_bits_wo = lowest_bits_wi_reg2,
		lsb_prod_wi = wire_lsb_prod_result,
		lsb_prod_wo = lsb_prod_wi_reg0,
		mid_prod_wi = wire_mid_prod_result,
		mid_prod_wo = mid_prod_wi_reg0,
		msb_prod_out = wire_msb_prod_result,
		msb_prod_wi = msb_prod_out,
		msb_prod_wo = msb_prod_wi_reg0,
		neg_lsb = {{28{1'b1}}, (~ lsb_prod_wo[61]), (~ lsb_prod_wo[60]), (~ lsb_prod_wo[59]), (~ lsb_prod_wo[58]), (~ lsb_prod_wo[57]), (~ lsb_prod_wo[56]), (~ lsb_prod_wo[55]), (~ lsb_prod_wo[54]), (~ lsb_prod_wo[53]), (~ lsb_prod_wo[52]), (~ lsb_prod_wo[51]), (~ lsb_prod_wo[50]), (~ lsb_prod_wo[49]), (~ lsb_prod_wo[48]), (~ lsb_prod_wo[47]), (~ lsb_prod_wo[46]), (~ lsb_prod_wo[45]), (~ lsb_prod_wo[44]), (~ lsb_prod_wo[43]), (~ lsb_prod_wo[42]), (~ lsb_prod_wo[41]), (~ lsb_prod_wo[40]), (~ lsb_prod_wo[39]), (~ lsb_prod_wo[38]), (~ lsb_prod_wo[37]), (~ lsb_prod_wo[36]), (~ lsb_prod_wo[35]), (~ lsb_prod_wo[34]), (~ lsb_prod_wo[33]), (~ lsb_prod_wo[32]), (~ lsb_prod_wo[31]), (~ lsb_prod_wo[30]), (~ lsb_prod_wo[29]), (~ lsb_prod_wo[28]), (~ lsb_prod_wo[27]), (~ lsb_prod_wo[26]), (~ lsb_prod_wo[25]), (~ lsb_prod_wo[24]), (~ lsb_prod_wo[23]), (~ lsb_prod_wo[22]), (~ lsb_prod_wo[21]), (~ lsb_prod_wo[20]), (~ lsb_prod_wo[19]), (~ lsb_prod_wo[18]), (~ lsb_prod_wo[17]), (~ lsb_prod_wo[16]), (~ lsb_prod_wo[15]), (~ lsb_prod_wo[14]), (~ lsb_prod_wo[13]), (~ lsb_prod_wo[12]), (~ lsb_prod_wo[11]), (~ lsb_prod_wo[10]), (~ lsb_prod_wo[9]), (~ lsb_prod_wo[8]), (~ lsb_prod_wo[7]), (~ lsb_prod_wo[6]), (~ lsb_prod_wo[5]), (~ lsb_prod_wo[4]), (~ lsb_prod_wo[3]), (~ lsb_prod_wo[2]), (~ lsb_prod_wo[1]), (~ lsb_prod_wo[0])},
		neg_msb = {{31{1'b1}}, (~ msb_prod_wo[58]), (~ msb_prod_wo[57]), (~ msb_prod_wo[56]), (~ msb_prod_wo[55]), (~ msb_prod_wo[54]), (~ msb_prod_wo[53]), (~ msb_prod_wo[52]), (~ msb_prod_wo[51]), (~ msb_prod_wo[50]), (~ msb_prod_wo[49]), (~ msb_prod_wo[48]), (~ msb_prod_wo[47]), (~ msb_prod_wo[46]), (~ msb_prod_wo[45]), (~ msb_prod_wo[44]), (~ msb_prod_wo[43]), (~ msb_prod_wo[42]), (~ msb_prod_wo[41]), (~ msb_prod_wo[40]), (~ msb_prod_wo[39]), (~ msb_prod_wo[38]), (~ msb_prod_wo[37]), (~ msb_prod_wo[36]), (~ msb_prod_wo[35]), (~ msb_prod_wo[34]), (~ msb_prod_wo[33]), (~ msb_prod_wo[32]), (~ msb_prod_wo[31]), (~ msb_prod_wo[30]), (~ msb_prod_wo[29]), (~ msb_prod_wo[28]), (~ msb_prod_wo[27]), (~ msb_prod_wo[26]), (~ msb_prod_wo[25]), (~ msb_prod_wo[24]), (~ msb_prod_wo[23]), (~ msb_prod_wo[22]), (~ msb_prod_wo[21]), (~ msb_prod_wo[20]), (~ msb_prod_wo[19]), (~ msb_prod_wo[18]), (~ msb_prod_wo[17]), (~ msb_prod_wo[16]), (~ msb_prod_wo[15]), (~ msb_prod_wo[14]), (~ msb_prod_wo[13]), (~ msb_prod_wo[12]), (~ msb_prod_wo[11]), (~ msb_prod_wo[10]), (~ msb_prod_wo[9]), (~ msb_prod_wo[8]), (~ msb_prod_wo[7]), (~ msb_prod_wo[6]), (~ msb_prod_wo[5]), (~ msb_prod_wo[4]), (~ msb_prod_wo[3]), (~ msb_prod_wo[2]), (~ msb_prod_wo[1]), (~ msb_prod_wo[0])},
		result = {wire_sum_result[88:0], lowest_bits_wo},
		sum_one = {((vector2[89] ^ neg_msb[89]) ^ neg_lsb[89]), ((vector2[88] ^ neg_msb[88]) ^ neg_lsb[88]), ((vector2[87] ^ neg_msb[87]) ^ neg_lsb[87]), ((vector2[86] ^ neg_msb[86]) ^ neg_lsb[86]), ((vector2[85] ^ neg_msb[85]) ^ neg_lsb[85]), ((vector2[84] ^ neg_msb[84]) ^ neg_lsb[84]), ((vector2[83] ^ neg_msb[83]) ^ neg_lsb[83]), ((vector2[82] ^ neg_msb[82]) ^ neg_lsb[82]), ((vector2[81] ^ neg_msb[81]) ^ neg_lsb[81]), ((vector2[80] ^ neg_msb[80]) ^ neg_lsb[80]), ((vector2[79] ^ neg_msb[79]) ^ neg_lsb[79]), ((vector2[78] ^ neg_msb[78]) ^ neg_lsb[78]), ((vector2[77] ^ neg_msb[77]) ^ neg_lsb[77]), ((vector2[76] ^ neg_msb[76]) ^ neg_lsb[76]), ((vector2[75] ^ neg_msb[75]) ^ neg_lsb[75]), ((vector2[74] ^ neg_msb[74]) ^ neg_lsb[74]), ((vector2[73] ^ neg_msb[73]) ^ neg_lsb[73]), ((vector2[72] ^ neg_msb[72]) ^ neg_lsb[72]), ((vector2[71] ^ neg_msb[71]) ^ neg_lsb[71]), ((vector2[70] ^ neg_msb[70]) ^ neg_lsb[70]), ((vector2[69] ^ neg_msb[69]) ^ neg_lsb[69]), ((vector2[68] ^ neg_msb[68]) ^ neg_lsb[68]), ((vector2[67] ^ neg_msb[67]) ^ neg_lsb[67]), ((vector2[66] ^ neg_msb[66]) ^ neg_lsb[66]), ((vector2[65] ^ neg_msb[65]) ^ neg_lsb[65]), ((vector2[64] ^ neg_msb[64]) ^ neg_lsb[64]), ((vector2[63] ^ neg_msb[63]) ^ neg_lsb[63]), ((vector2[62] ^ neg_msb[62]) ^ neg_lsb[62]), ((vector2[61] ^ neg_msb[61]) ^ neg_lsb[61]), ((vector2[60] ^ neg_msb[60]) ^ neg_lsb[60]), ((vector2[59] ^ neg_msb[59]) ^ neg_lsb[59]), ((vector2[58] ^ neg_msb[58]) ^ neg_lsb[58]), ((vector2[57] ^ neg_msb[57]) ^ neg_lsb[57]), ((vector2[56] ^ neg_msb[56]) ^ neg_lsb[56]), ((vector2[55] ^ neg_msb[55]) ^ neg_lsb[55]), ((vector2[54] ^ neg_msb[54]) ^ neg_lsb[54]), ((vector2[53] ^ neg_msb[53]) ^ neg_lsb[53]), ((vector2[52] ^ neg_msb[52]) ^ neg_lsb[52]), ((vector2[51] ^ neg_msb[51]) ^ neg_lsb[51]), ((vector2[50] ^ neg_msb[50]) ^ neg_lsb[50]), ((vector2[49] ^ neg_msb[49]) ^ neg_lsb[49]), ((vector2[48] ^ neg_msb[48]) ^ neg_lsb[48]), ((vector2[47] ^ neg_msb[47]) ^ neg_lsb[47]), ((vector2[46] ^ neg_msb[46]) ^ neg_lsb[46]), ((vector2[45] ^ neg_msb[45]) ^ neg_lsb[45]), ((vector2[44]
 ^ neg_msb[44]) ^ neg_lsb[44]), ((vector2[43] ^ neg_msb[43]) ^ neg_lsb[43]), ((vector2[42] ^ neg_msb[42]) ^ neg_lsb[42]), ((vector2[41] ^ neg_msb[41]) ^ neg_lsb[41]), ((vector2[40] ^ neg_msb[40]) ^ neg_lsb[40]), ((vector2[39] ^ neg_msb[39]) ^ neg_lsb[39]), ((vector2[38] ^ neg_msb[38]) ^ neg_lsb[38]), ((vector2[37] ^ neg_msb[37]) ^ neg_lsb[37]), ((vector2[36] ^ neg_msb[36]) ^ neg_lsb[36]), ((vector2[35] ^ neg_msb[35]) ^ neg_lsb[35]), ((vector2[34] ^ neg_msb[34]) ^ neg_lsb[34]), ((vector2[33] ^ neg_msb[33]) ^ neg_lsb[33]), ((vector2[32] ^ neg_msb[32]) ^ neg_lsb[32]), ((vector2[31] ^ neg_msb[31]) ^ neg_lsb[31]), ((vector2[30] ^ neg_msb[30]) ^ neg_lsb[30]), ((vector2[29] ^ neg_msb[29]) ^ neg_lsb[29]), ((vector2[28] ^ neg_msb[28]) ^ neg_lsb[28]), ((vector2[27] ^ neg_msb[27]) ^ neg_lsb[27]), ((vector2[26] ^ neg_msb[26]) ^ neg_lsb[26]), ((vector2[25] ^ neg_msb[25]) ^ neg_lsb[25]), ((vector2[24] ^ neg_msb[24]) ^ neg_lsb[24]), ((vector2[23] ^ neg_msb[23]) ^ neg_lsb[23]), ((vector2[22] ^ neg_msb[22]) ^ neg_lsb[22]), ((vector2[21] ^ neg_msb[21]) ^ neg_lsb[21]), ((vector2[20] ^ neg_msb[20]) ^ neg_lsb[20]), ((vector2[19] ^ neg_msb[19]) ^ neg_lsb[19]), ((vector2[18] ^ neg_msb[18]) ^ neg_lsb[18]), ((vector2[17] ^ neg_msb[17]) ^ neg_lsb[17]), ((vector2[16] ^ neg_msb[16]) ^ neg_lsb[16]), ((vector2[15] ^ neg_msb[15]) ^ neg_lsb[15]), ((vector2[14] ^ neg_msb[14]) ^ neg_lsb[14]), ((vector2[13] ^ neg_msb[13]) ^ neg_lsb[13]), ((vector2[12] ^ neg_msb[12]) ^ neg_lsb[12]), ((vector2[11] ^ neg_msb[11]) ^ neg_lsb[11]), ((vector2[10] ^ neg_msb[10]) ^ neg_lsb[10]), ((vector2[9] ^ neg_msb[9]) ^ neg_lsb[9]), ((vector2[8] ^ neg_msb[8]) ^ neg_lsb[8]), ((vector2[7] ^ neg_msb[7]) ^ neg_lsb[7]), ((vector2[6] ^ neg_msb[6]) ^ neg_lsb[6]), ((vector2[5] ^ neg_msb[5]) ^ neg_lsb[5]), ((vector2[4] ^ neg_msb[4]) ^ neg_lsb[4]), ((vector2[3] ^ neg_msb[3]) ^ neg_lsb[3]), ((vector2[2] ^ neg_msb[2]) ^ neg_lsb[2]), ((vector2[1] ^ neg_msb[1]) ^ neg_lsb[1]), ((vector2[0] ^ neg_msb[0]) ^ neg_lsb[0])},
		sum_two = {((vector1[89] ^ sum_one[89]) ^ car_one_adj[89]), ((vector1[88] ^ sum_one[88]) ^ car_one_adj[88]), ((vector1[87] ^ sum_one[87]) ^ car_one_adj[87]), ((vector1[86] ^ sum_one[86]) ^ car_one_adj[86]), ((vector1[85] ^ sum_one[85]) ^ car_one_adj[85]), ((vector1[84] ^ sum_one[84]) ^ car_one_adj[84]), ((vector1[83] ^ sum_one[83]) ^ car_one_adj[83]), ((vector1[82] ^ sum_one[82]) ^ car_one_adj[82]), ((vector1[81] ^ sum_one[81]) ^ car_one_adj[81]), ((vector1[80] ^ sum_one[80]) ^ car_one_adj[80]), ((vector1[79] ^ sum_one[79]) ^ car_one_adj[79]), ((vector1[78] ^ sum_one[78]) ^ car_one_adj[78]), ((vector1[77] ^ sum_one[77]) ^ car_one_adj[77]), ((vector1[76] ^ sum_one[76]) ^ car_one_adj[76]), ((vector1[75] ^ sum_one[75]) ^ car_one_adj[75]), ((vector1[74] ^ sum_one[74]) ^ car_one_adj[74]), ((vector1[73] ^ sum_one[73]) ^ car_one_adj[73]), ((vector1[72] ^ sum_one[72]) ^ car_one_adj[72]), ((vector1[71] ^ sum_one[71]) ^ car_one_adj[71]), ((vector1[70] ^ sum_one[70]) ^ car_one_adj[70]), ((vector1[69] ^ sum_one[69]) ^ car_one_adj[69]), ((vector1[68] ^ sum_one[68]) ^ car_one_adj[68]), ((vector1[67] ^ sum_one[67]) ^ car_one_adj[67]), ((vector1[66] ^ sum_one[66]) ^ car_one_adj[66]), ((vector1[65] ^ sum_one[65]) ^ car_one_adj[65]), ((vector1[64] ^ sum_one[64]) ^ car_one_adj[64]), ((vector1[63] ^ sum_one[63]) ^ car_one_adj[63]), ((vector1[62] ^ sum_one[62]) ^ car_one_adj[62]), ((vector1[61] ^ sum_one[61]) ^ car_one_adj[61]), ((vector1[60] ^ sum_one[60]) ^ car_one_adj[60]), ((vector1[59] ^ sum_one[59]) ^ car_one_adj[59]), ((vector1[58] ^ sum_one[58]) ^ car_one_adj[58]), ((vector1[57] ^ sum_one[57]) ^ car_one_adj[57]), ((vector1[56] ^ sum_one[56]) ^ car_one_adj[56]), ((vector1[55] ^ sum_one[55]) ^ car_one_adj[55]), ((vector1[54] ^ sum_one[54]) ^ car_one_adj[54]), ((vector1[53] ^ sum_one[53]) ^ car_one_adj[53]), ((vector1[52] ^ sum_one[52]) ^ car_one_adj[52]), ((vector1[51] ^ sum_one[51]) ^ car_one_adj[51]), ((vector1[50] ^ sum_one[50]) ^ car_one_adj[50]), ((vector1[49] ^ sum_one[49]) ^ car_one_adj[49]), ((vector1[48] ^ sum_one[48]
) ^ car_one_adj[48]), ((vector1[47] ^ sum_one[47]) ^ car_one_adj[47]), ((vector1[46] ^ sum_one[46]) ^ car_one_adj[46]), ((vector1[45] ^ sum_one[45]) ^ car_one_adj[45]), ((vector1[44] ^ sum_one[44]) ^ car_one_adj[44]), ((vector1[43] ^ sum_one[43]) ^ car_one_adj[43]), ((vector1[42] ^ sum_one[42]) ^ car_one_adj[42]), ((vector1[41] ^ sum_one[41]) ^ car_one_adj[41]), ((vector1[40] ^ sum_one[40]) ^ car_one_adj[40]), ((vector1[39] ^ sum_one[39]) ^ car_one_adj[39]), ((vector1[38] ^ sum_one[38]) ^ car_one_adj[38]), ((vector1[37] ^ sum_one[37]) ^ car_one_adj[37]), ((vector1[36] ^ sum_one[36]) ^ car_one_adj[36]), ((vector1[35] ^ sum_one[35]) ^ car_one_adj[35]), ((vector1[34] ^ sum_one[34]) ^ car_one_adj[34]), ((vector1[33] ^ sum_one[33]) ^ car_one_adj[33]), ((vector1[32] ^ sum_one[32]) ^ car_one_adj[32]), ((vector1[31] ^ sum_one[31]) ^ car_one_adj[31]), ((vector1[30] ^ sum_one[30]) ^ car_one_adj[30]), ((vector1[29] ^ sum_one[29]) ^ car_one_adj[29]), ((vector1[28] ^ sum_one[28]) ^ car_one_adj[28]), ((vector1[27] ^ sum_one[27]) ^ car_one_adj[27]), ((vector1[26] ^ sum_one[26]) ^ car_one_adj[26]), ((vector1[25] ^ sum_one[25]) ^ car_one_adj[25]), ((vector1[24] ^ sum_one[24]) ^ car_one_adj[24]), ((vector1[23] ^ sum_one[23]) ^ car_one_adj[23]), ((vector1[22] ^ sum_one[22]) ^ car_one_adj[22]), ((vector1[21] ^ sum_one[21]) ^ car_one_adj[21]), ((vector1[20] ^ sum_one[20]) ^ car_one_adj[20]), ((vector1[19] ^ sum_one[19]) ^ car_one_adj[19]), ((vector1[18] ^ sum_one[18]) ^ car_one_adj[18]), ((vector1[17] ^ sum_one[17]) ^ car_one_adj[17]), ((vector1[16] ^ sum_one[16]) ^ car_one_adj[16]), ((vector1[15] ^ sum_one[15]) ^ car_one_adj[15]), ((vector1[14] ^ sum_one[14]) ^ car_one_adj[14]), ((vector1[13] ^ sum_one[13]) ^ car_one_adj[13]), ((vector1[12] ^ sum_one[12]) ^ car_one_adj[12]), ((vector1[11] ^ sum_one[11]) ^ car_one_adj[11]), ((vector1[10] ^ sum_one[10]) ^ car_one_adj[10]), ((vector1[9] ^ sum_one[9]) ^ car_one_adj[9]), ((vector1[8] ^ sum_one[8]) ^ car_one_adj[8]), ((vector1[7] ^ sum_one[7]) ^ car_one_adj[7]), ((vector1[6] ^ sum_one[6])
 ^ car_one_adj[6]), ((vector1[5] ^ sum_one[5]) ^ car_one_adj[5]), ((vector1[4] ^ sum_one[4]) ^ car_one_adj[4]), ((vector1[3] ^ sum_one[3]) ^ car_one_adj[3]), ((vector1[2] ^ sum_one[2]) ^ car_one_adj[2]), ((vector1[1] ^ sum_one[1]) ^ car_one_adj[1]), ((vector1[0] ^ sum_one[0]) ^ car_one_adj[0])},
		sum_two_wo = sum_two_reg0,
		vector1 = {msb_prod_wo, lsb_prod_wo[61:31]},
		vector2 = {{26{1'b0}}, mid_prod_wo},
		wire_a = dataa,
		wire_b = datab;
endmodule //ALTFP_EXa_altmult_opt12


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_REPRESENTATION="SIGNED" LPM_WIDTH=12 dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_PIPELINE=1 LPM_REPRESENTATION="SIGNED" LPM_WIDTH=12 aclr cin clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_REPRESENTATION="SIGNED" LPM_WIDTH=12 dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_REPRESENTATION="SIGNED" LPM_WIDTH=11 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_REPRESENTATION="SIGNED" LPM_WIDTH=52 dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_REPRESENTATION="SIGNED" LPM_WIDTH=60 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_REPRESENTATION="SIGNED" LPM_WIDTH=70 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_REPRESENTATION="SIGNED" LPM_WIDTH=60 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_PIPELINE=1 LPM_REPRESENTATION="SIGNED" LPM_WIDTH=11 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_clshift LPM_PIPELINE=2 LPM_SHIFTTYPE="LOGICAL" LPM_WIDTH=70 LPM_WIDTHDIST=7 aclr clken clock data direction distance result
//VERSION_BEGIN 16.0 cbx_lpm_clshift 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ  VERSION_END

//synthesis_resources = reg 145 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  ALTFP_EXa_lpm_clshift
	( 
	aclr,
	clken,
	clock,
	data,
	direction,
	distance,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [69:0]  data;
	input   direction;
	input   [6:0]  distance;
	output   [69:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   direction;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[1:0]	direction_reg;
	reg	[69:0]	pipe_wl1c;
	reg	[69:0]	pipe_wl2c;
	reg	sel_pipel4d1c;
	reg	sel_pipel5d1c;
	reg	sel_pipel6d1c;
	wire  [2:0]  direction_w;
	wire  [63:0]  pad_w;
	wire  [559:0]  sbit_w;
	wire  [6:0]  sel_w;

	// synopsys translate_off
	initial
		direction_reg = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) direction_reg <= 2'b0;
		else if  (clken == 1'b1)   direction_reg <= {direction_w[1:0]};
	// synopsys translate_off
	initial
		pipe_wl1c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) pipe_wl1c <= 70'b0;
		else if  (clken == 1'b1)   pipe_wl1c <= ((({70{(sel_w[3] & (~ direction_w[0]))}} & {sbit_w[271:210], pad_w[7:0]}) | ({70{(sel_w[3] & direction_w[0])}} & {pad_w[7:0], sbit_w[279:218]})) | ({70{(~ sel_w[3])}} & sbit_w[279:210]));
	// synopsys translate_off
	initial
		pipe_wl2c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) pipe_wl2c <= 70'b0;
		else if  (clken == 1'b1)   pipe_wl2c <= ((({70{(sel_w[6] & (~ direction_w[1]))}} & {sbit_w[425:420], pad_w[63:0]}) | ({70{(sel_w[6] & direction_w[1])}} & {pad_w[63:0], sbit_w[489:484]})) | ({70{(~ sel_w[6])}} & sbit_w[489:420]));
	// synopsys translate_off
	initial
		sel_pipel4d1c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sel_pipel4d1c <= 1'b0;
		else if  (clken == 1'b1)   sel_pipel4d1c <= distance[4];
	// synopsys translate_off
	initial
		sel_pipel5d1c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sel_pipel5d1c <= 1'b0;
		else if  (clken == 1'b1)   sel_pipel5d1c <= distance[5];
	// synopsys translate_off
	initial
		sel_pipel6d1c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sel_pipel6d1c <= 1'b0;
		else if  (clken == 1'b1)   sel_pipel6d1c <= distance[6];
	assign
		direction_w = {direction_reg[1:0], direction},
		pad_w = {64{1'b0}},
		result = sbit_w[559:490],
		sbit_w = {pipe_wl2c, ((({70{(sel_w[5] & (~ direction_w[1]))}} & {sbit_w[387:350], pad_w[31:0]}) | ({70{(sel_w[5] & direction_w[1])}} & {pad_w[31:0], sbit_w[419:382]})) | ({70{(~ sel_w[5])}} & sbit_w[419:350])), ((({70{(sel_w[4] & (~ direction_w[1]))}} & {sbit_w[333:280], pad_w[15:0]}) | ({70{(sel_w[4] & direction_w[1])}} & {pad_w[15:0], sbit_w[349:296]})) | ({70{(~ sel_w[4])}} & sbit_w[349:280])), pipe_wl1c, ((({70{(sel_w[2] & (~ direction_w[0]))}} & {sbit_w[205:140], pad_w[3:0]}) | ({70{(sel_w[2] & direction_w[0])}} & {pad_w[3:0], sbit_w[209:144]})) | ({70{(~ sel_w[2])}} & sbit_w[209:140])), ((({70{(sel_w[1] & (~ direction_w[0]))}} & {sbit_w[137:70], pad_w[1:0]}) | ({70{(sel_w[1] & direction_w[0])}} & {pad_w[1:0], sbit_w[139:72]})) | ({70{(~ sel_w[1])}} & sbit_w[139:70])), ((({70{(sel_w[0] & (~ direction_w[0]))}} & {sbit_w[68:0], pad_w[0]}) | ({70{(sel_w[0] & direction_w[0])}} & {pad_w[0], sbit_w[69:1]})) | ({70{(~ sel_w[0])}} & sbit_w[69:0])), data},
		sel_w = {sel_pipel6d1c, sel_pipel5d1c, sel_pipel4d1c, distance[3:0]};
endmodule //ALTFP_EXa_lpm_clshift


//lpm_compare DEVICE_FAMILY="Cyclone V" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=11 agb dataa datab
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_compare 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_compare DEVICE_FAMILY="Cyclone V" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=9 ageb dataa datab
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_compare 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_compare DEVICE_FAMILY="Cyclone V" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=11 agb dataa datab
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_compare 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=4 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=11 LPM_WIDTHB=70 LPM_WIDTHP=81 aclr clken clock dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_mult 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_padd 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ cbx_util_mgl 2016:04:27:18:05:34:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  ALTFP_EXa_mult12345
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clken;
	input   clock;
	input   [10:0]  dataa;
	input   [69:0]  datab;
	output   [80:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg  [10:0]  dataa_input_reg;
	reg  [69:0]  datab_input_reg;
	reg  [80:0]  result_output_reg;
	reg  [80:0]  result_extra0_reg;
	reg  [80:0]  result_extra1_reg;
	wire [10:0]    dataa_wire;
	wire [69:0]    datab_wire;
	wire [80:0]    result_wire;


	// synopsys translate_off
	initial
		dataa_input_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			dataa_input_reg <= 11'b0;
		else
			if (clken == 1'b1)
				dataa_input_reg <= dataa;
	// synopsys translate_off
	initial
		datab_input_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			datab_input_reg <= 70'b0;
		else
			if (clken == 1'b1)
				datab_input_reg <= datab;
	// synopsys translate_off
	initial
		result_output_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			result_output_reg <= 81'b0;
		else
			if (clken == 1'b1)
				result_output_reg <= result_extra1_reg;
	// synopsys translate_off
	initial
		result_extra0_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			result_extra0_reg <= 81'b0;
		else
			if (clken == 1'b1)
				result_extra0_reg <= result_wire[80:0];
	// synopsys translate_off
	initial
		result_extra1_reg = 0;
	// synopsys translate_on
	always @(posedge clock or posedge aclr)
		if (aclr == 1'b1)
			result_extra1_reg <= 81'b0;
		else
			if (clken == 1'b1)
				result_extra1_reg <= result_extra0_reg;

	assign dataa_wire = dataa_input_reg;
	assign datab_wire = datab_input_reg;
	assign result_wire = dataa_wire * datab_wire;
	assign result = ({result_output_reg});

endmodule //ALTFP_EXa_mult12345


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="Cyclone V" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=15 LPM_WIDTHB=12 LPM_WIDTHP=27 dataa datab result
//VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_mult 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_padd 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ cbx_util_mgl 2016:04:27:18:05:34:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  ALTFP_EXa_mult123456
	( 
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
